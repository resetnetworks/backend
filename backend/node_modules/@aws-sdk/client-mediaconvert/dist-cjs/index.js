"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  AacAudioDescriptionBroadcasterMix: () => AacAudioDescriptionBroadcasterMix,
  AacCodecProfile: () => AacCodecProfile,
  AacCodingMode: () => AacCodingMode,
  AacRateControlMode: () => AacRateControlMode,
  AacRawFormat: () => AacRawFormat,
  AacSpecification: () => AacSpecification,
  AacVbrQuality: () => AacVbrQuality,
  Ac3BitstreamMode: () => Ac3BitstreamMode,
  Ac3CodingMode: () => Ac3CodingMode,
  Ac3DynamicRangeCompressionLine: () => Ac3DynamicRangeCompressionLine,
  Ac3DynamicRangeCompressionProfile: () => Ac3DynamicRangeCompressionProfile,
  Ac3DynamicRangeCompressionRf: () => Ac3DynamicRangeCompressionRf,
  Ac3LfeFilter: () => Ac3LfeFilter,
  Ac3MetadataControl: () => Ac3MetadataControl,
  AccelerationMode: () => AccelerationMode,
  AccelerationStatus: () => AccelerationStatus,
  AdvancedInputFilter: () => AdvancedInputFilter,
  AdvancedInputFilterAddTexture: () => AdvancedInputFilterAddTexture,
  AdvancedInputFilterSharpen: () => AdvancedInputFilterSharpen,
  AfdSignaling: () => AfdSignaling,
  AlphaBehavior: () => AlphaBehavior,
  AncillaryConvert608To708: () => AncillaryConvert608To708,
  AncillaryTerminateCaptions: () => AncillaryTerminateCaptions,
  AntiAlias: () => AntiAlias,
  AssociateCertificateCommand: () => AssociateCertificateCommand,
  AudioChannelTag: () => AudioChannelTag,
  AudioCodec: () => AudioCodec,
  AudioDefaultSelection: () => AudioDefaultSelection,
  AudioDurationCorrection: () => AudioDurationCorrection,
  AudioLanguageCodeControl: () => AudioLanguageCodeControl,
  AudioNormalizationAlgorithm: () => AudioNormalizationAlgorithm,
  AudioNormalizationAlgorithmControl: () => AudioNormalizationAlgorithmControl,
  AudioNormalizationLoudnessLogging: () => AudioNormalizationLoudnessLogging,
  AudioNormalizationPeakCalculation: () => AudioNormalizationPeakCalculation,
  AudioSelectorType: () => AudioSelectorType,
  AudioTypeControl: () => AudioTypeControl,
  Av1AdaptiveQuantization: () => Av1AdaptiveQuantization,
  Av1BitDepth: () => Av1BitDepth,
  Av1FilmGrainSynthesis: () => Av1FilmGrainSynthesis,
  Av1FramerateControl: () => Av1FramerateControl,
  Av1FramerateConversionAlgorithm: () => Av1FramerateConversionAlgorithm,
  Av1RateControlMode: () => Av1RateControlMode,
  Av1SpatialAdaptiveQuantization: () => Av1SpatialAdaptiveQuantization,
  AvcIntraClass: () => AvcIntraClass,
  AvcIntraFramerateControl: () => AvcIntraFramerateControl,
  AvcIntraFramerateConversionAlgorithm: () => AvcIntraFramerateConversionAlgorithm,
  AvcIntraInterlaceMode: () => AvcIntraInterlaceMode,
  AvcIntraScanTypeConversionMode: () => AvcIntraScanTypeConversionMode,
  AvcIntraSlowPal: () => AvcIntraSlowPal,
  AvcIntraTelecine: () => AvcIntraTelecine,
  AvcIntraUhdQualityTuningLevel: () => AvcIntraUhdQualityTuningLevel,
  BadRequestException: () => BadRequestException,
  BandwidthReductionFilterSharpening: () => BandwidthReductionFilterSharpening,
  BandwidthReductionFilterStrength: () => BandwidthReductionFilterStrength,
  BillingTagsSource: () => BillingTagsSource,
  BurnInSubtitleStylePassthrough: () => BurnInSubtitleStylePassthrough,
  BurninSubtitleAlignment: () => BurninSubtitleAlignment,
  BurninSubtitleApplyFontColor: () => BurninSubtitleApplyFontColor,
  BurninSubtitleBackgroundColor: () => BurninSubtitleBackgroundColor,
  BurninSubtitleFallbackFont: () => BurninSubtitleFallbackFont,
  BurninSubtitleFontColor: () => BurninSubtitleFontColor,
  BurninSubtitleOutlineColor: () => BurninSubtitleOutlineColor,
  BurninSubtitleShadowColor: () => BurninSubtitleShadowColor,
  BurninSubtitleTeletextSpacing: () => BurninSubtitleTeletextSpacing,
  CancelJobCommand: () => CancelJobCommand,
  CaptionDestinationType: () => CaptionDestinationType,
  CaptionSourceByteRateLimit: () => CaptionSourceByteRateLimit,
  CaptionSourceConvertPaintOnToPopOn: () => CaptionSourceConvertPaintOnToPopOn,
  CaptionSourceType: () => CaptionSourceType,
  CaptionSourceUpconvertSTLToTeletext: () => CaptionSourceUpconvertSTLToTeletext,
  ChromaPositionMode: () => ChromaPositionMode,
  CmafClientCache: () => CmafClientCache,
  CmafCodecSpecification: () => CmafCodecSpecification,
  CmafEncryptionType: () => CmafEncryptionType,
  CmafImageBasedTrickPlay: () => CmafImageBasedTrickPlay,
  CmafInitializationVectorInManifest: () => CmafInitializationVectorInManifest,
  CmafIntervalCadence: () => CmafIntervalCadence,
  CmafKeyProviderType: () => CmafKeyProviderType,
  CmafManifestCompression: () => CmafManifestCompression,
  CmafManifestDurationFormat: () => CmafManifestDurationFormat,
  CmafMpdManifestBandwidthType: () => CmafMpdManifestBandwidthType,
  CmafMpdProfile: () => CmafMpdProfile,
  CmafPtsOffsetHandlingForBFrames: () => CmafPtsOffsetHandlingForBFrames,
  CmafSegmentControl: () => CmafSegmentControl,
  CmafSegmentLengthControl: () => CmafSegmentLengthControl,
  CmafStreamInfResolution: () => CmafStreamInfResolution,
  CmafTargetDurationCompatibilityMode: () => CmafTargetDurationCompatibilityMode,
  CmafVideoCompositionOffsets: () => CmafVideoCompositionOffsets,
  CmafWriteDASHManifest: () => CmafWriteDASHManifest,
  CmafWriteHLSManifest: () => CmafWriteHLSManifest,
  CmafWriteSegmentTimelineInRepresentation: () => CmafWriteSegmentTimelineInRepresentation,
  CmfcAudioDuration: () => CmfcAudioDuration,
  CmfcAudioTrackType: () => CmfcAudioTrackType,
  CmfcDescriptiveVideoServiceFlag: () => CmfcDescriptiveVideoServiceFlag,
  CmfcIFrameOnlyManifest: () => CmfcIFrameOnlyManifest,
  CmfcKlvMetadata: () => CmfcKlvMetadata,
  CmfcManifestMetadataSignaling: () => CmfcManifestMetadataSignaling,
  CmfcScte35Esam: () => CmfcScte35Esam,
  CmfcScte35Source: () => CmfcScte35Source,
  CmfcTimedMetadata: () => CmfcTimedMetadata,
  CmfcTimedMetadataBoxVersion: () => CmfcTimedMetadataBoxVersion,
  Codec: () => Codec,
  ColorMetadata: () => ColorMetadata,
  ColorPrimaries: () => ColorPrimaries,
  ColorSpace: () => ColorSpace,
  ColorSpaceConversion: () => ColorSpaceConversion,
  ColorSpaceUsage: () => ColorSpaceUsage,
  Commitment: () => Commitment,
  ConflictException: () => ConflictException,
  ContainerType: () => ContainerType,
  CopyProtectionAction: () => CopyProtectionAction,
  CreateJobCommand: () => CreateJobCommand,
  CreateJobTemplateCommand: () => CreateJobTemplateCommand,
  CreatePresetCommand: () => CreatePresetCommand,
  CreateQueueCommand: () => CreateQueueCommand,
  DashIsoGroupAudioChannelConfigSchemeIdUri: () => DashIsoGroupAudioChannelConfigSchemeIdUri,
  DashIsoHbbtvCompliance: () => DashIsoHbbtvCompliance,
  DashIsoImageBasedTrickPlay: () => DashIsoImageBasedTrickPlay,
  DashIsoIntervalCadence: () => DashIsoIntervalCadence,
  DashIsoMpdManifestBandwidthType: () => DashIsoMpdManifestBandwidthType,
  DashIsoMpdProfile: () => DashIsoMpdProfile,
  DashIsoPlaybackDeviceCompatibility: () => DashIsoPlaybackDeviceCompatibility,
  DashIsoPtsOffsetHandlingForBFrames: () => DashIsoPtsOffsetHandlingForBFrames,
  DashIsoSegmentControl: () => DashIsoSegmentControl,
  DashIsoSegmentLengthControl: () => DashIsoSegmentLengthControl,
  DashIsoVideoCompositionOffsets: () => DashIsoVideoCompositionOffsets,
  DashIsoWriteSegmentTimelineInRepresentation: () => DashIsoWriteSegmentTimelineInRepresentation,
  DashManifestStyle: () => DashManifestStyle,
  DecryptionMode: () => DecryptionMode,
  DeinterlaceAlgorithm: () => DeinterlaceAlgorithm,
  DeinterlacerControl: () => DeinterlacerControl,
  DeinterlacerMode: () => DeinterlacerMode,
  DeleteJobTemplateCommand: () => DeleteJobTemplateCommand,
  DeletePolicyCommand: () => DeletePolicyCommand,
  DeletePresetCommand: () => DeletePresetCommand,
  DeleteQueueCommand: () => DeleteQueueCommand,
  DescribeEndpointsCommand: () => DescribeEndpointsCommand,
  DescribeEndpointsMode: () => DescribeEndpointsMode,
  DisassociateCertificateCommand: () => DisassociateCertificateCommand,
  DolbyVisionLevel6Mode: () => DolbyVisionLevel6Mode,
  DolbyVisionMapping: () => DolbyVisionMapping,
  DolbyVisionProfile: () => DolbyVisionProfile,
  DropFrameTimecode: () => DropFrameTimecode,
  DvbSubSubtitleFallbackFont: () => DvbSubSubtitleFallbackFont,
  DvbSubtitleAlignment: () => DvbSubtitleAlignment,
  DvbSubtitleApplyFontColor: () => DvbSubtitleApplyFontColor,
  DvbSubtitleBackgroundColor: () => DvbSubtitleBackgroundColor,
  DvbSubtitleFontColor: () => DvbSubtitleFontColor,
  DvbSubtitleOutlineColor: () => DvbSubtitleOutlineColor,
  DvbSubtitleShadowColor: () => DvbSubtitleShadowColor,
  DvbSubtitleStylePassthrough: () => DvbSubtitleStylePassthrough,
  DvbSubtitleTeletextSpacing: () => DvbSubtitleTeletextSpacing,
  DvbSubtitlingType: () => DvbSubtitlingType,
  DvbddsHandling: () => DvbddsHandling,
  DynamicAudioSelectorType: () => DynamicAudioSelectorType,
  Eac3AtmosBitstreamMode: () => Eac3AtmosBitstreamMode,
  Eac3AtmosCodingMode: () => Eac3AtmosCodingMode,
  Eac3AtmosDialogueIntelligence: () => Eac3AtmosDialogueIntelligence,
  Eac3AtmosDownmixControl: () => Eac3AtmosDownmixControl,
  Eac3AtmosDynamicRangeCompressionLine: () => Eac3AtmosDynamicRangeCompressionLine,
  Eac3AtmosDynamicRangeCompressionRf: () => Eac3AtmosDynamicRangeCompressionRf,
  Eac3AtmosDynamicRangeControl: () => Eac3AtmosDynamicRangeControl,
  Eac3AtmosMeteringMode: () => Eac3AtmosMeteringMode,
  Eac3AtmosStereoDownmix: () => Eac3AtmosStereoDownmix,
  Eac3AtmosSurroundExMode: () => Eac3AtmosSurroundExMode,
  Eac3AttenuationControl: () => Eac3AttenuationControl,
  Eac3BitstreamMode: () => Eac3BitstreamMode,
  Eac3CodingMode: () => Eac3CodingMode,
  Eac3DcFilter: () => Eac3DcFilter,
  Eac3DynamicRangeCompressionLine: () => Eac3DynamicRangeCompressionLine,
  Eac3DynamicRangeCompressionRf: () => Eac3DynamicRangeCompressionRf,
  Eac3LfeControl: () => Eac3LfeControl,
  Eac3LfeFilter: () => Eac3LfeFilter,
  Eac3MetadataControl: () => Eac3MetadataControl,
  Eac3PassthroughControl: () => Eac3PassthroughControl,
  Eac3PhaseControl: () => Eac3PhaseControl,
  Eac3StereoDownmix: () => Eac3StereoDownmix,
  Eac3SurroundExMode: () => Eac3SurroundExMode,
  Eac3SurroundMode: () => Eac3SurroundMode,
  EmbeddedConvert608To708: () => EmbeddedConvert608To708,
  EmbeddedTerminateCaptions: () => EmbeddedTerminateCaptions,
  EmbeddedTimecodeOverride: () => EmbeddedTimecodeOverride,
  F4vMoovPlacement: () => F4vMoovPlacement,
  FileSourceConvert608To708: () => FileSourceConvert608To708,
  FileSourceTimeDeltaUnits: () => FileSourceTimeDeltaUnits,
  FontScript: () => FontScript,
  ForbiddenException: () => ForbiddenException,
  Format: () => Format,
  FrameMetricType: () => FrameMetricType,
  GetJobCommand: () => GetJobCommand,
  GetJobTemplateCommand: () => GetJobTemplateCommand,
  GetPolicyCommand: () => GetPolicyCommand,
  GetPresetCommand: () => GetPresetCommand,
  GetQueueCommand: () => GetQueueCommand,
  GifFramerateControl: () => GifFramerateControl,
  GifFramerateConversionAlgorithm: () => GifFramerateConversionAlgorithm,
  H264AdaptiveQuantization: () => H264AdaptiveQuantization,
  H264CodecLevel: () => H264CodecLevel,
  H264CodecProfile: () => H264CodecProfile,
  H264DynamicSubGop: () => H264DynamicSubGop,
  H264EndOfStreamMarkers: () => H264EndOfStreamMarkers,
  H264EntropyEncoding: () => H264EntropyEncoding,
  H264FieldEncoding: () => H264FieldEncoding,
  H264FlickerAdaptiveQuantization: () => H264FlickerAdaptiveQuantization,
  H264FramerateControl: () => H264FramerateControl,
  H264FramerateConversionAlgorithm: () => H264FramerateConversionAlgorithm,
  H264GopBReference: () => H264GopBReference,
  H264GopSizeUnits: () => H264GopSizeUnits,
  H264InterlaceMode: () => H264InterlaceMode,
  H264ParControl: () => H264ParControl,
  H264QualityTuningLevel: () => H264QualityTuningLevel,
  H264RateControlMode: () => H264RateControlMode,
  H264RepeatPps: () => H264RepeatPps,
  H264SaliencyAwareEncoding: () => H264SaliencyAwareEncoding,
  H264ScanTypeConversionMode: () => H264ScanTypeConversionMode,
  H264SceneChangeDetect: () => H264SceneChangeDetect,
  H264SlowPal: () => H264SlowPal,
  H264SpatialAdaptiveQuantization: () => H264SpatialAdaptiveQuantization,
  H264Syntax: () => H264Syntax,
  H264Telecine: () => H264Telecine,
  H264TemporalAdaptiveQuantization: () => H264TemporalAdaptiveQuantization,
  H264UnregisteredSeiTimecode: () => H264UnregisteredSeiTimecode,
  H264WriteMp4PackagingType: () => H264WriteMp4PackagingType,
  H265AdaptiveQuantization: () => H265AdaptiveQuantization,
  H265AlternateTransferFunctionSei: () => H265AlternateTransferFunctionSei,
  H265CodecLevel: () => H265CodecLevel,
  H265CodecProfile: () => H265CodecProfile,
  H265Deblocking: () => H265Deblocking,
  H265DynamicSubGop: () => H265DynamicSubGop,
  H265EndOfStreamMarkers: () => H265EndOfStreamMarkers,
  H265FlickerAdaptiveQuantization: () => H265FlickerAdaptiveQuantization,
  H265FramerateControl: () => H265FramerateControl,
  H265FramerateConversionAlgorithm: () => H265FramerateConversionAlgorithm,
  H265GopBReference: () => H265GopBReference,
  H265GopSizeUnits: () => H265GopSizeUnits,
  H265InterlaceMode: () => H265InterlaceMode,
  H265ParControl: () => H265ParControl,
  H265QualityTuningLevel: () => H265QualityTuningLevel,
  H265RateControlMode: () => H265RateControlMode,
  H265SampleAdaptiveOffsetFilterMode: () => H265SampleAdaptiveOffsetFilterMode,
  H265ScanTypeConversionMode: () => H265ScanTypeConversionMode,
  H265SceneChangeDetect: () => H265SceneChangeDetect,
  H265SlowPal: () => H265SlowPal,
  H265SpatialAdaptiveQuantization: () => H265SpatialAdaptiveQuantization,
  H265Telecine: () => H265Telecine,
  H265TemporalAdaptiveQuantization: () => H265TemporalAdaptiveQuantization,
  H265TemporalIds: () => H265TemporalIds,
  H265Tiles: () => H265Tiles,
  H265UnregisteredSeiTimecode: () => H265UnregisteredSeiTimecode,
  H265WriteMp4PackagingType: () => H265WriteMp4PackagingType,
  HDRToSDRToneMapper: () => HDRToSDRToneMapper,
  HlsAdMarkers: () => HlsAdMarkers,
  HlsAudioOnlyContainer: () => HlsAudioOnlyContainer,
  HlsAudioOnlyHeader: () => HlsAudioOnlyHeader,
  HlsAudioTrackType: () => HlsAudioTrackType,
  HlsCaptionLanguageSetting: () => HlsCaptionLanguageSetting,
  HlsCaptionSegmentLengthControl: () => HlsCaptionSegmentLengthControl,
  HlsClientCache: () => HlsClientCache,
  HlsCodecSpecification: () => HlsCodecSpecification,
  HlsDescriptiveVideoServiceFlag: () => HlsDescriptiveVideoServiceFlag,
  HlsDirectoryStructure: () => HlsDirectoryStructure,
  HlsEncryptionType: () => HlsEncryptionType,
  HlsIFrameOnlyManifest: () => HlsIFrameOnlyManifest,
  HlsImageBasedTrickPlay: () => HlsImageBasedTrickPlay,
  HlsInitializationVectorInManifest: () => HlsInitializationVectorInManifest,
  HlsIntervalCadence: () => HlsIntervalCadence,
  HlsKeyProviderType: () => HlsKeyProviderType,
  HlsManifestCompression: () => HlsManifestCompression,
  HlsManifestDurationFormat: () => HlsManifestDurationFormat,
  HlsOfflineEncrypted: () => HlsOfflineEncrypted,
  HlsOutputSelection: () => HlsOutputSelection,
  HlsProgramDateTime: () => HlsProgramDateTime,
  HlsProgressiveWriteHlsManifest: () => HlsProgressiveWriteHlsManifest,
  HlsSegmentControl: () => HlsSegmentControl,
  HlsSegmentLengthControl: () => HlsSegmentLengthControl,
  HlsStreamInfResolution: () => HlsStreamInfResolution,
  HlsTargetDurationCompatibilityMode: () => HlsTargetDurationCompatibilityMode,
  HlsTimedMetadataId3Frame: () => HlsTimedMetadataId3Frame,
  ImscAccessibilitySubs: () => ImscAccessibilitySubs,
  ImscStylePassthrough: () => ImscStylePassthrough,
  InputDeblockFilter: () => InputDeblockFilter,
  InputDenoiseFilter: () => InputDenoiseFilter,
  InputFilterEnable: () => InputFilterEnable,
  InputPolicy: () => InputPolicy,
  InputPsiControl: () => InputPsiControl,
  InputRotate: () => InputRotate,
  InputSampleRange: () => InputSampleRange,
  InputScanType: () => InputScanType,
  InputTimecodeSource: () => InputTimecodeSource,
  InternalServerErrorException: () => InternalServerErrorException,
  JobPhase: () => JobPhase,
  JobStatus: () => JobStatus,
  JobTemplateListBy: () => JobTemplateListBy,
  LanguageCode: () => LanguageCode,
  ListJobTemplatesCommand: () => ListJobTemplatesCommand,
  ListJobsCommand: () => ListJobsCommand,
  ListPresetsCommand: () => ListPresetsCommand,
  ListQueuesCommand: () => ListQueuesCommand,
  ListTagsForResourceCommand: () => ListTagsForResourceCommand,
  ListVersionsCommand: () => ListVersionsCommand,
  M2tsAudioBufferModel: () => M2tsAudioBufferModel,
  M2tsAudioDuration: () => M2tsAudioDuration,
  M2tsBufferModel: () => M2tsBufferModel,
  M2tsDataPtsControl: () => M2tsDataPtsControl,
  M2tsEbpAudioInterval: () => M2tsEbpAudioInterval,
  M2tsEbpPlacement: () => M2tsEbpPlacement,
  M2tsEsRateInPes: () => M2tsEsRateInPes,
  M2tsForceTsVideoEbpOrder: () => M2tsForceTsVideoEbpOrder,
  M2tsKlvMetadata: () => M2tsKlvMetadata,
  M2tsNielsenId3: () => M2tsNielsenId3,
  M2tsPcrControl: () => M2tsPcrControl,
  M2tsPreventBufferUnderflow: () => M2tsPreventBufferUnderflow,
  M2tsRateMode: () => M2tsRateMode,
  M2tsScte35Source: () => M2tsScte35Source,
  M2tsSegmentationMarkers: () => M2tsSegmentationMarkers,
  M2tsSegmentationStyle: () => M2tsSegmentationStyle,
  M3u8AudioDuration: () => M3u8AudioDuration,
  M3u8DataPtsControl: () => M3u8DataPtsControl,
  M3u8NielsenId3: () => M3u8NielsenId3,
  M3u8PcrControl: () => M3u8PcrControl,
  M3u8Scte35Source: () => M3u8Scte35Source,
  MatrixCoefficients: () => MatrixCoefficients,
  MediaConvert: () => MediaConvert,
  MediaConvertClient: () => MediaConvertClient,
  MediaConvertServiceException: () => MediaConvertServiceException,
  MotionImageInsertionMode: () => MotionImageInsertionMode,
  MotionImagePlayback: () => MotionImagePlayback,
  MovClapAtom: () => MovClapAtom,
  MovCslgAtom: () => MovCslgAtom,
  MovMpeg2FourCCControl: () => MovMpeg2FourCCControl,
  MovPaddingControl: () => MovPaddingControl,
  MovReference: () => MovReference,
  Mp3RateControlMode: () => Mp3RateControlMode,
  Mp4CslgAtom: () => Mp4CslgAtom,
  Mp4FreeSpaceBox: () => Mp4FreeSpaceBox,
  Mp4MoovPlacement: () => Mp4MoovPlacement,
  MpdAccessibilityCaptionHints: () => MpdAccessibilityCaptionHints,
  MpdAudioDuration: () => MpdAudioDuration,
  MpdCaptionContainerType: () => MpdCaptionContainerType,
  MpdKlvMetadata: () => MpdKlvMetadata,
  MpdManifestMetadataSignaling: () => MpdManifestMetadataSignaling,
  MpdScte35Esam: () => MpdScte35Esam,
  MpdScte35Source: () => MpdScte35Source,
  MpdTimedMetadata: () => MpdTimedMetadata,
  MpdTimedMetadataBoxVersion: () => MpdTimedMetadataBoxVersion,
  Mpeg2AdaptiveQuantization: () => Mpeg2AdaptiveQuantization,
  Mpeg2CodecLevel: () => Mpeg2CodecLevel,
  Mpeg2CodecProfile: () => Mpeg2CodecProfile,
  Mpeg2DynamicSubGop: () => Mpeg2DynamicSubGop,
  Mpeg2FramerateControl: () => Mpeg2FramerateControl,
  Mpeg2FramerateConversionAlgorithm: () => Mpeg2FramerateConversionAlgorithm,
  Mpeg2GopSizeUnits: () => Mpeg2GopSizeUnits,
  Mpeg2InterlaceMode: () => Mpeg2InterlaceMode,
  Mpeg2IntraDcPrecision: () => Mpeg2IntraDcPrecision,
  Mpeg2ParControl: () => Mpeg2ParControl,
  Mpeg2QualityTuningLevel: () => Mpeg2QualityTuningLevel,
  Mpeg2RateControlMode: () => Mpeg2RateControlMode,
  Mpeg2ScanTypeConversionMode: () => Mpeg2ScanTypeConversionMode,
  Mpeg2SceneChangeDetect: () => Mpeg2SceneChangeDetect,
  Mpeg2SlowPal: () => Mpeg2SlowPal,
  Mpeg2SpatialAdaptiveQuantization: () => Mpeg2SpatialAdaptiveQuantization,
  Mpeg2Syntax: () => Mpeg2Syntax,
  Mpeg2Telecine: () => Mpeg2Telecine,
  Mpeg2TemporalAdaptiveQuantization: () => Mpeg2TemporalAdaptiveQuantization,
  MsSmoothAudioDeduplication: () => MsSmoothAudioDeduplication,
  MsSmoothFragmentLengthControl: () => MsSmoothFragmentLengthControl,
  MsSmoothManifestEncoding: () => MsSmoothManifestEncoding,
  MxfAfdSignaling: () => MxfAfdSignaling,
  MxfProfile: () => MxfProfile,
  MxfXavcDurationMode: () => MxfXavcDurationMode,
  NielsenActiveWatermarkProcessType: () => NielsenActiveWatermarkProcessType,
  NielsenSourceWatermarkStatusType: () => NielsenSourceWatermarkStatusType,
  NielsenUniqueTicPerAudioTrackType: () => NielsenUniqueTicPerAudioTrackType,
  NoiseFilterPostTemporalSharpening: () => NoiseFilterPostTemporalSharpening,
  NoiseFilterPostTemporalSharpeningStrength: () => NoiseFilterPostTemporalSharpeningStrength,
  NoiseReducerFilter: () => NoiseReducerFilter,
  NotFoundException: () => NotFoundException,
  Order: () => Order,
  OutputGroupType: () => OutputGroupType,
  OutputSdt: () => OutputSdt,
  PadVideo: () => PadVideo,
  PresetListBy: () => PresetListBy,
  PresetSpeke20Audio: () => PresetSpeke20Audio,
  PresetSpeke20Video: () => PresetSpeke20Video,
  PricingPlan: () => PricingPlan,
  ProbeCommand: () => ProbeCommand,
  ProresChromaSampling: () => ProresChromaSampling,
  ProresCodecProfile: () => ProresCodecProfile,
  ProresFramerateControl: () => ProresFramerateControl,
  ProresFramerateConversionAlgorithm: () => ProresFramerateConversionAlgorithm,
  ProresInterlaceMode: () => ProresInterlaceMode,
  ProresParControl: () => ProresParControl,
  ProresScanTypeConversionMode: () => ProresScanTypeConversionMode,
  ProresSlowPal: () => ProresSlowPal,
  ProresTelecine: () => ProresTelecine,
  PutPolicyCommand: () => PutPolicyCommand,
  QueueListBy: () => QueueListBy,
  QueueStatus: () => QueueStatus,
  RemoveRubyReserveAttributes: () => RemoveRubyReserveAttributes,
  RenewalType: () => RenewalType,
  RequiredFlag: () => RequiredFlag,
  ReservationPlanStatus: () => ReservationPlanStatus,
  RespondToAfd: () => RespondToAfd,
  RuleType: () => RuleType,
  S3ObjectCannedAcl: () => S3ObjectCannedAcl,
  S3ServerSideEncryptionType: () => S3ServerSideEncryptionType,
  S3StorageClass: () => S3StorageClass,
  SampleRangeConversion: () => SampleRangeConversion,
  ScalingBehavior: () => ScalingBehavior,
  SccDestinationFramerate: () => SccDestinationFramerate,
  SearchJobsCommand: () => SearchJobsCommand,
  SimulateReservedQueue: () => SimulateReservedQueue,
  SrtStylePassthrough: () => SrtStylePassthrough,
  StatusUpdateInterval: () => StatusUpdateInterval,
  TagResourceCommand: () => TagResourceCommand,
  TeletextPageType: () => TeletextPageType,
  TimecodeBurninPosition: () => TimecodeBurninPosition,
  TimecodeSource: () => TimecodeSource,
  TimecodeTrack: () => TimecodeTrack,
  TimedMetadata: () => TimedMetadata,
  TooManyRequestsException: () => TooManyRequestsException,
  TrackType: () => TrackType,
  TransferCharacteristics: () => TransferCharacteristics,
  TsPtsOffset: () => TsPtsOffset,
  TtmlStylePassthrough: () => TtmlStylePassthrough,
  Type: () => Type,
  UncompressedFourcc: () => UncompressedFourcc,
  UncompressedFramerateControl: () => UncompressedFramerateControl,
  UncompressedFramerateConversionAlgorithm: () => UncompressedFramerateConversionAlgorithm,
  UncompressedInterlaceMode: () => UncompressedInterlaceMode,
  UncompressedScanTypeConversionMode: () => UncompressedScanTypeConversionMode,
  UncompressedSlowPal: () => UncompressedSlowPal,
  UncompressedTelecine: () => UncompressedTelecine,
  UntagResourceCommand: () => UntagResourceCommand,
  UpdateJobTemplateCommand: () => UpdateJobTemplateCommand,
  UpdatePresetCommand: () => UpdatePresetCommand,
  UpdateQueueCommand: () => UpdateQueueCommand,
  Vc3Class: () => Vc3Class,
  Vc3FramerateControl: () => Vc3FramerateControl,
  Vc3FramerateConversionAlgorithm: () => Vc3FramerateConversionAlgorithm,
  Vc3InterlaceMode: () => Vc3InterlaceMode,
  Vc3ScanTypeConversionMode: () => Vc3ScanTypeConversionMode,
  Vc3SlowPal: () => Vc3SlowPal,
  Vc3Telecine: () => Vc3Telecine,
  VchipAction: () => VchipAction,
  VideoCodec: () => VideoCodec,
  VideoOverlayPlayBackMode: () => VideoOverlayPlayBackMode,
  VideoOverlayUnit: () => VideoOverlayUnit,
  VideoTimecodeInsertion: () => VideoTimecodeInsertion,
  Vp8FramerateControl: () => Vp8FramerateControl,
  Vp8FramerateConversionAlgorithm: () => Vp8FramerateConversionAlgorithm,
  Vp8ParControl: () => Vp8ParControl,
  Vp8QualityTuningLevel: () => Vp8QualityTuningLevel,
  Vp8RateControlMode: () => Vp8RateControlMode,
  Vp9FramerateControl: () => Vp9FramerateControl,
  Vp9FramerateConversionAlgorithm: () => Vp9FramerateConversionAlgorithm,
  Vp9ParControl: () => Vp9ParControl,
  Vp9QualityTuningLevel: () => Vp9QualityTuningLevel,
  Vp9RateControlMode: () => Vp9RateControlMode,
  WatermarkingStrength: () => WatermarkingStrength,
  WavFormat: () => WavFormat,
  WebvttAccessibilitySubs: () => WebvttAccessibilitySubs,
  WebvttStylePassthrough: () => WebvttStylePassthrough,
  Xavc4kIntraCbgProfileClass: () => Xavc4kIntraCbgProfileClass,
  Xavc4kIntraVbrProfileClass: () => Xavc4kIntraVbrProfileClass,
  Xavc4kProfileBitrateClass: () => Xavc4kProfileBitrateClass,
  Xavc4kProfileCodecProfile: () => Xavc4kProfileCodecProfile,
  Xavc4kProfileQualityTuningLevel: () => Xavc4kProfileQualityTuningLevel,
  XavcAdaptiveQuantization: () => XavcAdaptiveQuantization,
  XavcEntropyEncoding: () => XavcEntropyEncoding,
  XavcFlickerAdaptiveQuantization: () => XavcFlickerAdaptiveQuantization,
  XavcFramerateControl: () => XavcFramerateControl,
  XavcFramerateConversionAlgorithm: () => XavcFramerateConversionAlgorithm,
  XavcGopBReference: () => XavcGopBReference,
  XavcHdIntraCbgProfileClass: () => XavcHdIntraCbgProfileClass,
  XavcHdProfileBitrateClass: () => XavcHdProfileBitrateClass,
  XavcHdProfileQualityTuningLevel: () => XavcHdProfileQualityTuningLevel,
  XavcHdProfileTelecine: () => XavcHdProfileTelecine,
  XavcInterlaceMode: () => XavcInterlaceMode,
  XavcProfile: () => XavcProfile,
  XavcSlowPal: () => XavcSlowPal,
  XavcSpatialAdaptiveQuantization: () => XavcSpatialAdaptiveQuantization,
  XavcTemporalAdaptiveQuantization: () => XavcTemporalAdaptiveQuantization,
  __Client: () => import_smithy_client.Client,
  paginateDescribeEndpoints: () => paginateDescribeEndpoints,
  paginateListJobTemplates: () => paginateListJobTemplates,
  paginateListJobs: () => paginateListJobs,
  paginateListPresets: () => paginateListPresets,
  paginateListQueues: () => paginateListQueues,
  paginateListVersions: () => paginateListVersions,
  paginateSearchJobs: () => paginateSearchJobs
});
module.exports = __toCommonJS(index_exports);

// src/MediaConvertClient.ts
var import_middleware_host_header = require("@aws-sdk/middleware-host-header");
var import_middleware_logger = require("@aws-sdk/middleware-logger");
var import_middleware_recursion_detection = require("@aws-sdk/middleware-recursion-detection");
var import_middleware_user_agent = require("@aws-sdk/middleware-user-agent");
var import_config_resolver = require("@smithy/config-resolver");
var import_core = require("@smithy/core");
var import_middleware_content_length = require("@smithy/middleware-content-length");
var import_middleware_endpoint = require("@smithy/middleware-endpoint");
var import_middleware_retry = require("@smithy/middleware-retry");

var import_httpAuthSchemeProvider = require("./auth/httpAuthSchemeProvider");

// src/endpoint/EndpointParameters.ts
var resolveClientEndpointParameters = /* @__PURE__ */ __name((options) => {
  return Object.assign(options, {
    useDualstackEndpoint: options.useDualstackEndpoint ?? false,
    useFipsEndpoint: options.useFipsEndpoint ?? false,
    defaultSigningName: "mediaconvert"
  });
}, "resolveClientEndpointParameters");
var commonParams = {
  UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
  Endpoint: { type: "builtInParams", name: "endpoint" },
  Region: { type: "builtInParams", name: "region" },
  UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
};

// src/MediaConvertClient.ts
var import_runtimeConfig = require("././runtimeConfig");

// src/runtimeExtensions.ts
var import_region_config_resolver = require("@aws-sdk/region-config-resolver");
var import_protocol_http = require("@smithy/protocol-http");
var import_smithy_client = require("@smithy/smithy-client");

// src/auth/httpAuthExtensionConfiguration.ts
var getHttpAuthExtensionConfiguration = /* @__PURE__ */ __name((runtimeConfig) => {
  const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
  let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
  let _credentials = runtimeConfig.credentials;
  return {
    setHttpAuthScheme(httpAuthScheme) {
      const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
      if (index === -1) {
        _httpAuthSchemes.push(httpAuthScheme);
      } else {
        _httpAuthSchemes.splice(index, 1, httpAuthScheme);
      }
    },
    httpAuthSchemes() {
      return _httpAuthSchemes;
    },
    setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
      _httpAuthSchemeProvider = httpAuthSchemeProvider;
    },
    httpAuthSchemeProvider() {
      return _httpAuthSchemeProvider;
    },
    setCredentials(credentials) {
      _credentials = credentials;
    },
    credentials() {
      return _credentials;
    }
  };
}, "getHttpAuthExtensionConfiguration");
var resolveHttpAuthRuntimeConfig = /* @__PURE__ */ __name((config) => {
  return {
    httpAuthSchemes: config.httpAuthSchemes(),
    httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
    credentials: config.credentials()
  };
}, "resolveHttpAuthRuntimeConfig");

// src/runtimeExtensions.ts
var resolveRuntimeExtensions = /* @__PURE__ */ __name((runtimeConfig, extensions) => {
  const extensionConfiguration = Object.assign(
    (0, import_region_config_resolver.getAwsRegionExtensionConfiguration)(runtimeConfig),
    (0, import_smithy_client.getDefaultExtensionConfiguration)(runtimeConfig),
    (0, import_protocol_http.getHttpHandlerExtensionConfiguration)(runtimeConfig),
    getHttpAuthExtensionConfiguration(runtimeConfig)
  );
  extensions.forEach((extension) => extension.configure(extensionConfiguration));
  return Object.assign(
    runtimeConfig,
    (0, import_region_config_resolver.resolveAwsRegionExtensionConfiguration)(extensionConfiguration),
    (0, import_smithy_client.resolveDefaultRuntimeConfig)(extensionConfiguration),
    (0, import_protocol_http.resolveHttpHandlerRuntimeConfig)(extensionConfiguration),
    resolveHttpAuthRuntimeConfig(extensionConfiguration)
  );
}, "resolveRuntimeExtensions");

// src/MediaConvertClient.ts
var MediaConvertClient = class extends import_smithy_client.Client {
  static {
    __name(this, "MediaConvertClient");
  }
  /**
   * The resolved configuration of MediaConvertClient class. This is resolved and normalized from the {@link MediaConvertClientConfig | constructor configuration interface}.
   */
  config;
  constructor(...[configuration]) {
    const _config_0 = (0, import_runtimeConfig.getRuntimeConfig)(configuration || {});
    super(_config_0);
    this.initConfig = _config_0;
    const _config_1 = resolveClientEndpointParameters(_config_0);
    const _config_2 = (0, import_middleware_user_agent.resolveUserAgentConfig)(_config_1);
    const _config_3 = (0, import_middleware_retry.resolveRetryConfig)(_config_2);
    const _config_4 = (0, import_config_resolver.resolveRegionConfig)(_config_3);
    const _config_5 = (0, import_middleware_host_header.resolveHostHeaderConfig)(_config_4);
    const _config_6 = (0, import_middleware_endpoint.resolveEndpointConfig)(_config_5);
    const _config_7 = (0, import_httpAuthSchemeProvider.resolveHttpAuthSchemeConfig)(_config_6);
    const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
    this.config = _config_8;
    this.middlewareStack.use((0, import_middleware_user_agent.getUserAgentPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_retry.getRetryPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_content_length.getContentLengthPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_host_header.getHostHeaderPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_logger.getLoggerPlugin)(this.config));
    this.middlewareStack.use((0, import_middleware_recursion_detection.getRecursionDetectionPlugin)(this.config));
    this.middlewareStack.use(
      (0, import_core.getHttpAuthSchemeEndpointRuleSetPlugin)(this.config, {
        httpAuthSchemeParametersProvider: import_httpAuthSchemeProvider.defaultMediaConvertHttpAuthSchemeParametersProvider,
        identityProviderConfigProvider: /* @__PURE__ */ __name(async (config) => new import_core.DefaultIdentityProviderConfig({
          "aws.auth#sigv4": config.credentials
        }), "identityProviderConfigProvider")
      })
    );
    this.middlewareStack.use((0, import_core.getHttpSigningPlugin)(this.config));
  }
  /**
   * Destroy underlying resources, like sockets. It's usually not necessary to do this.
   * However in Node.js, it's best to explicitly shut down the client's agent when it is no longer needed.
   * Otherwise, sockets might stay open for quite a long time before the server terminates them.
   */
  destroy() {
    super.destroy();
  }
};

// src/MediaConvert.ts


// src/commands/AssociateCertificateCommand.ts

var import_middleware_serde = require("@smithy/middleware-serde");


// src/protocols/Aws_restJson1.ts
var import_core2 = require("@aws-sdk/core");


var import_uuid = require("uuid");

// src/models/MediaConvertServiceException.ts

var MediaConvertServiceException = class _MediaConvertServiceException extends import_smithy_client.ServiceException {
  static {
    __name(this, "MediaConvertServiceException");
  }
  /**
   * @internal
   */
  constructor(options) {
    super(options);
    Object.setPrototypeOf(this, _MediaConvertServiceException.prototype);
  }
};

// src/models/models_2.ts
var Type = {
  CUSTOM: "CUSTOM",
  SYSTEM: "SYSTEM"
};
var Format = {
  matroska: "matroska",
  mp4: "mp4",
  quicktime: "quicktime",
  webm: "webm"
};
var Codec = {
  AAC: "AAC",
  AC3: "AC3",
  AV1: "AV1",
  AVC: "AVC",
  C608: "C608",
  C708: "C708",
  EAC3: "EAC3",
  FLAC: "FLAC",
  HEVC: "HEVC",
  MJPEG: "MJPEG",
  MP3: "MP3",
  MP4V: "MP4V",
  MPEG2: "MPEG2",
  OPUS: "OPUS",
  PCM: "PCM",
  PRORES: "PRORES",
  THEORA: "THEORA",
  UNKNOWN: "UNKNOWN",
  VORBIS: "VORBIS",
  VP8: "VP8",
  VP9: "VP9",
  WEBVTT: "WEBVTT"
};
var TrackType = {
  audio: "audio",
  data: "data",
  video: "video"
};
var ColorPrimaries = {
  EBU_3213_E: "EBU_3213_E",
  GENERIC_FILM: "GENERIC_FILM",
  IPT: "IPT",
  ITU_2020: "ITU_2020",
  ITU_470BG: "ITU_470BG",
  ITU_470M: "ITU_470M",
  ITU_709: "ITU_709",
  LAST: "LAST",
  RESERVED: "RESERVED",
  SMPTE_170M: "SMPTE_170M",
  SMPTE_2067XYZ: "SMPTE_2067XYZ",
  SMPTE_240M: "SMPTE_240M",
  SMPTE_428_1: "SMPTE_428_1",
  SMPTE_431_2: "SMPTE_431_2",
  SMPTE_EG_432_1: "SMPTE_EG_432_1",
  UNSPECIFIED: "UNSPECIFIED"
};
var MatrixCoefficients = {
  CD_CL: "CD_CL",
  CD_NCL: "CD_NCL",
  EBU3213: "EBU3213",
  FCC: "FCC",
  IPT: "IPT",
  ITU_2020_CL: "ITU_2020_CL",
  ITU_2020_NCL: "ITU_2020_NCL",
  ITU_2100ICtCp: "ITU_2100ICtCp",
  ITU_470BG: "ITU_470BG",
  ITU_709: "ITU_709",
  LAST: "LAST",
  RESERVED: "RESERVED",
  RGB: "RGB",
  SMPTE_170M: "SMPTE_170M",
  SMPTE_2085: "SMPTE_2085",
  SMPTE_240M: "SMPTE_240M",
  UNSPECIFIED: "UNSPECIFIED",
  YCgCo: "YCgCo"
};
var TransferCharacteristics = {
  ARIB_B67: "ARIB_B67",
  IEC_61966_2_1: "IEC_61966_2_1",
  IEC_61966_2_4: "IEC_61966_2_4",
  ITU_1361: "ITU_1361",
  ITU_2020_10bit: "ITU_2020_10bit",
  ITU_2020_12bit: "ITU_2020_12bit",
  ITU_470BG: "ITU_470BG",
  ITU_470M: "ITU_470M",
  ITU_709: "ITU_709",
  LAST: "LAST",
  LINEAR: "LINEAR",
  LOC10_2_5: "LOC10_2_5",
  LOG10_2: "LOG10_2",
  RESERVED: "RESERVED",
  SMPTE_170M: "SMPTE_170M",
  SMPTE_2084: "SMPTE_2084",
  SMPTE_240M: "SMPTE_240M",
  SMPTE_428_1: "SMPTE_428_1",
  UNSPECIFIED: "UNSPECIFIED"
};
var PricingPlan = {
  ON_DEMAND: "ON_DEMAND",
  RESERVED: "RESERVED"
};
var Commitment = {
  ONE_YEAR: "ONE_YEAR"
};
var RenewalType = {
  AUTO_RENEW: "AUTO_RENEW",
  EXPIRE: "EXPIRE"
};
var ReservationPlanStatus = {
  ACTIVE: "ACTIVE",
  EXPIRED: "EXPIRED"
};
var QueueStatus = {
  ACTIVE: "ACTIVE",
  PAUSED: "PAUSED"
};
var BadRequestException = class _BadRequestException extends MediaConvertServiceException {
  static {
    __name(this, "BadRequestException");
  }
  name = "BadRequestException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "BadRequestException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _BadRequestException.prototype);
    this.Message = opts.Message;
  }
};
var ConflictException = class _ConflictException extends MediaConvertServiceException {
  static {
    __name(this, "ConflictException");
  }
  name = "ConflictException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ConflictException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ConflictException.prototype);
    this.Message = opts.Message;
  }
};
var ForbiddenException = class _ForbiddenException extends MediaConvertServiceException {
  static {
    __name(this, "ForbiddenException");
  }
  name = "ForbiddenException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "ForbiddenException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _ForbiddenException.prototype);
    this.Message = opts.Message;
  }
};
var InternalServerErrorException = class _InternalServerErrorException extends MediaConvertServiceException {
  static {
    __name(this, "InternalServerErrorException");
  }
  name = "InternalServerErrorException";
  $fault = "server";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "InternalServerErrorException",
      $fault: "server",
      ...opts
    });
    Object.setPrototypeOf(this, _InternalServerErrorException.prototype);
    this.Message = opts.Message;
  }
};
var NotFoundException = class _NotFoundException extends MediaConvertServiceException {
  static {
    __name(this, "NotFoundException");
  }
  name = "NotFoundException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "NotFoundException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _NotFoundException.prototype);
    this.Message = opts.Message;
  }
};
var TooManyRequestsException = class _TooManyRequestsException extends MediaConvertServiceException {
  static {
    __name(this, "TooManyRequestsException");
  }
  name = "TooManyRequestsException";
  $fault = "client";
  Message;
  /**
   * @internal
   */
  constructor(opts) {
    super({
      name: "TooManyRequestsException",
      $fault: "client",
      ...opts
    });
    Object.setPrototypeOf(this, _TooManyRequestsException.prototype);
    this.Message = opts.Message;
  }
};
var DescribeEndpointsMode = {
  DEFAULT: "DEFAULT",
  GET_ONLY: "GET_ONLY"
};
var InputPolicy = {
  ALLOWED: "ALLOWED",
  DISALLOWED: "DISALLOWED"
};
var JobTemplateListBy = {
  CREATION_DATE: "CREATION_DATE",
  NAME: "NAME",
  SYSTEM: "SYSTEM"
};
var Order = {
  ASCENDING: "ASCENDING",
  DESCENDING: "DESCENDING"
};
var PresetListBy = {
  CREATION_DATE: "CREATION_DATE",
  NAME: "NAME",
  SYSTEM: "SYSTEM"
};
var QueueListBy = {
  CREATION_DATE: "CREATION_DATE",
  NAME: "NAME"
};

// src/protocols/Aws_restJson1.ts
var se_AssociateCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/2017-08-29/certificates");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: [, , `Arn`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_AssociateCertificateCommand");
var se_CancelJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/jobs/{Id}");
  b.p("Id", () => input.Id, "{Id}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_CancelJobCommand");
var se_CreateJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/2017-08-29/jobs");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      accelerationSettings: [, (_) => se_AccelerationSettings(_, context), `AccelerationSettings`],
      billingTagsSource: [, , `BillingTagsSource`],
      clientRequestToken: [true, (_) => _ ?? (0, import_uuid.v4)(), `ClientRequestToken`],
      hopDestinations: [, (_) => se___listOfHopDestination(_, context), `HopDestinations`],
      jobEngineVersion: [, , `JobEngineVersion`],
      jobTemplate: [, , `JobTemplate`],
      priority: [, , `Priority`],
      queue: [, , `Queue`],
      role: [, , `Role`],
      settings: [, (_) => se_JobSettings(_, context), `Settings`],
      simulateReservedQueue: [, , `SimulateReservedQueue`],
      statusUpdateInterval: [, , `StatusUpdateInterval`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`],
      userMetadata: [, (_) => (0, import_smithy_client._json)(_), `UserMetadata`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateJobCommand");
var se_CreateJobTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/2017-08-29/jobTemplates");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      accelerationSettings: [, (_) => se_AccelerationSettings(_, context), `AccelerationSettings`],
      category: [, , `Category`],
      description: [, , `Description`],
      hopDestinations: [, (_) => se___listOfHopDestination(_, context), `HopDestinations`],
      name: [, , `Name`],
      priority: [, , `Priority`],
      queue: [, , `Queue`],
      settings: [, (_) => se_JobTemplateSettings(_, context), `Settings`],
      statusUpdateInterval: [, , `StatusUpdateInterval`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateJobTemplateCommand");
var se_CreatePresetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/2017-08-29/presets");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      category: [, , `Category`],
      description: [, , `Description`],
      name: [, , `Name`],
      settings: [, (_) => se_PresetSettings(_, context), `Settings`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreatePresetCommand");
var se_CreateQueueCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/2017-08-29/queues");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      concurrentJobs: [, , `ConcurrentJobs`],
      description: [, , `Description`],
      name: [, , `Name`],
      pricingPlan: [, , `PricingPlan`],
      reservationPlanSettings: [, (_) => se_ReservationPlanSettings(_, context), `ReservationPlanSettings`],
      status: [, , `Status`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_CreateQueueCommand");
var se_DeleteJobTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/jobTemplates/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteJobTemplateCommand");
var se_DeletePolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/policy");
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeletePolicyCommand");
var se_DeletePresetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/presets/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeletePresetCommand");
var se_DeleteQueueCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/queues/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DeleteQueueCommand");
var se_DescribeEndpointsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/2017-08-29/endpoints");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      maxResults: [, , `MaxResults`],
      mode: [, , `Mode`],
      nextToken: [, , `NextToken`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_DescribeEndpointsCommand");
var se_DisassociateCertificateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/certificates/{Arn}");
  b.p("Arn", () => input.Arn, "{Arn}", false);
  let body;
  b.m("DELETE").h(headers).b(body);
  return b.build();
}, "se_DisassociateCertificateCommand");
var se_GetJobCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/jobs/{Id}");
  b.p("Id", () => input.Id, "{Id}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetJobCommand");
var se_GetJobTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/jobTemplates/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetJobTemplateCommand");
var se_GetPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/policy");
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetPolicyCommand");
var se_GetPresetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/presets/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetPresetCommand");
var se_GetQueueCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/queues/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_GetQueueCommand");
var se_ListJobsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/jobs");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_o]: [, input[_O]],
    [_q]: [, input[_Q]],
    [_s]: [, input[_S]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListJobsCommand");
var se_ListJobTemplatesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/jobTemplates");
  const query = (0, import_smithy_client.map)({
    [_c]: [, input[_C]],
    [_lB]: [, input[_LB]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_o]: [, input[_O]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListJobTemplatesCommand");
var se_ListPresetsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/presets");
  const query = (0, import_smithy_client.map)({
    [_c]: [, input[_C]],
    [_lB]: [, input[_LB]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_o]: [, input[_O]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListPresetsCommand");
var se_ListQueuesCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/queues");
  const query = (0, import_smithy_client.map)({
    [_lB]: [, input[_LB]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_o]: [, input[_O]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListQueuesCommand");
var se_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/tags/{Arn}");
  b.p("Arn", () => input.Arn, "{Arn}", false);
  let body;
  b.m("GET").h(headers).b(body);
  return b.build();
}, "se_ListTagsForResourceCommand");
var se_ListVersionsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/versions");
  const query = (0, import_smithy_client.map)({
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_ListVersionsCommand");
var se_ProbeCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/2017-08-29/probe");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      inputFiles: [, (_) => se___listOfProbeInputFile(_, context), `InputFiles`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_ProbeCommand");
var se_PutPolicyCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/2017-08-29/policy");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      policy: [, (_) => se_Policy(_, context), `Policy`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_PutPolicyCommand");
var se_SearchJobsCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {};
  b.bp("/2017-08-29/search");
  const query = (0, import_smithy_client.map)({
    [_iF]: [, input[_IF]],
    [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
    [_nT]: [, input[_NT]],
    [_o]: [, input[_O]],
    [_q]: [, input[_Q]],
    [_s]: [, input[_S]]
  });
  let body;
  b.m("GET").h(headers).q(query).b(body);
  return b.build();
}, "se_SearchJobsCommand");
var se_TagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/2017-08-29/tags");
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      arn: [, , `Arn`],
      tags: [, (_) => (0, import_smithy_client._json)(_), `Tags`]
    })
  );
  b.m("POST").h(headers).b(body);
  return b.build();
}, "se_TagResourceCommand");
var se_UntagResourceCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/2017-08-29/tags/{Arn}");
  b.p("Arn", () => input.Arn, "{Arn}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      tagKeys: [, (_) => (0, import_smithy_client._json)(_), `TagKeys`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UntagResourceCommand");
var se_UpdateJobTemplateCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/2017-08-29/jobTemplates/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      accelerationSettings: [, (_) => se_AccelerationSettings(_, context), `AccelerationSettings`],
      category: [, , `Category`],
      description: [, , `Description`],
      hopDestinations: [, (_) => se___listOfHopDestination(_, context), `HopDestinations`],
      priority: [, , `Priority`],
      queue: [, , `Queue`],
      settings: [, (_) => se_JobTemplateSettings(_, context), `Settings`],
      statusUpdateInterval: [, , `StatusUpdateInterval`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateJobTemplateCommand");
var se_UpdatePresetCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/2017-08-29/presets/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      category: [, , `Category`],
      description: [, , `Description`],
      settings: [, (_) => se_PresetSettings(_, context), `Settings`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdatePresetCommand");
var se_UpdateQueueCommand = /* @__PURE__ */ __name(async (input, context) => {
  const b = (0, import_core.requestBuilder)(input, context);
  const headers = {
    "content-type": "application/json"
  };
  b.bp("/2017-08-29/queues/{Name}");
  b.p("Name", () => input.Name, "{Name}", false);
  let body;
  body = JSON.stringify(
    (0, import_smithy_client.take)(input, {
      concurrentJobs: [, , `ConcurrentJobs`],
      description: [, , `Description`],
      reservationPlanSettings: [, (_) => se_ReservationPlanSettings(_, context), `ReservationPlanSettings`],
      status: [, , `Status`]
    })
  );
  b.m("PUT").h(headers).b(body);
  return b.build();
}, "se_UpdateQueueCommand");
var de_AssociateCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_AssociateCertificateCommand");
var de_CancelJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_CancelJobCommand");
var de_CreateJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Job: [, (_) => de_Job(_, context), `job`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateJobCommand");
var de_CreateJobTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    JobTemplate: [, (_) => de_JobTemplate(_, context), `jobTemplate`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateJobTemplateCommand");
var de_CreatePresetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Preset: [, (_) => de_Preset(_, context), `preset`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreatePresetCommand");
var de_CreateQueueCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 201 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Queue: [, (_) => de_Queue(_, context), `queue`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_CreateQueueCommand");
var de_DeleteJobTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteJobTemplateCommand");
var de_DeletePolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeletePolicyCommand");
var de_DeletePresetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeletePresetCommand");
var de_DeleteQueueCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DeleteQueueCommand");
var de_DescribeEndpointsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Endpoints: [, (_) => de___listOfEndpoint(_, context), `endpoints`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_DescribeEndpointsCommand");
var de_DisassociateCertificateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 202 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_DisassociateCertificateCommand");
var de_GetJobCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Job: [, (_) => de_Job(_, context), `job`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetJobCommand");
var de_GetJobTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    JobTemplate: [, (_) => de_JobTemplate(_, context), `jobTemplate`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetJobTemplateCommand");
var de_GetPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Policy: [, (_) => de_Policy(_, context), `policy`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPolicyCommand");
var de_GetPresetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Preset: [, (_) => de_Preset(_, context), `preset`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetPresetCommand");
var de_GetQueueCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Queue: [, (_) => de_Queue(_, context), `queue`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_GetQueueCommand");
var de_ListJobsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Jobs: [, (_) => de___listOfJob(_, context), `jobs`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListJobsCommand");
var de_ListJobTemplatesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    JobTemplates: [, (_) => de___listOfJobTemplate(_, context), `jobTemplates`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListJobTemplatesCommand");
var de_ListPresetsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    Presets: [, (_) => de___listOfPreset(_, context), `presets`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListPresetsCommand");
var de_ListQueuesCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    Queues: [, (_) => de___listOfQueue(_, context), `queues`],
    TotalConcurrentJobs: [, import_smithy_client.expectInt32, `totalConcurrentJobs`],
    UnallocatedConcurrentJobs: [, import_smithy_client.expectInt32, `unallocatedConcurrentJobs`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListQueuesCommand");
var de_ListTagsForResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ResourceTags: [, (_) => de_ResourceTags(_, context), `resourceTags`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListTagsForResourceCommand");
var de_ListVersionsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    NextToken: [, import_smithy_client.expectString, `nextToken`],
    Versions: [, (_) => de___listOfJobEngineVersion(_, context), `versions`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ListVersionsCommand");
var de_ProbeCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    ProbeResults: [, (_) => de___listOfProbeResult(_, context), `probeResults`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_ProbeCommand");
var de_PutPolicyCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Policy: [, (_) => de_Policy(_, context), `policy`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_PutPolicyCommand");
var de_SearchJobsCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Jobs: [, (_) => de___listOfJob(_, context), `jobs`],
    NextToken: [, import_smithy_client.expectString, `nextToken`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_SearchJobsCommand");
var de_TagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_TagResourceCommand");
var de_UntagResourceCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  await (0, import_smithy_client.collectBody)(output.body, context);
  return contents;
}, "de_UntagResourceCommand");
var de_UpdateJobTemplateCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    JobTemplate: [, (_) => de_JobTemplate(_, context), `jobTemplate`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateJobTemplateCommand");
var de_UpdatePresetCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Preset: [, (_) => de_Preset(_, context), `preset`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdatePresetCommand");
var de_UpdateQueueCommand = /* @__PURE__ */ __name(async (output, context) => {
  if (output.statusCode !== 200 && output.statusCode >= 300) {
    return de_CommandError(output, context);
  }
  const contents = (0, import_smithy_client.map)({
    $metadata: deserializeMetadata(output)
  });
  const data = (0, import_smithy_client.expectNonNull)((0, import_smithy_client.expectObject)(await (0, import_core2.parseJsonBody)(output.body, context)), "body");
  const doc = (0, import_smithy_client.take)(data, {
    Queue: [, (_) => de_Queue(_, context), `queue`]
  });
  Object.assign(contents, doc);
  return contents;
}, "de_UpdateQueueCommand");
var de_CommandError = /* @__PURE__ */ __name(async (output, context) => {
  const parsedOutput = {
    ...output,
    body: await (0, import_core2.parseJsonErrorBody)(output.body, context)
  };
  const errorCode = (0, import_core2.loadRestJsonErrorCode)(output, parsedOutput.body);
  switch (errorCode) {
    case "BadRequestException":
    case "com.amazonaws.mediaconvert#BadRequestException":
      throw await de_BadRequestExceptionRes(parsedOutput, context);
    case "ConflictException":
    case "com.amazonaws.mediaconvert#ConflictException":
      throw await de_ConflictExceptionRes(parsedOutput, context);
    case "ForbiddenException":
    case "com.amazonaws.mediaconvert#ForbiddenException":
      throw await de_ForbiddenExceptionRes(parsedOutput, context);
    case "InternalServerErrorException":
    case "com.amazonaws.mediaconvert#InternalServerErrorException":
      throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
    case "NotFoundException":
    case "com.amazonaws.mediaconvert#NotFoundException":
      throw await de_NotFoundExceptionRes(parsedOutput, context);
    case "TooManyRequestsException":
    case "com.amazonaws.mediaconvert#TooManyRequestsException":
      throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
    default:
      const parsedBody = parsedOutput.body;
      return throwDefaultError({
        output,
        parsedBody,
        errorCode
      });
  }
}, "de_CommandError");
var throwDefaultError = (0, import_smithy_client.withBaseException)(MediaConvertServiceException);
var de_BadRequestExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new BadRequestException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_BadRequestExceptionRes");
var de_ConflictExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ConflictException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ConflictExceptionRes");
var de_ForbiddenExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new ForbiddenException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_ForbiddenExceptionRes");
var de_InternalServerErrorExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new InternalServerErrorException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_InternalServerErrorExceptionRes");
var de_NotFoundExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new NotFoundException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_NotFoundExceptionRes");
var de_TooManyRequestsExceptionRes = /* @__PURE__ */ __name(async (parsedOutput, context) => {
  const contents = (0, import_smithy_client.map)({});
  const data = parsedOutput.body;
  const doc = (0, import_smithy_client.take)(data, {
    Message: [, import_smithy_client.expectString, `message`]
  });
  Object.assign(contents, doc);
  const exception = new TooManyRequestsException({
    $metadata: deserializeMetadata(parsedOutput),
    ...contents
  });
  return (0, import_smithy_client.decorateServiceException)(exception, parsedOutput.body);
}, "de_TooManyRequestsExceptionRes");
var se___listOf__doubleMinNegative60Max6 = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.serializeFloat)(entry);
  });
}, "se___listOf__doubleMinNegative60Max6");
var se___listOfAllowedRenditionSize = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AllowedRenditionSize(entry, context);
  });
}, "se___listOfAllowedRenditionSize");
var se___listOfAudioDescription = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AudioDescription(entry, context);
  });
}, "se___listOfAudioDescription");
var se___listOfAutomatedAbrRule = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_AutomatedAbrRule(entry, context);
  });
}, "se___listOfAutomatedAbrRule");
var se___listOfCaptionDescription = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_CaptionDescription(entry, context);
  });
}, "se___listOfCaptionDescription");
var se___listOfCaptionDescriptionPreset = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_CaptionDescriptionPreset(entry, context);
  });
}, "se___listOfCaptionDescriptionPreset");
var se___listOfCmafAdditionalManifest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_CmafAdditionalManifest(entry, context);
  });
}, "se___listOfCmafAdditionalManifest");
var se___listOfColorConversion3DLUTSetting = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_ColorConversion3DLUTSetting(entry, context);
  });
}, "se___listOfColorConversion3DLUTSetting");
var se___listOfDashAdditionalManifest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_DashAdditionalManifest(entry, context);
  });
}, "se___listOfDashAdditionalManifest");
var se___listOfForceIncludeRenditionSize = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_ForceIncludeRenditionSize(entry, context);
  });
}, "se___listOfForceIncludeRenditionSize");
var se___listOfHlsAdditionalManifest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_HlsAdditionalManifest(entry, context);
  });
}, "se___listOfHlsAdditionalManifest");
var se___listOfHlsCaptionLanguageMapping = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_HlsCaptionLanguageMapping(entry, context);
  });
}, "se___listOfHlsCaptionLanguageMapping");
var se___listOfHopDestination = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_HopDestination(entry, context);
  });
}, "se___listOfHopDestination");
var se___listOfId3Insertion = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_Id3Insertion(entry, context);
  });
}, "se___listOfId3Insertion");
var se___listOfInput = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_Input(entry, context);
  });
}, "se___listOfInput");
var se___listOfInputClipping = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_InputClipping(entry, context);
  });
}, "se___listOfInputClipping");
var se___listOfInputTemplate = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_InputTemplate(entry, context);
  });
}, "se___listOfInputTemplate");
var se___listOfInsertableImage = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_InsertableImage(entry, context);
  });
}, "se___listOfInsertableImage");
var se___listOfMsSmoothAdditionalManifest = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_MsSmoothAdditionalManifest(entry, context);
  });
}, "se___listOfMsSmoothAdditionalManifest");
var se___listOfOutput = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_Output(entry, context);
  });
}, "se___listOfOutput");
var se___listOfOutputChannelMapping = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_OutputChannelMapping(entry, context);
  });
}, "se___listOfOutputChannelMapping");
var se___listOfOutputGroup = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_OutputGroup(entry, context);
  });
}, "se___listOfOutputGroup");
var se___listOfProbeInputFile = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_ProbeInputFile(entry, context);
  });
}, "se___listOfProbeInputFile");
var se___listOfVideoOverlay = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_VideoOverlay(entry, context);
  });
}, "se___listOfVideoOverlay");
var se___listOfVideoOverlayInputClipping = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_VideoOverlayInputClipping(entry, context);
  });
}, "se___listOfVideoOverlayInputClipping");
var se___listOfVideoOverlayTransition = /* @__PURE__ */ __name((input, context) => {
  return input.filter((e) => e != null).map((entry) => {
    return se_VideoOverlayTransition(entry, context);
  });
}, "se___listOfVideoOverlayTransition");
var se___mapOfAudioSelector = /* @__PURE__ */ __name((input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_AudioSelector(value, context);
    return acc;
  }, {});
}, "se___mapOfAudioSelector");
var se___mapOfAudioSelectorGroup = /* @__PURE__ */ __name((input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_AudioSelectorGroup(value, context);
    return acc;
  }, {});
}, "se___mapOfAudioSelectorGroup");
var se___mapOfCaptionSelector = /* @__PURE__ */ __name((input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_CaptionSelector(value, context);
    return acc;
  }, {});
}, "se___mapOfCaptionSelector");
var se___mapOfDynamicAudioSelector = /* @__PURE__ */ __name((input, context) => {
  return Object.entries(input).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = se_DynamicAudioSelector(value, context);
    return acc;
  }, {});
}, "se___mapOfDynamicAudioSelector");
var se_AacSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioDescriptionBroadcasterMix: [, , `AudioDescriptionBroadcasterMix`],
    bitrate: [, , `Bitrate`],
    codecProfile: [, , `CodecProfile`],
    codingMode: [, , `CodingMode`],
    rateControlMode: [, , `RateControlMode`],
    rawFormat: [, , `RawFormat`],
    sampleRate: [, , `SampleRate`],
    specification: [, , `Specification`],
    vbrQuality: [, , `VbrQuality`]
  });
}, "se_AacSettings");
var se_Ac3Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitrate: [, , `Bitrate`],
    bitstreamMode: [, , `BitstreamMode`],
    codingMode: [, , `CodingMode`],
    dialnorm: [, , `Dialnorm`],
    dynamicRangeCompressionLine: [, , `DynamicRangeCompressionLine`],
    dynamicRangeCompressionProfile: [, , `DynamicRangeCompressionProfile`],
    dynamicRangeCompressionRf: [, , `DynamicRangeCompressionRf`],
    lfeFilter: [, , `LfeFilter`],
    metadataControl: [, , `MetadataControl`],
    sampleRate: [, , `SampleRate`]
  });
}, "se_Ac3Settings");
var se_AccelerationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    mode: [, , `Mode`]
  });
}, "se_AccelerationSettings");
var se_AdvancedInputFilterSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    addTexture: [, , `AddTexture`],
    sharpening: [, , `Sharpening`]
  });
}, "se_AdvancedInputFilterSettings");
var se_AiffSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitDepth: [, , `BitDepth`],
    channels: [, , `Channels`],
    sampleRate: [, , `SampleRate`]
  });
}, "se_AiffSettings");
var se_AllowedRenditionSize = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    height: [, , `Height`],
    required: [, , `Required`],
    width: [, , `Width`]
  });
}, "se_AllowedRenditionSize");
var se_AncillarySourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    convert608To708: [, , `Convert608To708`],
    sourceAncillaryChannelNumber: [, , `SourceAncillaryChannelNumber`],
    terminateCaptions: [, , `TerminateCaptions`]
  });
}, "se_AncillarySourceSettings");
var se_AudioChannelTaggingSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    channelTag: [, , `ChannelTag`],
    channelTags: [, import_smithy_client._json, `ChannelTags`]
  });
}, "se_AudioChannelTaggingSettings");
var se_AudioCodecSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    aacSettings: [, (_) => se_AacSettings(_, context), `AacSettings`],
    ac3Settings: [, (_) => se_Ac3Settings(_, context), `Ac3Settings`],
    aiffSettings: [, (_) => se_AiffSettings(_, context), `AiffSettings`],
    codec: [, , `Codec`],
    eac3AtmosSettings: [, (_) => se_Eac3AtmosSettings(_, context), `Eac3AtmosSettings`],
    eac3Settings: [, (_) => se_Eac3Settings(_, context), `Eac3Settings`],
    flacSettings: [, (_) => se_FlacSettings(_, context), `FlacSettings`],
    mp2Settings: [, (_) => se_Mp2Settings(_, context), `Mp2Settings`],
    mp3Settings: [, (_) => se_Mp3Settings(_, context), `Mp3Settings`],
    opusSettings: [, (_) => se_OpusSettings(_, context), `OpusSettings`],
    vorbisSettings: [, (_) => se_VorbisSettings(_, context), `VorbisSettings`],
    wavSettings: [, (_) => se_WavSettings(_, context), `WavSettings`]
  });
}, "se_AudioCodecSettings");
var se_AudioDescription = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioChannelTaggingSettings: [, (_) => se_AudioChannelTaggingSettings(_, context), `AudioChannelTaggingSettings`],
    audioNormalizationSettings: [, (_) => se_AudioNormalizationSettings(_, context), `AudioNormalizationSettings`],
    audioSourceName: [, , `AudioSourceName`],
    audioType: [, , `AudioType`],
    audioTypeControl: [, , `AudioTypeControl`],
    codecSettings: [, (_) => se_AudioCodecSettings(_, context), `CodecSettings`],
    customLanguageCode: [, , `CustomLanguageCode`],
    languageCode: [, , `LanguageCode`],
    languageCodeControl: [, , `LanguageCodeControl`],
    remixSettings: [, (_) => se_RemixSettings(_, context), `RemixSettings`],
    streamName: [, , `StreamName`]
  });
}, "se_AudioDescription");
var se_AudioNormalizationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    algorithm: [, , `Algorithm`],
    algorithmControl: [, , `AlgorithmControl`],
    correctionGateLevel: [, , `CorrectionGateLevel`],
    loudnessLogging: [, , `LoudnessLogging`],
    peakCalculation: [, , `PeakCalculation`],
    targetLkfs: [, import_smithy_client.serializeFloat, `TargetLkfs`],
    truePeakLimiterThreshold: [, import_smithy_client.serializeFloat, `TruePeakLimiterThreshold`]
  });
}, "se_AudioNormalizationSettings");
var se_AudioSelector = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioDurationCorrection: [, , `AudioDurationCorrection`],
    customLanguageCode: [, , `CustomLanguageCode`],
    defaultSelection: [, , `DefaultSelection`],
    externalAudioFileInput: [, , `ExternalAudioFileInput`],
    hlsRenditionGroupSettings: [, (_) => se_HlsRenditionGroupSettings(_, context), `HlsRenditionGroupSettings`],
    languageCode: [, , `LanguageCode`],
    offset: [, , `Offset`],
    pids: [, import_smithy_client._json, `Pids`],
    programSelection: [, , `ProgramSelection`],
    remixSettings: [, (_) => se_RemixSettings(_, context), `RemixSettings`],
    selectorType: [, , `SelectorType`],
    tracks: [, import_smithy_client._json, `Tracks`]
  });
}, "se_AudioSelector");
var se_AudioSelectorGroup = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioSelectorNames: [, import_smithy_client._json, `AudioSelectorNames`]
  });
}, "se_AudioSelectorGroup");
var se_AutomatedAbrRule = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    allowedRenditions: [, (_) => se___listOfAllowedRenditionSize(_, context), `AllowedRenditions`],
    forceIncludeRenditions: [, (_) => se___listOfForceIncludeRenditionSize(_, context), `ForceIncludeRenditions`],
    minBottomRenditionSize: [, (_) => se_MinBottomRenditionSize(_, context), `MinBottomRenditionSize`],
    minTopRenditionSize: [, (_) => se_MinTopRenditionSize(_, context), `MinTopRenditionSize`],
    type: [, , `Type`]
  });
}, "se_AutomatedAbrRule");
var se_AutomatedAbrSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maxAbrBitrate: [, , `MaxAbrBitrate`],
    maxQualityLevel: [, import_smithy_client.serializeFloat, `MaxQualityLevel`],
    maxRenditions: [, , `MaxRenditions`],
    minAbrBitrate: [, , `MinAbrBitrate`],
    rules: [, (_) => se___listOfAutomatedAbrRule(_, context), `Rules`]
  });
}, "se_AutomatedAbrSettings");
var se_AutomatedEncodingSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    abrSettings: [, (_) => se_AutomatedAbrSettings(_, context), `AbrSettings`]
  });
}, "se_AutomatedEncodingSettings");
var se_Av1QvbrSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    qvbrQualityLevel: [, , `QvbrQualityLevel`],
    qvbrQualityLevelFineTune: [, import_smithy_client.serializeFloat, `QvbrQualityLevelFineTune`]
  });
}, "se_Av1QvbrSettings");
var se_Av1Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adaptiveQuantization: [, , `AdaptiveQuantization`],
    bitDepth: [, , `BitDepth`],
    filmGrainSynthesis: [, , `FilmGrainSynthesis`],
    framerateControl: [, , `FramerateControl`],
    framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    gopSize: [, import_smithy_client.serializeFloat, `GopSize`],
    maxBitrate: [, , `MaxBitrate`],
    numberBFramesBetweenReferenceFrames: [, , `NumberBFramesBetweenReferenceFrames`],
    perFrameMetrics: [, import_smithy_client._json, `PerFrameMetrics`],
    qvbrSettings: [, (_) => se_Av1QvbrSettings(_, context), `QvbrSettings`],
    rateControlMode: [, , `RateControlMode`],
    slices: [, , `Slices`],
    spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`]
  });
}, "se_Av1Settings");
var se_AvailBlanking = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    availBlankingImage: [, , `AvailBlankingImage`]
  });
}, "se_AvailBlanking");
var se_AvcIntraSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    avcIntraClass: [, , `AvcIntraClass`],
    avcIntraUhdSettings: [, (_) => se_AvcIntraUhdSettings(_, context), `AvcIntraUhdSettings`],
    framerateControl: [, , `FramerateControl`],
    framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    interlaceMode: [, , `InterlaceMode`],
    perFrameMetrics: [, import_smithy_client._json, `PerFrameMetrics`],
    scanTypeConversionMode: [, , `ScanTypeConversionMode`],
    slowPal: [, , `SlowPal`],
    telecine: [, , `Telecine`]
  });
}, "se_AvcIntraSettings");
var se_AvcIntraUhdSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    qualityTuningLevel: [, , `QualityTuningLevel`]
  });
}, "se_AvcIntraUhdSettings");
var se_BandwidthReductionFilter = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    sharpening: [, , `Sharpening`],
    strength: [, , `Strength`]
  });
}, "se_BandwidthReductionFilter");
var se_BurninDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    alignment: [, , `Alignment`],
    applyFontColor: [, , `ApplyFontColor`],
    backgroundColor: [, , `BackgroundColor`],
    backgroundOpacity: [, , `BackgroundOpacity`],
    fallbackFont: [, , `FallbackFont`],
    fontColor: [, , `FontColor`],
    fontFileBold: [, , `FontFileBold`],
    fontFileBoldItalic: [, , `FontFileBoldItalic`],
    fontFileItalic: [, , `FontFileItalic`],
    fontFileRegular: [, , `FontFileRegular`],
    fontOpacity: [, , `FontOpacity`],
    fontResolution: [, , `FontResolution`],
    fontScript: [, , `FontScript`],
    fontSize: [, , `FontSize`],
    hexFontColor: [, , `HexFontColor`],
    outlineColor: [, , `OutlineColor`],
    outlineSize: [, , `OutlineSize`],
    removeRubyReserveAttributes: [, , `RemoveRubyReserveAttributes`],
    shadowColor: [, , `ShadowColor`],
    shadowOpacity: [, , `ShadowOpacity`],
    shadowXOffset: [, , `ShadowXOffset`],
    shadowYOffset: [, , `ShadowYOffset`],
    stylePassthrough: [, , `StylePassthrough`],
    teletextSpacing: [, , `TeletextSpacing`],
    xPosition: [, , `XPosition`],
    yPosition: [, , `YPosition`]
  });
}, "se_BurninDestinationSettings");
var se_CaptionDescription = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    captionSelectorName: [, , `CaptionSelectorName`],
    customLanguageCode: [, , `CustomLanguageCode`],
    destinationSettings: [, (_) => se_CaptionDestinationSettings(_, context), `DestinationSettings`],
    languageCode: [, , `LanguageCode`],
    languageDescription: [, , `LanguageDescription`]
  });
}, "se_CaptionDescription");
var se_CaptionDescriptionPreset = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    customLanguageCode: [, , `CustomLanguageCode`],
    destinationSettings: [, (_) => se_CaptionDestinationSettings(_, context), `DestinationSettings`],
    languageCode: [, , `LanguageCode`],
    languageDescription: [, , `LanguageDescription`]
  });
}, "se_CaptionDescriptionPreset");
var se_CaptionDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    burninDestinationSettings: [, (_) => se_BurninDestinationSettings(_, context), `BurninDestinationSettings`],
    destinationType: [, , `DestinationType`],
    dvbSubDestinationSettings: [, (_) => se_DvbSubDestinationSettings(_, context), `DvbSubDestinationSettings`],
    embeddedDestinationSettings: [, (_) => se_EmbeddedDestinationSettings(_, context), `EmbeddedDestinationSettings`],
    imscDestinationSettings: [, (_) => se_ImscDestinationSettings(_, context), `ImscDestinationSettings`],
    sccDestinationSettings: [, (_) => se_SccDestinationSettings(_, context), `SccDestinationSettings`],
    srtDestinationSettings: [, (_) => se_SrtDestinationSettings(_, context), `SrtDestinationSettings`],
    teletextDestinationSettings: [, (_) => se_TeletextDestinationSettings(_, context), `TeletextDestinationSettings`],
    ttmlDestinationSettings: [, (_) => se_TtmlDestinationSettings(_, context), `TtmlDestinationSettings`],
    webvttDestinationSettings: [, (_) => se_WebvttDestinationSettings(_, context), `WebvttDestinationSettings`]
  });
}, "se_CaptionDestinationSettings");
var se_CaptionSelector = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    customLanguageCode: [, , `CustomLanguageCode`],
    languageCode: [, , `LanguageCode`],
    sourceSettings: [, (_) => se_CaptionSourceSettings(_, context), `SourceSettings`]
  });
}, "se_CaptionSelector");
var se_CaptionSourceFramerate = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`]
  });
}, "se_CaptionSourceFramerate");
var se_CaptionSourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    ancillarySourceSettings: [, (_) => se_AncillarySourceSettings(_, context), `AncillarySourceSettings`],
    dvbSubSourceSettings: [, (_) => se_DvbSubSourceSettings(_, context), `DvbSubSourceSettings`],
    embeddedSourceSettings: [, (_) => se_EmbeddedSourceSettings(_, context), `EmbeddedSourceSettings`],
    fileSourceSettings: [, (_) => se_FileSourceSettings(_, context), `FileSourceSettings`],
    sourceType: [, , `SourceType`],
    teletextSourceSettings: [, (_) => se_TeletextSourceSettings(_, context), `TeletextSourceSettings`],
    trackSourceSettings: [, (_) => se_TrackSourceSettings(_, context), `TrackSourceSettings`],
    webvttHlsSourceSettings: [, (_) => se_WebvttHlsSourceSettings(_, context), `WebvttHlsSourceSettings`]
  });
}, "se_CaptionSourceSettings");
var se_ChannelMapping = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    outputChannels: [, (_) => se___listOfOutputChannelMapping(_, context), `OutputChannels`]
  });
}, "se_ChannelMapping");
var se_ClipLimits = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maximumRGBTolerance: [, , `MaximumRGBTolerance`],
    maximumYUV: [, , `MaximumYUV`],
    minimumRGBTolerance: [, , `MinimumRGBTolerance`],
    minimumYUV: [, , `MinimumYUV`]
  });
}, "se_ClipLimits");
var se_CmafAdditionalManifest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    manifestNameModifier: [, , `ManifestNameModifier`],
    selectedOutputs: [, import_smithy_client._json, `SelectedOutputs`]
  });
}, "se_CmafAdditionalManifest");
var se_CmafEncryptionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    constantInitializationVector: [, , `ConstantInitializationVector`],
    encryptionMethod: [, , `EncryptionMethod`],
    initializationVectorInManifest: [, , `InitializationVectorInManifest`],
    spekeKeyProvider: [, (_) => se_SpekeKeyProviderCmaf(_, context), `SpekeKeyProvider`],
    staticKeyProvider: [, (_) => se_StaticKeyProvider(_, context), `StaticKeyProvider`],
    type: [, , `Type`]
  });
}, "se_CmafEncryptionSettings");
var se_CmafGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    additionalManifests: [, (_) => se___listOfCmafAdditionalManifest(_, context), `AdditionalManifests`],
    baseUrl: [, , `BaseUrl`],
    clientCache: [, , `ClientCache`],
    codecSpecification: [, , `CodecSpecification`],
    dashIFrameTrickPlayNameModifier: [, , `DashIFrameTrickPlayNameModifier`],
    dashManifestStyle: [, , `DashManifestStyle`],
    destination: [, , `Destination`],
    destinationSettings: [, (_) => se_DestinationSettings(_, context), `DestinationSettings`],
    encryption: [, (_) => se_CmafEncryptionSettings(_, context), `Encryption`],
    fragmentLength: [, , `FragmentLength`],
    imageBasedTrickPlay: [, , `ImageBasedTrickPlay`],
    imageBasedTrickPlaySettings: [
      ,
      (_) => se_CmafImageBasedTrickPlaySettings(_, context),
      `ImageBasedTrickPlaySettings`
    ],
    manifestCompression: [, , `ManifestCompression`],
    manifestDurationFormat: [, , `ManifestDurationFormat`],
    minBufferTime: [, , `MinBufferTime`],
    minFinalSegmentLength: [, import_smithy_client.serializeFloat, `MinFinalSegmentLength`],
    mpdManifestBandwidthType: [, , `MpdManifestBandwidthType`],
    mpdProfile: [, , `MpdProfile`],
    ptsOffsetHandlingForBFrames: [, , `PtsOffsetHandlingForBFrames`],
    segmentControl: [, , `SegmentControl`],
    segmentLength: [, , `SegmentLength`],
    segmentLengthControl: [, , `SegmentLengthControl`],
    streamInfResolution: [, , `StreamInfResolution`],
    targetDurationCompatibilityMode: [, , `TargetDurationCompatibilityMode`],
    videoCompositionOffsets: [, , `VideoCompositionOffsets`],
    writeDashManifest: [, , `WriteDashManifest`],
    writeHlsManifest: [, , `WriteHlsManifest`],
    writeSegmentTimelineInRepresentation: [, , `WriteSegmentTimelineInRepresentation`]
  });
}, "se_CmafGroupSettings");
var se_CmafImageBasedTrickPlaySettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    intervalCadence: [, , `IntervalCadence`],
    thumbnailHeight: [, , `ThumbnailHeight`],
    thumbnailInterval: [, import_smithy_client.serializeFloat, `ThumbnailInterval`],
    thumbnailWidth: [, , `ThumbnailWidth`],
    tileHeight: [, , `TileHeight`],
    tileWidth: [, , `TileWidth`]
  });
}, "se_CmafImageBasedTrickPlaySettings");
var se_CmfcSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioDuration: [, , `AudioDuration`],
    audioGroupId: [, , `AudioGroupId`],
    audioRenditionSets: [, , `AudioRenditionSets`],
    audioTrackType: [, , `AudioTrackType`],
    descriptiveVideoServiceFlag: [, , `DescriptiveVideoServiceFlag`],
    iFrameOnlyManifest: [, , `IFrameOnlyManifest`],
    klvMetadata: [, , `KlvMetadata`],
    manifestMetadataSignaling: [, , `ManifestMetadataSignaling`],
    scte35Esam: [, , `Scte35Esam`],
    scte35Source: [, , `Scte35Source`],
    timedMetadata: [, , `TimedMetadata`],
    timedMetadataBoxVersion: [, , `TimedMetadataBoxVersion`],
    timedMetadataSchemeIdUri: [, , `TimedMetadataSchemeIdUri`],
    timedMetadataValue: [, , `TimedMetadataValue`]
  });
}, "se_CmfcSettings");
var se_ColorConversion3DLUTSetting = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    fileInput: [, , `FileInput`],
    inputColorSpace: [, , `InputColorSpace`],
    inputMasteringLuminance: [, , `InputMasteringLuminance`],
    outputColorSpace: [, , `OutputColorSpace`],
    outputMasteringLuminance: [, , `OutputMasteringLuminance`]
  });
}, "se_ColorConversion3DLUTSetting");
var se_ColorCorrector = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    brightness: [, , `Brightness`],
    clipLimits: [, (_) => se_ClipLimits(_, context), `ClipLimits`],
    colorSpaceConversion: [, , `ColorSpaceConversion`],
    contrast: [, , `Contrast`],
    hdr10Metadata: [, (_) => se_Hdr10Metadata(_, context), `Hdr10Metadata`],
    hdrToSdrToneMapper: [, , `HdrToSdrToneMapper`],
    hue: [, , `Hue`],
    maxLuminance: [, , `MaxLuminance`],
    sampleRangeConversion: [, , `SampleRangeConversion`],
    saturation: [, , `Saturation`],
    sdrReferenceWhiteLevel: [, , `SdrReferenceWhiteLevel`]
  });
}, "se_ColorCorrector");
var se_ContainerSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    cmfcSettings: [, (_) => se_CmfcSettings(_, context), `CmfcSettings`],
    container: [, , `Container`],
    f4vSettings: [, (_) => se_F4vSettings(_, context), `F4vSettings`],
    m2tsSettings: [, (_) => se_M2tsSettings(_, context), `M2tsSettings`],
    m3u8Settings: [, (_) => se_M3u8Settings(_, context), `M3u8Settings`],
    movSettings: [, (_) => se_MovSettings(_, context), `MovSettings`],
    mp4Settings: [, (_) => se_Mp4Settings(_, context), `Mp4Settings`],
    mpdSettings: [, (_) => se_MpdSettings(_, context), `MpdSettings`],
    mxfSettings: [, (_) => se_MxfSettings(_, context), `MxfSettings`]
  });
}, "se_ContainerSettings");
var se_DashAdditionalManifest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    manifestNameModifier: [, , `ManifestNameModifier`],
    selectedOutputs: [, import_smithy_client._json, `SelectedOutputs`]
  });
}, "se_DashAdditionalManifest");
var se_DashIsoEncryptionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    playbackDeviceCompatibility: [, , `PlaybackDeviceCompatibility`],
    spekeKeyProvider: [, (_) => se_SpekeKeyProvider(_, context), `SpekeKeyProvider`]
  });
}, "se_DashIsoEncryptionSettings");
var se_DashIsoGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    additionalManifests: [, (_) => se___listOfDashAdditionalManifest(_, context), `AdditionalManifests`],
    audioChannelConfigSchemeIdUri: [, , `AudioChannelConfigSchemeIdUri`],
    baseUrl: [, , `BaseUrl`],
    dashIFrameTrickPlayNameModifier: [, , `DashIFrameTrickPlayNameModifier`],
    dashManifestStyle: [, , `DashManifestStyle`],
    destination: [, , `Destination`],
    destinationSettings: [, (_) => se_DestinationSettings(_, context), `DestinationSettings`],
    encryption: [, (_) => se_DashIsoEncryptionSettings(_, context), `Encryption`],
    fragmentLength: [, , `FragmentLength`],
    hbbtvCompliance: [, , `HbbtvCompliance`],
    imageBasedTrickPlay: [, , `ImageBasedTrickPlay`],
    imageBasedTrickPlaySettings: [
      ,
      (_) => se_DashIsoImageBasedTrickPlaySettings(_, context),
      `ImageBasedTrickPlaySettings`
    ],
    minBufferTime: [, , `MinBufferTime`],
    minFinalSegmentLength: [, import_smithy_client.serializeFloat, `MinFinalSegmentLength`],
    mpdManifestBandwidthType: [, , `MpdManifestBandwidthType`],
    mpdProfile: [, , `MpdProfile`],
    ptsOffsetHandlingForBFrames: [, , `PtsOffsetHandlingForBFrames`],
    segmentControl: [, , `SegmentControl`],
    segmentLength: [, , `SegmentLength`],
    segmentLengthControl: [, , `SegmentLengthControl`],
    videoCompositionOffsets: [, , `VideoCompositionOffsets`],
    writeSegmentTimelineInRepresentation: [, , `WriteSegmentTimelineInRepresentation`]
  });
}, "se_DashIsoGroupSettings");
var se_DashIsoImageBasedTrickPlaySettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    intervalCadence: [, , `IntervalCadence`],
    thumbnailHeight: [, , `ThumbnailHeight`],
    thumbnailInterval: [, import_smithy_client.serializeFloat, `ThumbnailInterval`],
    thumbnailWidth: [, , `ThumbnailWidth`],
    tileHeight: [, , `TileHeight`],
    tileWidth: [, , `TileWidth`]
  });
}, "se_DashIsoImageBasedTrickPlaySettings");
var se_Deinterlacer = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    algorithm: [, , `Algorithm`],
    control: [, , `Control`],
    mode: [, , `Mode`]
  });
}, "se_Deinterlacer");
var se_DestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    s3Settings: [, (_) => se_S3DestinationSettings(_, context), `S3Settings`]
  });
}, "se_DestinationSettings");
var se_DolbyVision = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    l6Metadata: [, (_) => se_DolbyVisionLevel6Metadata(_, context), `L6Metadata`],
    l6Mode: [, , `L6Mode`],
    mapping: [, , `Mapping`],
    profile: [, , `Profile`]
  });
}, "se_DolbyVision");
var se_DolbyVisionLevel6Metadata = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maxCll: [, , `MaxCll`],
    maxFall: [, , `MaxFall`]
  });
}, "se_DolbyVisionLevel6Metadata");
var se_DvbNitSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    networkId: [, , `NetworkId`],
    networkName: [, , `NetworkName`],
    nitInterval: [, , `NitInterval`]
  });
}, "se_DvbNitSettings");
var se_DvbSdtSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    outputSdt: [, , `OutputSdt`],
    sdtInterval: [, , `SdtInterval`],
    serviceName: [, , `ServiceName`],
    serviceProviderName: [, , `ServiceProviderName`]
  });
}, "se_DvbSdtSettings");
var se_DvbSubDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    alignment: [, , `Alignment`],
    applyFontColor: [, , `ApplyFontColor`],
    backgroundColor: [, , `BackgroundColor`],
    backgroundOpacity: [, , `BackgroundOpacity`],
    ddsHandling: [, , `DdsHandling`],
    ddsXCoordinate: [, , `DdsXCoordinate`],
    ddsYCoordinate: [, , `DdsYCoordinate`],
    fallbackFont: [, , `FallbackFont`],
    fontColor: [, , `FontColor`],
    fontFileBold: [, , `FontFileBold`],
    fontFileBoldItalic: [, , `FontFileBoldItalic`],
    fontFileItalic: [, , `FontFileItalic`],
    fontFileRegular: [, , `FontFileRegular`],
    fontOpacity: [, , `FontOpacity`],
    fontResolution: [, , `FontResolution`],
    fontScript: [, , `FontScript`],
    fontSize: [, , `FontSize`],
    height: [, , `Height`],
    hexFontColor: [, , `HexFontColor`],
    outlineColor: [, , `OutlineColor`],
    outlineSize: [, , `OutlineSize`],
    shadowColor: [, , `ShadowColor`],
    shadowOpacity: [, , `ShadowOpacity`],
    shadowXOffset: [, , `ShadowXOffset`],
    shadowYOffset: [, , `ShadowYOffset`],
    stylePassthrough: [, , `StylePassthrough`],
    subtitlingType: [, , `SubtitlingType`],
    teletextSpacing: [, , `TeletextSpacing`],
    width: [, , `Width`],
    xPosition: [, , `XPosition`],
    yPosition: [, , `YPosition`]
  });
}, "se_DvbSubDestinationSettings");
var se_DvbSubSourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    pid: [, , `Pid`]
  });
}, "se_DvbSubSourceSettings");
var se_DvbTdtSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    tdtInterval: [, , `TdtInterval`]
  });
}, "se_DvbTdtSettings");
var se_DynamicAudioSelector = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioDurationCorrection: [, , `AudioDurationCorrection`],
    externalAudioFileInput: [, , `ExternalAudioFileInput`],
    languageCode: [, , `LanguageCode`],
    offset: [, , `Offset`],
    selectorType: [, , `SelectorType`]
  });
}, "se_DynamicAudioSelector");
var se_Eac3AtmosSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitrate: [, , `Bitrate`],
    bitstreamMode: [, , `BitstreamMode`],
    codingMode: [, , `CodingMode`],
    dialogueIntelligence: [, , `DialogueIntelligence`],
    downmixControl: [, , `DownmixControl`],
    dynamicRangeCompressionLine: [, , `DynamicRangeCompressionLine`],
    dynamicRangeCompressionRf: [, , `DynamicRangeCompressionRf`],
    dynamicRangeControl: [, , `DynamicRangeControl`],
    loRoCenterMixLevel: [, import_smithy_client.serializeFloat, `LoRoCenterMixLevel`],
    loRoSurroundMixLevel: [, import_smithy_client.serializeFloat, `LoRoSurroundMixLevel`],
    ltRtCenterMixLevel: [, import_smithy_client.serializeFloat, `LtRtCenterMixLevel`],
    ltRtSurroundMixLevel: [, import_smithy_client.serializeFloat, `LtRtSurroundMixLevel`],
    meteringMode: [, , `MeteringMode`],
    sampleRate: [, , `SampleRate`],
    speechThreshold: [, , `SpeechThreshold`],
    stereoDownmix: [, , `StereoDownmix`],
    surroundExMode: [, , `SurroundExMode`]
  });
}, "se_Eac3AtmosSettings");
var se_Eac3Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    attenuationControl: [, , `AttenuationControl`],
    bitrate: [, , `Bitrate`],
    bitstreamMode: [, , `BitstreamMode`],
    codingMode: [, , `CodingMode`],
    dcFilter: [, , `DcFilter`],
    dialnorm: [, , `Dialnorm`],
    dynamicRangeCompressionLine: [, , `DynamicRangeCompressionLine`],
    dynamicRangeCompressionRf: [, , `DynamicRangeCompressionRf`],
    lfeControl: [, , `LfeControl`],
    lfeFilter: [, , `LfeFilter`],
    loRoCenterMixLevel: [, import_smithy_client.serializeFloat, `LoRoCenterMixLevel`],
    loRoSurroundMixLevel: [, import_smithy_client.serializeFloat, `LoRoSurroundMixLevel`],
    ltRtCenterMixLevel: [, import_smithy_client.serializeFloat, `LtRtCenterMixLevel`],
    ltRtSurroundMixLevel: [, import_smithy_client.serializeFloat, `LtRtSurroundMixLevel`],
    metadataControl: [, , `MetadataControl`],
    passthroughControl: [, , `PassthroughControl`],
    phaseControl: [, , `PhaseControl`],
    sampleRate: [, , `SampleRate`],
    stereoDownmix: [, , `StereoDownmix`],
    surroundExMode: [, , `SurroundExMode`],
    surroundMode: [, , `SurroundMode`]
  });
}, "se_Eac3Settings");
var se_EmbeddedDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    destination608ChannelNumber: [, , `Destination608ChannelNumber`],
    destination708ServiceNumber: [, , `Destination708ServiceNumber`]
  });
}, "se_EmbeddedDestinationSettings");
var se_EmbeddedSourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    convert608To708: [, , `Convert608To708`],
    source608ChannelNumber: [, , `Source608ChannelNumber`],
    source608TrackNumber: [, , `Source608TrackNumber`],
    terminateCaptions: [, , `TerminateCaptions`]
  });
}, "se_EmbeddedSourceSettings");
var se_EncryptionContractConfiguration = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    spekeAudioPreset: [, , `SpekeAudioPreset`],
    spekeVideoPreset: [, , `SpekeVideoPreset`]
  });
}, "se_EncryptionContractConfiguration");
var se_EsamManifestConfirmConditionNotification = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    mccXml: [, , `MccXml`]
  });
}, "se_EsamManifestConfirmConditionNotification");
var se_EsamSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    manifestConfirmConditionNotification: [
      ,
      (_) => se_EsamManifestConfirmConditionNotification(_, context),
      `ManifestConfirmConditionNotification`
    ],
    responseSignalPreroll: [, , `ResponseSignalPreroll`],
    signalProcessingNotification: [
      ,
      (_) => se_EsamSignalProcessingNotification(_, context),
      `SignalProcessingNotification`
    ]
  });
}, "se_EsamSettings");
var se_EsamSignalProcessingNotification = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    sccXml: [, , `SccXml`]
  });
}, "se_EsamSignalProcessingNotification");
var se_ExtendedDataServices = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    copyProtectionAction: [, , `CopyProtectionAction`],
    vchipAction: [, , `VchipAction`]
  });
}, "se_ExtendedDataServices");
var se_F4vSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    moovPlacement: [, , `MoovPlacement`]
  });
}, "se_F4vSettings");
var se_FileGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    destination: [, , `Destination`],
    destinationSettings: [, (_) => se_DestinationSettings(_, context), `DestinationSettings`]
  });
}, "se_FileGroupSettings");
var se_FileSourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    byteRateLimit: [, , `ByteRateLimit`],
    convert608To708: [, , `Convert608To708`],
    convertPaintToPop: [, , `ConvertPaintToPop`],
    framerate: [, (_) => se_CaptionSourceFramerate(_, context), `Framerate`],
    sourceFile: [, , `SourceFile`],
    timeDelta: [, , `TimeDelta`],
    timeDeltaUnits: [, , `TimeDeltaUnits`],
    upconvertSTLToTeletext: [, , `UpconvertSTLToTeletext`]
  });
}, "se_FileSourceSettings");
var se_FlacSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitDepth: [, , `BitDepth`],
    channels: [, , `Channels`],
    sampleRate: [, , `SampleRate`]
  });
}, "se_FlacSettings");
var se_ForceIncludeRenditionSize = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    height: [, , `Height`],
    width: [, , `Width`]
  });
}, "se_ForceIncludeRenditionSize");
var se_FrameCaptureSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    maxCaptures: [, , `MaxCaptures`],
    quality: [, , `Quality`]
  });
}, "se_FrameCaptureSettings");
var se_GifSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    framerateControl: [, , `FramerateControl`],
    framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`]
  });
}, "se_GifSettings");
var se_H264QvbrSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maxAverageBitrate: [, , `MaxAverageBitrate`],
    qvbrQualityLevel: [, , `QvbrQualityLevel`],
    qvbrQualityLevelFineTune: [, import_smithy_client.serializeFloat, `QvbrQualityLevelFineTune`]
  });
}, "se_H264QvbrSettings");
var se_H264Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adaptiveQuantization: [, , `AdaptiveQuantization`],
    bandwidthReductionFilter: [, (_) => se_BandwidthReductionFilter(_, context), `BandwidthReductionFilter`],
    bitrate: [, , `Bitrate`],
    codecLevel: [, , `CodecLevel`],
    codecProfile: [, , `CodecProfile`],
    dynamicSubGop: [, , `DynamicSubGop`],
    endOfStreamMarkers: [, , `EndOfStreamMarkers`],
    entropyEncoding: [, , `EntropyEncoding`],
    fieldEncoding: [, , `FieldEncoding`],
    flickerAdaptiveQuantization: [, , `FlickerAdaptiveQuantization`],
    framerateControl: [, , `FramerateControl`],
    framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    gopBReference: [, , `GopBReference`],
    gopClosedCadence: [, , `GopClosedCadence`],
    gopSize: [, import_smithy_client.serializeFloat, `GopSize`],
    gopSizeUnits: [, , `GopSizeUnits`],
    hrdBufferFinalFillPercentage: [, , `HrdBufferFinalFillPercentage`],
    hrdBufferInitialFillPercentage: [, , `HrdBufferInitialFillPercentage`],
    hrdBufferSize: [, , `HrdBufferSize`],
    interlaceMode: [, , `InterlaceMode`],
    maxBitrate: [, , `MaxBitrate`],
    minIInterval: [, , `MinIInterval`],
    numberBFramesBetweenReferenceFrames: [, , `NumberBFramesBetweenReferenceFrames`],
    numberReferenceFrames: [, , `NumberReferenceFrames`],
    parControl: [, , `ParControl`],
    parDenominator: [, , `ParDenominator`],
    parNumerator: [, , `ParNumerator`],
    perFrameMetrics: [, import_smithy_client._json, `PerFrameMetrics`],
    qualityTuningLevel: [, , `QualityTuningLevel`],
    qvbrSettings: [, (_) => se_H264QvbrSettings(_, context), `QvbrSettings`],
    rateControlMode: [, , `RateControlMode`],
    repeatPps: [, , `RepeatPps`],
    saliencyAwareEncoding: [, , `SaliencyAwareEncoding`],
    scanTypeConversionMode: [, , `ScanTypeConversionMode`],
    sceneChangeDetect: [, , `SceneChangeDetect`],
    slices: [, , `Slices`],
    slowPal: [, , `SlowPal`],
    softness: [, , `Softness`],
    spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
    syntax: [, , `Syntax`],
    telecine: [, , `Telecine`],
    temporalAdaptiveQuantization: [, , `TemporalAdaptiveQuantization`],
    unregisteredSeiTimecode: [, , `UnregisteredSeiTimecode`],
    writeMp4PackagingType: [, , `WriteMp4PackagingType`]
  });
}, "se_H264Settings");
var se_H265QvbrSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    maxAverageBitrate: [, , `MaxAverageBitrate`],
    qvbrQualityLevel: [, , `QvbrQualityLevel`],
    qvbrQualityLevelFineTune: [, import_smithy_client.serializeFloat, `QvbrQualityLevelFineTune`]
  });
}, "se_H265QvbrSettings");
var se_H265Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adaptiveQuantization: [, , `AdaptiveQuantization`],
    alternateTransferFunctionSei: [, , `AlternateTransferFunctionSei`],
    bandwidthReductionFilter: [, (_) => se_BandwidthReductionFilter(_, context), `BandwidthReductionFilter`],
    bitrate: [, , `Bitrate`],
    codecLevel: [, , `CodecLevel`],
    codecProfile: [, , `CodecProfile`],
    deblocking: [, , `Deblocking`],
    dynamicSubGop: [, , `DynamicSubGop`],
    endOfStreamMarkers: [, , `EndOfStreamMarkers`],
    flickerAdaptiveQuantization: [, , `FlickerAdaptiveQuantization`],
    framerateControl: [, , `FramerateControl`],
    framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    gopBReference: [, , `GopBReference`],
    gopClosedCadence: [, , `GopClosedCadence`],
    gopSize: [, import_smithy_client.serializeFloat, `GopSize`],
    gopSizeUnits: [, , `GopSizeUnits`],
    hrdBufferFinalFillPercentage: [, , `HrdBufferFinalFillPercentage`],
    hrdBufferInitialFillPercentage: [, , `HrdBufferInitialFillPercentage`],
    hrdBufferSize: [, , `HrdBufferSize`],
    interlaceMode: [, , `InterlaceMode`],
    maxBitrate: [, , `MaxBitrate`],
    minIInterval: [, , `MinIInterval`],
    numberBFramesBetweenReferenceFrames: [, , `NumberBFramesBetweenReferenceFrames`],
    numberReferenceFrames: [, , `NumberReferenceFrames`],
    parControl: [, , `ParControl`],
    parDenominator: [, , `ParDenominator`],
    parNumerator: [, , `ParNumerator`],
    perFrameMetrics: [, import_smithy_client._json, `PerFrameMetrics`],
    qualityTuningLevel: [, , `QualityTuningLevel`],
    qvbrSettings: [, (_) => se_H265QvbrSettings(_, context), `QvbrSettings`],
    rateControlMode: [, , `RateControlMode`],
    sampleAdaptiveOffsetFilterMode: [, , `SampleAdaptiveOffsetFilterMode`],
    scanTypeConversionMode: [, , `ScanTypeConversionMode`],
    sceneChangeDetect: [, , `SceneChangeDetect`],
    slices: [, , `Slices`],
    slowPal: [, , `SlowPal`],
    spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
    telecine: [, , `Telecine`],
    temporalAdaptiveQuantization: [, , `TemporalAdaptiveQuantization`],
    temporalIds: [, , `TemporalIds`],
    tiles: [, , `Tiles`],
    unregisteredSeiTimecode: [, , `UnregisteredSeiTimecode`],
    writeMp4PackagingType: [, , `WriteMp4PackagingType`]
  });
}, "se_H265Settings");
var se_Hdr10Metadata = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bluePrimaryX: [, , `BluePrimaryX`],
    bluePrimaryY: [, , `BluePrimaryY`],
    greenPrimaryX: [, , `GreenPrimaryX`],
    greenPrimaryY: [, , `GreenPrimaryY`],
    maxContentLightLevel: [, , `MaxContentLightLevel`],
    maxFrameAverageLightLevel: [, , `MaxFrameAverageLightLevel`],
    maxLuminance: [, , `MaxLuminance`],
    minLuminance: [, , `MinLuminance`],
    redPrimaryX: [, , `RedPrimaryX`],
    redPrimaryY: [, , `RedPrimaryY`],
    whitePointX: [, , `WhitePointX`],
    whitePointY: [, , `WhitePointY`]
  });
}, "se_Hdr10Metadata");
var se_Hdr10Plus = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    masteringMonitorNits: [, , `MasteringMonitorNits`],
    targetMonitorNits: [, , `TargetMonitorNits`]
  });
}, "se_Hdr10Plus");
var se_HlsAdditionalManifest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    manifestNameModifier: [, , `ManifestNameModifier`],
    selectedOutputs: [, import_smithy_client._json, `SelectedOutputs`]
  });
}, "se_HlsAdditionalManifest");
var se_HlsCaptionLanguageMapping = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    captionChannel: [, , `CaptionChannel`],
    customLanguageCode: [, , `CustomLanguageCode`],
    languageCode: [, , `LanguageCode`],
    languageDescription: [, , `LanguageDescription`]
  });
}, "se_HlsCaptionLanguageMapping");
var se_HlsEncryptionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    constantInitializationVector: [, , `ConstantInitializationVector`],
    encryptionMethod: [, , `EncryptionMethod`],
    initializationVectorInManifest: [, , `InitializationVectorInManifest`],
    offlineEncrypted: [, , `OfflineEncrypted`],
    spekeKeyProvider: [, (_) => se_SpekeKeyProvider(_, context), `SpekeKeyProvider`],
    staticKeyProvider: [, (_) => se_StaticKeyProvider(_, context), `StaticKeyProvider`],
    type: [, , `Type`]
  });
}, "se_HlsEncryptionSettings");
var se_HlsGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adMarkers: [, import_smithy_client._json, `AdMarkers`],
    additionalManifests: [, (_) => se___listOfHlsAdditionalManifest(_, context), `AdditionalManifests`],
    audioOnlyHeader: [, , `AudioOnlyHeader`],
    baseUrl: [, , `BaseUrl`],
    captionLanguageMappings: [, (_) => se___listOfHlsCaptionLanguageMapping(_, context), `CaptionLanguageMappings`],
    captionLanguageSetting: [, , `CaptionLanguageSetting`],
    captionSegmentLengthControl: [, , `CaptionSegmentLengthControl`],
    clientCache: [, , `ClientCache`],
    codecSpecification: [, , `CodecSpecification`],
    destination: [, , `Destination`],
    destinationSettings: [, (_) => se_DestinationSettings(_, context), `DestinationSettings`],
    directoryStructure: [, , `DirectoryStructure`],
    encryption: [, (_) => se_HlsEncryptionSettings(_, context), `Encryption`],
    imageBasedTrickPlay: [, , `ImageBasedTrickPlay`],
    imageBasedTrickPlaySettings: [
      ,
      (_) => se_HlsImageBasedTrickPlaySettings(_, context),
      `ImageBasedTrickPlaySettings`
    ],
    manifestCompression: [, , `ManifestCompression`],
    manifestDurationFormat: [, , `ManifestDurationFormat`],
    minFinalSegmentLength: [, import_smithy_client.serializeFloat, `MinFinalSegmentLength`],
    minSegmentLength: [, , `MinSegmentLength`],
    outputSelection: [, , `OutputSelection`],
    programDateTime: [, , `ProgramDateTime`],
    programDateTimePeriod: [, , `ProgramDateTimePeriod`],
    progressiveWriteHlsManifest: [, , `ProgressiveWriteHlsManifest`],
    segmentControl: [, , `SegmentControl`],
    segmentLength: [, , `SegmentLength`],
    segmentLengthControl: [, , `SegmentLengthControl`],
    segmentsPerSubdirectory: [, , `SegmentsPerSubdirectory`],
    streamInfResolution: [, , `StreamInfResolution`],
    targetDurationCompatibilityMode: [, , `TargetDurationCompatibilityMode`],
    timedMetadataId3Frame: [, , `TimedMetadataId3Frame`],
    timedMetadataId3Period: [, , `TimedMetadataId3Period`],
    timestampDeltaMilliseconds: [, , `TimestampDeltaMilliseconds`]
  });
}, "se_HlsGroupSettings");
var se_HlsImageBasedTrickPlaySettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    intervalCadence: [, , `IntervalCadence`],
    thumbnailHeight: [, , `ThumbnailHeight`],
    thumbnailInterval: [, import_smithy_client.serializeFloat, `ThumbnailInterval`],
    thumbnailWidth: [, , `ThumbnailWidth`],
    tileHeight: [, , `TileHeight`],
    tileWidth: [, , `TileWidth`]
  });
}, "se_HlsImageBasedTrickPlaySettings");
var se_HlsRenditionGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    renditionGroupId: [, , `RenditionGroupId`],
    renditionLanguageCode: [, , `RenditionLanguageCode`],
    renditionName: [, , `RenditionName`]
  });
}, "se_HlsRenditionGroupSettings");
var se_HlsSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioGroupId: [, , `AudioGroupId`],
    audioOnlyContainer: [, , `AudioOnlyContainer`],
    audioRenditionSets: [, , `AudioRenditionSets`],
    audioTrackType: [, , `AudioTrackType`],
    descriptiveVideoServiceFlag: [, , `DescriptiveVideoServiceFlag`],
    iFrameOnlyManifest: [, , `IFrameOnlyManifest`],
    segmentModifier: [, , `SegmentModifier`]
  });
}, "se_HlsSettings");
var se_HopDestination = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    priority: [, , `Priority`],
    queue: [, , `Queue`],
    waitMinutes: [, , `WaitMinutes`]
  });
}, "se_HopDestination");
var se_Id3Insertion = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    id3: [, , `Id3`],
    timecode: [, , `Timecode`]
  });
}, "se_Id3Insertion");
var se_ImageInserter = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    insertableImages: [, (_) => se___listOfInsertableImage(_, context), `InsertableImages`],
    sdrReferenceWhiteLevel: [, , `SdrReferenceWhiteLevel`]
  });
}, "se_ImageInserter");
var se_ImscDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    accessibility: [, , `Accessibility`],
    stylePassthrough: [, , `StylePassthrough`]
  });
}, "se_ImscDestinationSettings");
var se_Input = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    advancedInputFilter: [, , `AdvancedInputFilter`],
    advancedInputFilterSettings: [, (_) => se_AdvancedInputFilterSettings(_, context), `AdvancedInputFilterSettings`],
    audioSelectorGroups: [, (_) => se___mapOfAudioSelectorGroup(_, context), `AudioSelectorGroups`],
    audioSelectors: [, (_) => se___mapOfAudioSelector(_, context), `AudioSelectors`],
    captionSelectors: [, (_) => se___mapOfCaptionSelector(_, context), `CaptionSelectors`],
    crop: [, (_) => se_Rectangle(_, context), `Crop`],
    deblockFilter: [, , `DeblockFilter`],
    decryptionSettings: [, (_) => se_InputDecryptionSettings(_, context), `DecryptionSettings`],
    denoiseFilter: [, , `DenoiseFilter`],
    dolbyVisionMetadataXml: [, , `DolbyVisionMetadataXml`],
    dynamicAudioSelectors: [, (_) => se___mapOfDynamicAudioSelector(_, context), `DynamicAudioSelectors`],
    fileInput: [, , `FileInput`],
    filterEnable: [, , `FilterEnable`],
    filterStrength: [, , `FilterStrength`],
    imageInserter: [, (_) => se_ImageInserter(_, context), `ImageInserter`],
    inputClippings: [, (_) => se___listOfInputClipping(_, context), `InputClippings`],
    inputScanType: [, , `InputScanType`],
    position: [, (_) => se_Rectangle(_, context), `Position`],
    programNumber: [, , `ProgramNumber`],
    psiControl: [, , `PsiControl`],
    supplementalImps: [, import_smithy_client._json, `SupplementalImps`],
    timecodeSource: [, , `TimecodeSource`],
    timecodeStart: [, , `TimecodeStart`],
    videoGenerator: [, (_) => se_InputVideoGenerator(_, context), `VideoGenerator`],
    videoOverlays: [, (_) => se___listOfVideoOverlay(_, context), `VideoOverlays`],
    videoSelector: [, (_) => se_VideoSelector(_, context), `VideoSelector`]
  });
}, "se_Input");
var se_InputClipping = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    endTimecode: [, , `EndTimecode`],
    startTimecode: [, , `StartTimecode`]
  });
}, "se_InputClipping");
var se_InputDecryptionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    decryptionMode: [, , `DecryptionMode`],
    encryptedDecryptionKey: [, , `EncryptedDecryptionKey`],
    initializationVector: [, , `InitializationVector`],
    kmsKeyRegion: [, , `KmsKeyRegion`]
  });
}, "se_InputDecryptionSettings");
var se_InputTemplate = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    advancedInputFilter: [, , `AdvancedInputFilter`],
    advancedInputFilterSettings: [, (_) => se_AdvancedInputFilterSettings(_, context), `AdvancedInputFilterSettings`],
    audioSelectorGroups: [, (_) => se___mapOfAudioSelectorGroup(_, context), `AudioSelectorGroups`],
    audioSelectors: [, (_) => se___mapOfAudioSelector(_, context), `AudioSelectors`],
    captionSelectors: [, (_) => se___mapOfCaptionSelector(_, context), `CaptionSelectors`],
    crop: [, (_) => se_Rectangle(_, context), `Crop`],
    deblockFilter: [, , `DeblockFilter`],
    denoiseFilter: [, , `DenoiseFilter`],
    dolbyVisionMetadataXml: [, , `DolbyVisionMetadataXml`],
    dynamicAudioSelectors: [, (_) => se___mapOfDynamicAudioSelector(_, context), `DynamicAudioSelectors`],
    filterEnable: [, , `FilterEnable`],
    filterStrength: [, , `FilterStrength`],
    imageInserter: [, (_) => se_ImageInserter(_, context), `ImageInserter`],
    inputClippings: [, (_) => se___listOfInputClipping(_, context), `InputClippings`],
    inputScanType: [, , `InputScanType`],
    position: [, (_) => se_Rectangle(_, context), `Position`],
    programNumber: [, , `ProgramNumber`],
    psiControl: [, , `PsiControl`],
    timecodeSource: [, , `TimecodeSource`],
    timecodeStart: [, , `TimecodeStart`],
    videoOverlays: [, (_) => se___listOfVideoOverlay(_, context), `VideoOverlays`],
    videoSelector: [, (_) => se_VideoSelector(_, context), `VideoSelector`]
  });
}, "se_InputTemplate");
var se_InputVideoGenerator = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    channels: [, , `Channels`],
    duration: [, , `Duration`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    sampleRate: [, , `SampleRate`]
  });
}, "se_InputVideoGenerator");
var se_InsertableImage = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    duration: [, , `Duration`],
    fadeIn: [, , `FadeIn`],
    fadeOut: [, , `FadeOut`],
    height: [, , `Height`],
    imageInserterInput: [, , `ImageInserterInput`],
    imageX: [, , `ImageX`],
    imageY: [, , `ImageY`],
    layer: [, , `Layer`],
    opacity: [, , `Opacity`],
    startTime: [, , `StartTime`],
    width: [, , `Width`]
  });
}, "se_InsertableImage");
var se_JobSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adAvailOffset: [, , `AdAvailOffset`],
    availBlanking: [, (_) => se_AvailBlanking(_, context), `AvailBlanking`],
    colorConversion3DLUTSettings: [
      ,
      (_) => se___listOfColorConversion3DLUTSetting(_, context),
      `ColorConversion3DLUTSettings`
    ],
    esam: [, (_) => se_EsamSettings(_, context), `Esam`],
    extendedDataServices: [, (_) => se_ExtendedDataServices(_, context), `ExtendedDataServices`],
    followSource: [, , `FollowSource`],
    inputs: [, (_) => se___listOfInput(_, context), `Inputs`],
    kantarWatermark: [, (_) => se_KantarWatermarkSettings(_, context), `KantarWatermark`],
    motionImageInserter: [, (_) => se_MotionImageInserter(_, context), `MotionImageInserter`],
    nielsenConfiguration: [, (_) => se_NielsenConfiguration(_, context), `NielsenConfiguration`],
    nielsenNonLinearWatermark: [, (_) => se_NielsenNonLinearWatermarkSettings(_, context), `NielsenNonLinearWatermark`],
    outputGroups: [, (_) => se___listOfOutputGroup(_, context), `OutputGroups`],
    timecodeConfig: [, (_) => se_TimecodeConfig(_, context), `TimecodeConfig`],
    timedMetadataInsertion: [, (_) => se_TimedMetadataInsertion(_, context), `TimedMetadataInsertion`]
  });
}, "se_JobSettings");
var se_JobTemplateSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adAvailOffset: [, , `AdAvailOffset`],
    availBlanking: [, (_) => se_AvailBlanking(_, context), `AvailBlanking`],
    colorConversion3DLUTSettings: [
      ,
      (_) => se___listOfColorConversion3DLUTSetting(_, context),
      `ColorConversion3DLUTSettings`
    ],
    esam: [, (_) => se_EsamSettings(_, context), `Esam`],
    extendedDataServices: [, (_) => se_ExtendedDataServices(_, context), `ExtendedDataServices`],
    followSource: [, , `FollowSource`],
    inputs: [, (_) => se___listOfInputTemplate(_, context), `Inputs`],
    kantarWatermark: [, (_) => se_KantarWatermarkSettings(_, context), `KantarWatermark`],
    motionImageInserter: [, (_) => se_MotionImageInserter(_, context), `MotionImageInserter`],
    nielsenConfiguration: [, (_) => se_NielsenConfiguration(_, context), `NielsenConfiguration`],
    nielsenNonLinearWatermark: [, (_) => se_NielsenNonLinearWatermarkSettings(_, context), `NielsenNonLinearWatermark`],
    outputGroups: [, (_) => se___listOfOutputGroup(_, context), `OutputGroups`],
    timecodeConfig: [, (_) => se_TimecodeConfig(_, context), `TimecodeConfig`],
    timedMetadataInsertion: [, (_) => se_TimedMetadataInsertion(_, context), `TimedMetadataInsertion`]
  });
}, "se_JobTemplateSettings");
var se_KantarWatermarkSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    channelName: [, , `ChannelName`],
    contentReference: [, , `ContentReference`],
    credentialsSecretName: [, , `CredentialsSecretName`],
    fileOffset: [, import_smithy_client.serializeFloat, `FileOffset`],
    kantarLicenseId: [, , `KantarLicenseId`],
    kantarServerUrl: [, , `KantarServerUrl`],
    logDestination: [, , `LogDestination`],
    metadata3: [, , `Metadata3`],
    metadata4: [, , `Metadata4`],
    metadata5: [, , `Metadata5`],
    metadata6: [, , `Metadata6`],
    metadata7: [, , `Metadata7`],
    metadata8: [, , `Metadata8`]
  });
}, "se_KantarWatermarkSettings");
var se_M2tsScte35Esam = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    scte35EsamPid: [, , `Scte35EsamPid`]
  });
}, "se_M2tsScte35Esam");
var se_M2tsSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioBufferModel: [, , `AudioBufferModel`],
    audioDuration: [, , `AudioDuration`],
    audioFramesPerPes: [, , `AudioFramesPerPes`],
    audioPids: [, import_smithy_client._json, `AudioPids`],
    audioPtsOffsetDelta: [, , `AudioPtsOffsetDelta`],
    bitrate: [, , `Bitrate`],
    bufferModel: [, , `BufferModel`],
    dataPTSControl: [, , `DataPTSControl`],
    dvbNitSettings: [, (_) => se_DvbNitSettings(_, context), `DvbNitSettings`],
    dvbSdtSettings: [, (_) => se_DvbSdtSettings(_, context), `DvbSdtSettings`],
    dvbSubPids: [, import_smithy_client._json, `DvbSubPids`],
    dvbTdtSettings: [, (_) => se_DvbTdtSettings(_, context), `DvbTdtSettings`],
    dvbTeletextPid: [, , `DvbTeletextPid`],
    ebpAudioInterval: [, , `EbpAudioInterval`],
    ebpPlacement: [, , `EbpPlacement`],
    esRateInPes: [, , `EsRateInPes`],
    forceTsVideoEbpOrder: [, , `ForceTsVideoEbpOrder`],
    fragmentTime: [, import_smithy_client.serializeFloat, `FragmentTime`],
    klvMetadata: [, , `KlvMetadata`],
    maxPcrInterval: [, , `MaxPcrInterval`],
    minEbpInterval: [, , `MinEbpInterval`],
    nielsenId3: [, , `NielsenId3`],
    nullPacketBitrate: [, import_smithy_client.serializeFloat, `NullPacketBitrate`],
    patInterval: [, , `PatInterval`],
    pcrControl: [, , `PcrControl`],
    pcrPid: [, , `PcrPid`],
    pmtInterval: [, , `PmtInterval`],
    pmtPid: [, , `PmtPid`],
    preventBufferUnderflow: [, , `PreventBufferUnderflow`],
    privateMetadataPid: [, , `PrivateMetadataPid`],
    programNumber: [, , `ProgramNumber`],
    ptsOffset: [, , `PtsOffset`],
    ptsOffsetMode: [, , `PtsOffsetMode`],
    rateMode: [, , `RateMode`],
    scte35Esam: [, (_) => se_M2tsScte35Esam(_, context), `Scte35Esam`],
    scte35Pid: [, , `Scte35Pid`],
    scte35Source: [, , `Scte35Source`],
    segmentationMarkers: [, , `SegmentationMarkers`],
    segmentationStyle: [, , `SegmentationStyle`],
    segmentationTime: [, import_smithy_client.serializeFloat, `SegmentationTime`],
    timedMetadataPid: [, , `TimedMetadataPid`],
    transportStreamId: [, , `TransportStreamId`],
    videoPid: [, , `VideoPid`]
  });
}, "se_M2tsSettings");
var se_M3u8Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioDuration: [, , `AudioDuration`],
    audioFramesPerPes: [, , `AudioFramesPerPes`],
    audioPids: [, import_smithy_client._json, `AudioPids`],
    audioPtsOffsetDelta: [, , `AudioPtsOffsetDelta`],
    dataPTSControl: [, , `DataPTSControl`],
    maxPcrInterval: [, , `MaxPcrInterval`],
    nielsenId3: [, , `NielsenId3`],
    patInterval: [, , `PatInterval`],
    pcrControl: [, , `PcrControl`],
    pcrPid: [, , `PcrPid`],
    pmtInterval: [, , `PmtInterval`],
    pmtPid: [, , `PmtPid`],
    privateMetadataPid: [, , `PrivateMetadataPid`],
    programNumber: [, , `ProgramNumber`],
    ptsOffset: [, , `PtsOffset`],
    ptsOffsetMode: [, , `PtsOffsetMode`],
    scte35Pid: [, , `Scte35Pid`],
    scte35Source: [, , `Scte35Source`],
    timedMetadata: [, , `TimedMetadata`],
    timedMetadataPid: [, , `TimedMetadataPid`],
    transportStreamId: [, , `TransportStreamId`],
    videoPid: [, , `VideoPid`]
  });
}, "se_M3u8Settings");
var se_MinBottomRenditionSize = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    height: [, , `Height`],
    width: [, , `Width`]
  });
}, "se_MinBottomRenditionSize");
var se_MinTopRenditionSize = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    height: [, , `Height`],
    width: [, , `Width`]
  });
}, "se_MinTopRenditionSize");
var se_MotionImageInserter = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    framerate: [, (_) => se_MotionImageInsertionFramerate(_, context), `Framerate`],
    input: [, , `Input`],
    insertionMode: [, , `InsertionMode`],
    offset: [, (_) => se_MotionImageInsertionOffset(_, context), `Offset`],
    playback: [, , `Playback`],
    startTime: [, , `StartTime`]
  });
}, "se_MotionImageInserter");
var se_MotionImageInsertionFramerate = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`]
  });
}, "se_MotionImageInsertionFramerate");
var se_MotionImageInsertionOffset = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    imageX: [, , `ImageX`],
    imageY: [, , `ImageY`]
  });
}, "se_MotionImageInsertionOffset");
var se_MovSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    clapAtom: [, , `ClapAtom`],
    cslgAtom: [, , `CslgAtom`],
    mpeg2FourCCControl: [, , `Mpeg2FourCCControl`],
    paddingControl: [, , `PaddingControl`],
    reference: [, , `Reference`]
  });
}, "se_MovSettings");
var se_Mp2Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitrate: [, , `Bitrate`],
    channels: [, , `Channels`],
    sampleRate: [, , `SampleRate`]
  });
}, "se_Mp2Settings");
var se_Mp3Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitrate: [, , `Bitrate`],
    channels: [, , `Channels`],
    rateControlMode: [, , `RateControlMode`],
    sampleRate: [, , `SampleRate`],
    vbrQuality: [, , `VbrQuality`]
  });
}, "se_Mp3Settings");
var se_Mp4Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioDuration: [, , `AudioDuration`],
    cslgAtom: [, , `CslgAtom`],
    cttsVersion: [, , `CttsVersion`],
    freeSpaceBox: [, , `FreeSpaceBox`],
    moovPlacement: [, , `MoovPlacement`],
    mp4MajorBrand: [, , `Mp4MajorBrand`]
  });
}, "se_Mp4Settings");
var se_MpdSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    accessibilityCaptionHints: [, , `AccessibilityCaptionHints`],
    audioDuration: [, , `AudioDuration`],
    captionContainerType: [, , `CaptionContainerType`],
    klvMetadata: [, , `KlvMetadata`],
    manifestMetadataSignaling: [, , `ManifestMetadataSignaling`],
    scte35Esam: [, , `Scte35Esam`],
    scte35Source: [, , `Scte35Source`],
    timedMetadata: [, , `TimedMetadata`],
    timedMetadataBoxVersion: [, , `TimedMetadataBoxVersion`],
    timedMetadataSchemeIdUri: [, , `TimedMetadataSchemeIdUri`],
    timedMetadataValue: [, , `TimedMetadataValue`]
  });
}, "se_MpdSettings");
var se_Mpeg2Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adaptiveQuantization: [, , `AdaptiveQuantization`],
    bitrate: [, , `Bitrate`],
    codecLevel: [, , `CodecLevel`],
    codecProfile: [, , `CodecProfile`],
    dynamicSubGop: [, , `DynamicSubGop`],
    framerateControl: [, , `FramerateControl`],
    framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    gopClosedCadence: [, , `GopClosedCadence`],
    gopSize: [, import_smithy_client.serializeFloat, `GopSize`],
    gopSizeUnits: [, , `GopSizeUnits`],
    hrdBufferFinalFillPercentage: [, , `HrdBufferFinalFillPercentage`],
    hrdBufferInitialFillPercentage: [, , `HrdBufferInitialFillPercentage`],
    hrdBufferSize: [, , `HrdBufferSize`],
    interlaceMode: [, , `InterlaceMode`],
    intraDcPrecision: [, , `IntraDcPrecision`],
    maxBitrate: [, , `MaxBitrate`],
    minIInterval: [, , `MinIInterval`],
    numberBFramesBetweenReferenceFrames: [, , `NumberBFramesBetweenReferenceFrames`],
    parControl: [, , `ParControl`],
    parDenominator: [, , `ParDenominator`],
    parNumerator: [, , `ParNumerator`],
    perFrameMetrics: [, import_smithy_client._json, `PerFrameMetrics`],
    qualityTuningLevel: [, , `QualityTuningLevel`],
    rateControlMode: [, , `RateControlMode`],
    scanTypeConversionMode: [, , `ScanTypeConversionMode`],
    sceneChangeDetect: [, , `SceneChangeDetect`],
    slowPal: [, , `SlowPal`],
    softness: [, , `Softness`],
    spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
    syntax: [, , `Syntax`],
    telecine: [, , `Telecine`],
    temporalAdaptiveQuantization: [, , `TemporalAdaptiveQuantization`]
  });
}, "se_Mpeg2Settings");
var se_MsSmoothAdditionalManifest = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    manifestNameModifier: [, , `ManifestNameModifier`],
    selectedOutputs: [, import_smithy_client._json, `SelectedOutputs`]
  });
}, "se_MsSmoothAdditionalManifest");
var se_MsSmoothEncryptionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    spekeKeyProvider: [, (_) => se_SpekeKeyProvider(_, context), `SpekeKeyProvider`]
  });
}, "se_MsSmoothEncryptionSettings");
var se_MsSmoothGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    additionalManifests: [, (_) => se___listOfMsSmoothAdditionalManifest(_, context), `AdditionalManifests`],
    audioDeduplication: [, , `AudioDeduplication`],
    destination: [, , `Destination`],
    destinationSettings: [, (_) => se_DestinationSettings(_, context), `DestinationSettings`],
    encryption: [, (_) => se_MsSmoothEncryptionSettings(_, context), `Encryption`],
    fragmentLength: [, , `FragmentLength`],
    fragmentLengthControl: [, , `FragmentLengthControl`],
    manifestEncoding: [, , `ManifestEncoding`]
  });
}, "se_MsSmoothGroupSettings");
var se_MxfSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    afdSignaling: [, , `AfdSignaling`],
    profile: [, , `Profile`],
    xavcProfileSettings: [, (_) => se_MxfXavcProfileSettings(_, context), `XavcProfileSettings`]
  });
}, "se_MxfSettings");
var se_MxfXavcProfileSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    durationMode: [, , `DurationMode`],
    maxAncDataSize: [, , `MaxAncDataSize`]
  });
}, "se_MxfXavcProfileSettings");
var se_NexGuardFileMarkerSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    license: [, , `License`],
    payload: [, , `Payload`],
    preset: [, , `Preset`],
    strength: [, , `Strength`]
  });
}, "se_NexGuardFileMarkerSettings");
var se_NielsenConfiguration = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    breakoutCode: [, , `BreakoutCode`],
    distributorId: [, , `DistributorId`]
  });
}, "se_NielsenConfiguration");
var se_NielsenNonLinearWatermarkSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    activeWatermarkProcess: [, , `ActiveWatermarkProcess`],
    adiFilename: [, , `AdiFilename`],
    assetId: [, , `AssetId`],
    assetName: [, , `AssetName`],
    cbetSourceId: [, , `CbetSourceId`],
    episodeId: [, , `EpisodeId`],
    metadataDestination: [, , `MetadataDestination`],
    sourceId: [, , `SourceId`],
    sourceWatermarkStatus: [, , `SourceWatermarkStatus`],
    ticServerUrl: [, , `TicServerUrl`],
    uniqueTicPerAudioTrack: [, , `UniqueTicPerAudioTrack`]
  });
}, "se_NielsenNonLinearWatermarkSettings");
var se_NoiseReducer = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    filter: [, , `Filter`],
    filterSettings: [, (_) => se_NoiseReducerFilterSettings(_, context), `FilterSettings`],
    spatialFilterSettings: [, (_) => se_NoiseReducerSpatialFilterSettings(_, context), `SpatialFilterSettings`],
    temporalFilterSettings: [, (_) => se_NoiseReducerTemporalFilterSettings(_, context), `TemporalFilterSettings`]
  });
}, "se_NoiseReducer");
var se_NoiseReducerFilterSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    strength: [, , `Strength`]
  });
}, "se_NoiseReducerFilterSettings");
var se_NoiseReducerSpatialFilterSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    postFilterSharpenStrength: [, , `PostFilterSharpenStrength`],
    speed: [, , `Speed`],
    strength: [, , `Strength`]
  });
}, "se_NoiseReducerSpatialFilterSettings");
var se_NoiseReducerTemporalFilterSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    aggressiveMode: [, , `AggressiveMode`],
    postTemporalSharpening: [, , `PostTemporalSharpening`],
    postTemporalSharpeningStrength: [, , `PostTemporalSharpeningStrength`],
    speed: [, , `Speed`],
    strength: [, , `Strength`]
  });
}, "se_NoiseReducerTemporalFilterSettings");
var se_OpusSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitrate: [, , `Bitrate`],
    channels: [, , `Channels`],
    sampleRate: [, , `SampleRate`]
  });
}, "se_OpusSettings");
var se_Output = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioDescriptions: [, (_) => se___listOfAudioDescription(_, context), `AudioDescriptions`],
    captionDescriptions: [, (_) => se___listOfCaptionDescription(_, context), `CaptionDescriptions`],
    containerSettings: [, (_) => se_ContainerSettings(_, context), `ContainerSettings`],
    extension: [, , `Extension`],
    nameModifier: [, , `NameModifier`],
    outputSettings: [, (_) => se_OutputSettings(_, context), `OutputSettings`],
    preset: [, , `Preset`],
    videoDescription: [, (_) => se_VideoDescription(_, context), `VideoDescription`]
  });
}, "se_Output");
var se_OutputChannelMapping = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    inputChannels: [, import_smithy_client._json, `InputChannels`],
    inputChannelsFineTune: [, (_) => se___listOf__doubleMinNegative60Max6(_, context), `InputChannelsFineTune`]
  });
}, "se_OutputChannelMapping");
var se_OutputGroup = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    automatedEncodingSettings: [, (_) => se_AutomatedEncodingSettings(_, context), `AutomatedEncodingSettings`],
    customName: [, , `CustomName`],
    name: [, , `Name`],
    outputGroupSettings: [, (_) => se_OutputGroupSettings(_, context), `OutputGroupSettings`],
    outputs: [, (_) => se___listOfOutput(_, context), `Outputs`]
  });
}, "se_OutputGroup");
var se_OutputGroupSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    cmafGroupSettings: [, (_) => se_CmafGroupSettings(_, context), `CmafGroupSettings`],
    dashIsoGroupSettings: [, (_) => se_DashIsoGroupSettings(_, context), `DashIsoGroupSettings`],
    fileGroupSettings: [, (_) => se_FileGroupSettings(_, context), `FileGroupSettings`],
    hlsGroupSettings: [, (_) => se_HlsGroupSettings(_, context), `HlsGroupSettings`],
    msSmoothGroupSettings: [, (_) => se_MsSmoothGroupSettings(_, context), `MsSmoothGroupSettings`],
    perFrameMetrics: [, import_smithy_client._json, `PerFrameMetrics`],
    type: [, , `Type`]
  });
}, "se_OutputGroupSettings");
var se_OutputSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    hlsSettings: [, (_) => se_HlsSettings(_, context), `HlsSettings`]
  });
}, "se_OutputSettings");
var se_PartnerWatermarking = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    nexguardFileMarkerSettings: [, (_) => se_NexGuardFileMarkerSettings(_, context), `NexguardFileMarkerSettings`]
  });
}, "se_PartnerWatermarking");
var se_Policy = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    httpInputs: [, , `HttpInputs`],
    httpsInputs: [, , `HttpsInputs`],
    s3Inputs: [, , `S3Inputs`]
  });
}, "se_Policy");
var se_PresetSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioDescriptions: [, (_) => se___listOfAudioDescription(_, context), `AudioDescriptions`],
    captionDescriptions: [, (_) => se___listOfCaptionDescriptionPreset(_, context), `CaptionDescriptions`],
    containerSettings: [, (_) => se_ContainerSettings(_, context), `ContainerSettings`],
    videoDescription: [, (_) => se_VideoDescription(_, context), `VideoDescription`]
  });
}, "se_PresetSettings");
var se_ProbeInputFile = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    fileUrl: [, , `FileUrl`]
  });
}, "se_ProbeInputFile");
var se_ProresSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    chromaSampling: [, , `ChromaSampling`],
    codecProfile: [, , `CodecProfile`],
    framerateControl: [, , `FramerateControl`],
    framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    interlaceMode: [, , `InterlaceMode`],
    parControl: [, , `ParControl`],
    parDenominator: [, , `ParDenominator`],
    parNumerator: [, , `ParNumerator`],
    perFrameMetrics: [, import_smithy_client._json, `PerFrameMetrics`],
    scanTypeConversionMode: [, , `ScanTypeConversionMode`],
    slowPal: [, , `SlowPal`],
    telecine: [, , `Telecine`]
  });
}, "se_ProresSettings");
var se_Rectangle = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    height: [, , `Height`],
    width: [, , `Width`],
    x: [, , `X`],
    y: [, , `Y`]
  });
}, "se_Rectangle");
var se_RemixSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    audioDescriptionAudioChannel: [, , `AudioDescriptionAudioChannel`],
    audioDescriptionDataChannel: [, , `AudioDescriptionDataChannel`],
    channelMapping: [, (_) => se_ChannelMapping(_, context), `ChannelMapping`],
    channelsIn: [, , `ChannelsIn`],
    channelsOut: [, , `ChannelsOut`]
  });
}, "se_RemixSettings");
var se_ReservationPlanSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    commitment: [, , `Commitment`],
    renewalType: [, , `RenewalType`],
    reservedSlots: [, , `ReservedSlots`]
  });
}, "se_ReservationPlanSettings");
var se_S3DestinationAccessControl = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    cannedAcl: [, , `CannedAcl`]
  });
}, "se_S3DestinationAccessControl");
var se_S3DestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    accessControl: [, (_) => se_S3DestinationAccessControl(_, context), `AccessControl`],
    encryption: [, (_) => se_S3EncryptionSettings(_, context), `Encryption`],
    storageClass: [, , `StorageClass`]
  });
}, "se_S3DestinationSettings");
var se_S3EncryptionSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    encryptionType: [, , `EncryptionType`],
    kmsEncryptionContext: [, , `KmsEncryptionContext`],
    kmsKeyArn: [, , `KmsKeyArn`]
  });
}, "se_S3EncryptionSettings");
var se_SccDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    framerate: [, , `Framerate`]
  });
}, "se_SccDestinationSettings");
var se_SpekeKeyProvider = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    certificateArn: [, , `CertificateArn`],
    encryptionContractConfiguration: [
      ,
      (_) => se_EncryptionContractConfiguration(_, context),
      `EncryptionContractConfiguration`
    ],
    resourceId: [, , `ResourceId`],
    systemIds: [, import_smithy_client._json, `SystemIds`],
    url: [, , `Url`]
  });
}, "se_SpekeKeyProvider");
var se_SpekeKeyProviderCmaf = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    certificateArn: [, , `CertificateArn`],
    dashSignaledSystemIds: [, import_smithy_client._json, `DashSignaledSystemIds`],
    encryptionContractConfiguration: [
      ,
      (_) => se_EncryptionContractConfiguration(_, context),
      `EncryptionContractConfiguration`
    ],
    hlsSignaledSystemIds: [, import_smithy_client._json, `HlsSignaledSystemIds`],
    resourceId: [, , `ResourceId`],
    url: [, , `Url`]
  });
}, "se_SpekeKeyProviderCmaf");
var se_SrtDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    stylePassthrough: [, , `StylePassthrough`]
  });
}, "se_SrtDestinationSettings");
var se_StaticKeyProvider = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    keyFormat: [, , `KeyFormat`],
    keyFormatVersions: [, , `KeyFormatVersions`],
    staticKeyValue: [, , `StaticKeyValue`],
    url: [, , `Url`]
  });
}, "se_StaticKeyProvider");
var se_TeletextDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    pageNumber: [, , `PageNumber`],
    pageTypes: [, import_smithy_client._json, `PageTypes`]
  });
}, "se_TeletextDestinationSettings");
var se_TeletextSourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    pageNumber: [, , `PageNumber`]
  });
}, "se_TeletextSourceSettings");
var se_TimecodeBurnin = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    fontSize: [, , `FontSize`],
    position: [, , `Position`],
    prefix: [, , `Prefix`]
  });
}, "se_TimecodeBurnin");
var se_TimecodeConfig = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    anchor: [, , `Anchor`],
    source: [, , `Source`],
    start: [, , `Start`],
    timestampOffset: [, , `TimestampOffset`]
  });
}, "se_TimecodeConfig");
var se_TimedMetadataInsertion = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    id3Insertions: [, (_) => se___listOfId3Insertion(_, context), `Id3Insertions`]
  });
}, "se_TimedMetadataInsertion");
var se_TrackSourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    trackNumber: [, , `TrackNumber`]
  });
}, "se_TrackSourceSettings");
var se_TtmlDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    stylePassthrough: [, , `StylePassthrough`]
  });
}, "se_TtmlDestinationSettings");
var se_UncompressedSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    fourcc: [, , `Fourcc`],
    framerateControl: [, , `FramerateControl`],
    framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    interlaceMode: [, , `InterlaceMode`],
    scanTypeConversionMode: [, , `ScanTypeConversionMode`],
    slowPal: [, , `SlowPal`],
    telecine: [, , `Telecine`]
  });
}, "se_UncompressedSettings");
var se_Vc3Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    framerateControl: [, , `FramerateControl`],
    framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    interlaceMode: [, , `InterlaceMode`],
    scanTypeConversionMode: [, , `ScanTypeConversionMode`],
    slowPal: [, , `SlowPal`],
    telecine: [, , `Telecine`],
    vc3Class: [, , `Vc3Class`]
  });
}, "se_Vc3Settings");
var se_VideoCodecSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    av1Settings: [, (_) => se_Av1Settings(_, context), `Av1Settings`],
    avcIntraSettings: [, (_) => se_AvcIntraSettings(_, context), `AvcIntraSettings`],
    codec: [, , `Codec`],
    frameCaptureSettings: [, (_) => se_FrameCaptureSettings(_, context), `FrameCaptureSettings`],
    gifSettings: [, (_) => se_GifSettings(_, context), `GifSettings`],
    h264Settings: [, (_) => se_H264Settings(_, context), `H264Settings`],
    h265Settings: [, (_) => se_H265Settings(_, context), `H265Settings`],
    mpeg2Settings: [, (_) => se_Mpeg2Settings(_, context), `Mpeg2Settings`],
    proresSettings: [, (_) => se_ProresSettings(_, context), `ProresSettings`],
    uncompressedSettings: [, (_) => se_UncompressedSettings(_, context), `UncompressedSettings`],
    vc3Settings: [, (_) => se_Vc3Settings(_, context), `Vc3Settings`],
    vp8Settings: [, (_) => se_Vp8Settings(_, context), `Vp8Settings`],
    vp9Settings: [, (_) => se_Vp9Settings(_, context), `Vp9Settings`],
    xavcSettings: [, (_) => se_XavcSettings(_, context), `XavcSettings`]
  });
}, "se_VideoCodecSettings");
var se_VideoDescription = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    afdSignaling: [, , `AfdSignaling`],
    antiAlias: [, , `AntiAlias`],
    chromaPositionMode: [, , `ChromaPositionMode`],
    codecSettings: [, (_) => se_VideoCodecSettings(_, context), `CodecSettings`],
    colorMetadata: [, , `ColorMetadata`],
    crop: [, (_) => se_Rectangle(_, context), `Crop`],
    dropFrameTimecode: [, , `DropFrameTimecode`],
    fixedAfd: [, , `FixedAfd`],
    height: [, , `Height`],
    position: [, (_) => se_Rectangle(_, context), `Position`],
    respondToAfd: [, , `RespondToAfd`],
    scalingBehavior: [, , `ScalingBehavior`],
    sharpness: [, , `Sharpness`],
    timecodeInsertion: [, , `TimecodeInsertion`],
    timecodeTrack: [, , `TimecodeTrack`],
    videoPreprocessors: [, (_) => se_VideoPreprocessor(_, context), `VideoPreprocessors`],
    width: [, , `Width`]
  });
}, "se_VideoDescription");
var se_VideoOverlay = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    crop: [, (_) => se_VideoOverlayCrop(_, context), `Crop`],
    endTimecode: [, , `EndTimecode`],
    initialPosition: [, (_) => se_VideoOverlayPosition(_, context), `InitialPosition`],
    input: [, (_) => se_VideoOverlayInput(_, context), `Input`],
    playback: [, , `Playback`],
    startTimecode: [, , `StartTimecode`],
    transitions: [, (_) => se___listOfVideoOverlayTransition(_, context), `Transitions`]
  });
}, "se_VideoOverlay");
var se_VideoOverlayCrop = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    height: [, , `Height`],
    unit: [, , `Unit`],
    width: [, , `Width`],
    x: [, , `X`],
    y: [, , `Y`]
  });
}, "se_VideoOverlayCrop");
var se_VideoOverlayInput = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    fileInput: [, , `FileInput`],
    inputClippings: [, (_) => se___listOfVideoOverlayInputClipping(_, context), `InputClippings`],
    timecodeSource: [, , `TimecodeSource`],
    timecodeStart: [, , `TimecodeStart`]
  });
}, "se_VideoOverlayInput");
var se_VideoOverlayInputClipping = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    endTimecode: [, , `EndTimecode`],
    startTimecode: [, , `StartTimecode`]
  });
}, "se_VideoOverlayInputClipping");
var se_VideoOverlayPosition = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    height: [, , `Height`],
    unit: [, , `Unit`],
    width: [, , `Width`],
    xPosition: [, , `XPosition`],
    yPosition: [, , `YPosition`]
  });
}, "se_VideoOverlayPosition");
var se_VideoOverlayTransition = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    endPosition: [, (_) => se_VideoOverlayPosition(_, context), `EndPosition`],
    endTimecode: [, , `EndTimecode`],
    startTimecode: [, , `StartTimecode`]
  });
}, "se_VideoOverlayTransition");
var se_VideoPreprocessor = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    colorCorrector: [, (_) => se_ColorCorrector(_, context), `ColorCorrector`],
    deinterlacer: [, (_) => se_Deinterlacer(_, context), `Deinterlacer`],
    dolbyVision: [, (_) => se_DolbyVision(_, context), `DolbyVision`],
    hdr10Plus: [, (_) => se_Hdr10Plus(_, context), `Hdr10Plus`],
    imageInserter: [, (_) => se_ImageInserter(_, context), `ImageInserter`],
    noiseReducer: [, (_) => se_NoiseReducer(_, context), `NoiseReducer`],
    partnerWatermarking: [, (_) => se_PartnerWatermarking(_, context), `PartnerWatermarking`],
    timecodeBurnin: [, (_) => se_TimecodeBurnin(_, context), `TimecodeBurnin`]
  });
}, "se_VideoPreprocessor");
var se_VideoSelector = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    alphaBehavior: [, , `AlphaBehavior`],
    colorSpace: [, , `ColorSpace`],
    colorSpaceUsage: [, , `ColorSpaceUsage`],
    embeddedTimecodeOverride: [, , `EmbeddedTimecodeOverride`],
    hdr10Metadata: [, (_) => se_Hdr10Metadata(_, context), `Hdr10Metadata`],
    maxLuminance: [, , `MaxLuminance`],
    padVideo: [, , `PadVideo`],
    pid: [, , `Pid`],
    programNumber: [, , `ProgramNumber`],
    rotate: [, , `Rotate`],
    sampleRange: [, , `SampleRange`]
  });
}, "se_VideoSelector");
var se_VorbisSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    channels: [, , `Channels`],
    sampleRate: [, , `SampleRate`],
    vbrQuality: [, , `VbrQuality`]
  });
}, "se_VorbisSettings");
var se_Vp8Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitrate: [, , `Bitrate`],
    framerateControl: [, , `FramerateControl`],
    framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    gopSize: [, import_smithy_client.serializeFloat, `GopSize`],
    hrdBufferSize: [, , `HrdBufferSize`],
    maxBitrate: [, , `MaxBitrate`],
    parControl: [, , `ParControl`],
    parDenominator: [, , `ParDenominator`],
    parNumerator: [, , `ParNumerator`],
    qualityTuningLevel: [, , `QualityTuningLevel`],
    rateControlMode: [, , `RateControlMode`]
  });
}, "se_Vp8Settings");
var se_Vp9Settings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitrate: [, , `Bitrate`],
    framerateControl: [, , `FramerateControl`],
    framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    gopSize: [, import_smithy_client.serializeFloat, `GopSize`],
    hrdBufferSize: [, , `HrdBufferSize`],
    maxBitrate: [, , `MaxBitrate`],
    parControl: [, , `ParControl`],
    parDenominator: [, , `ParDenominator`],
    parNumerator: [, , `ParNumerator`],
    qualityTuningLevel: [, , `QualityTuningLevel`],
    rateControlMode: [, , `RateControlMode`]
  });
}, "se_Vp9Settings");
var se_WavSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitDepth: [, , `BitDepth`],
    channels: [, , `Channels`],
    format: [, , `Format`],
    sampleRate: [, , `SampleRate`]
  });
}, "se_WavSettings");
var se_WebvttDestinationSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    accessibility: [, , `Accessibility`],
    stylePassthrough: [, , `StylePassthrough`]
  });
}, "se_WebvttDestinationSettings");
var se_WebvttHlsSourceSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    renditionGroupId: [, , `RenditionGroupId`],
    renditionLanguageCode: [, , `RenditionLanguageCode`],
    renditionName: [, , `RenditionName`]
  });
}, "se_WebvttHlsSourceSettings");
var se_Xavc4kIntraCbgProfileSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    xavcClass: [, , `XavcClass`]
  });
}, "se_Xavc4kIntraCbgProfileSettings");
var se_Xavc4kIntraVbrProfileSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    xavcClass: [, , `XavcClass`]
  });
}, "se_Xavc4kIntraVbrProfileSettings");
var se_Xavc4kProfileSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitrateClass: [, , `BitrateClass`],
    codecProfile: [, , `CodecProfile`],
    flickerAdaptiveQuantization: [, , `FlickerAdaptiveQuantization`],
    gopBReference: [, , `GopBReference`],
    gopClosedCadence: [, , `GopClosedCadence`],
    hrdBufferSize: [, , `HrdBufferSize`],
    qualityTuningLevel: [, , `QualityTuningLevel`],
    slices: [, , `Slices`]
  });
}, "se_Xavc4kProfileSettings");
var se_XavcHdIntraCbgProfileSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    xavcClass: [, , `XavcClass`]
  });
}, "se_XavcHdIntraCbgProfileSettings");
var se_XavcHdProfileSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    bitrateClass: [, , `BitrateClass`],
    flickerAdaptiveQuantization: [, , `FlickerAdaptiveQuantization`],
    gopBReference: [, , `GopBReference`],
    gopClosedCadence: [, , `GopClosedCadence`],
    hrdBufferSize: [, , `HrdBufferSize`],
    interlaceMode: [, , `InterlaceMode`],
    qualityTuningLevel: [, , `QualityTuningLevel`],
    slices: [, , `Slices`],
    telecine: [, , `Telecine`]
  });
}, "se_XavcHdProfileSettings");
var se_XavcSettings = /* @__PURE__ */ __name((input, context) => {
  return (0, import_smithy_client.take)(input, {
    adaptiveQuantization: [, , `AdaptiveQuantization`],
    entropyEncoding: [, , `EntropyEncoding`],
    framerateControl: [, , `FramerateControl`],
    framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
    framerateDenominator: [, , `FramerateDenominator`],
    framerateNumerator: [, , `FramerateNumerator`],
    perFrameMetrics: [, import_smithy_client._json, `PerFrameMetrics`],
    profile: [, , `Profile`],
    slowPal: [, , `SlowPal`],
    softness: [, , `Softness`],
    spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
    temporalAdaptiveQuantization: [, , `TemporalAdaptiveQuantization`],
    xavc4kIntraCbgProfileSettings: [
      ,
      (_) => se_Xavc4kIntraCbgProfileSettings(_, context),
      `Xavc4kIntraCbgProfileSettings`
    ],
    xavc4kIntraVbrProfileSettings: [
      ,
      (_) => se_Xavc4kIntraVbrProfileSettings(_, context),
      `Xavc4kIntraVbrProfileSettings`
    ],
    xavc4kProfileSettings: [, (_) => se_Xavc4kProfileSettings(_, context), `Xavc4kProfileSettings`],
    xavcHdIntraCbgProfileSettings: [
      ,
      (_) => se_XavcHdIntraCbgProfileSettings(_, context),
      `XavcHdIntraCbgProfileSettings`
    ],
    xavcHdProfileSettings: [, (_) => se_XavcHdProfileSettings(_, context), `XavcHdProfileSettings`]
  });
}, "se_XavcSettings");
var de___listOf__doubleMinNegative60Max6 = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return (0, import_smithy_client.limitedParseDouble)(entry);
  });
  return retVal;
}, "de___listOf__doubleMinNegative60Max6");
var de___listOfAllowedRenditionSize = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AllowedRenditionSize(entry, context);
  });
  return retVal;
}, "de___listOfAllowedRenditionSize");
var de___listOfAudioDescription = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AudioDescription(entry, context);
  });
  return retVal;
}, "de___listOfAudioDescription");
var de___listOfAutomatedAbrRule = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_AutomatedAbrRule(entry, context);
  });
  return retVal;
}, "de___listOfAutomatedAbrRule");
var de___listOfCaptionDescription = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_CaptionDescription(entry, context);
  });
  return retVal;
}, "de___listOfCaptionDescription");
var de___listOfCaptionDescriptionPreset = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_CaptionDescriptionPreset(entry, context);
  });
  return retVal;
}, "de___listOfCaptionDescriptionPreset");
var de___listOfCmafAdditionalManifest = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_CmafAdditionalManifest(entry, context);
  });
  return retVal;
}, "de___listOfCmafAdditionalManifest");
var de___listOfColorConversion3DLUTSetting = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ColorConversion3DLUTSetting(entry, context);
  });
  return retVal;
}, "de___listOfColorConversion3DLUTSetting");
var de___listOfDashAdditionalManifest = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_DashAdditionalManifest(entry, context);
  });
  return retVal;
}, "de___listOfDashAdditionalManifest");
var de___listOfEndpoint = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Endpoint(entry, context);
  });
  return retVal;
}, "de___listOfEndpoint");
var de___listOfForceIncludeRenditionSize = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ForceIncludeRenditionSize(entry, context);
  });
  return retVal;
}, "de___listOfForceIncludeRenditionSize");
var de___listOfHlsAdditionalManifest = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_HlsAdditionalManifest(entry, context);
  });
  return retVal;
}, "de___listOfHlsAdditionalManifest");
var de___listOfHlsCaptionLanguageMapping = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_HlsCaptionLanguageMapping(entry, context);
  });
  return retVal;
}, "de___listOfHlsCaptionLanguageMapping");
var de___listOfHopDestination = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_HopDestination(entry, context);
  });
  return retVal;
}, "de___listOfHopDestination");
var de___listOfId3Insertion = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Id3Insertion(entry, context);
  });
  return retVal;
}, "de___listOfId3Insertion");
var de___listOfInput = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Input(entry, context);
  });
  return retVal;
}, "de___listOfInput");
var de___listOfInputClipping = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InputClipping(entry, context);
  });
  return retVal;
}, "de___listOfInputClipping");
var de___listOfInputTemplate = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InputTemplate(entry, context);
  });
  return retVal;
}, "de___listOfInputTemplate");
var de___listOfInsertableImage = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_InsertableImage(entry, context);
  });
  return retVal;
}, "de___listOfInsertableImage");
var de___listOfJob = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Job(entry, context);
  });
  return retVal;
}, "de___listOfJob");
var de___listOfJobEngineVersion = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_JobEngineVersion(entry, context);
  });
  return retVal;
}, "de___listOfJobEngineVersion");
var de___listOfJobTemplate = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_JobTemplate(entry, context);
  });
  return retVal;
}, "de___listOfJobTemplate");
var de___listOfMsSmoothAdditionalManifest = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_MsSmoothAdditionalManifest(entry, context);
  });
  return retVal;
}, "de___listOfMsSmoothAdditionalManifest");
var de___listOfOutput = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Output(entry, context);
  });
  return retVal;
}, "de___listOfOutput");
var de___listOfOutputChannelMapping = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_OutputChannelMapping(entry, context);
  });
  return retVal;
}, "de___listOfOutputChannelMapping");
var de___listOfOutputDetail = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_OutputDetail(entry, context);
  });
  return retVal;
}, "de___listOfOutputDetail");
var de___listOfOutputGroup = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_OutputGroup(entry, context);
  });
  return retVal;
}, "de___listOfOutputGroup");
var de___listOfOutputGroupDetail = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_OutputGroupDetail(entry, context);
  });
  return retVal;
}, "de___listOfOutputGroupDetail");
var de___listOfPreset = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Preset(entry, context);
  });
  return retVal;
}, "de___listOfPreset");
var de___listOfProbeResult = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ProbeResult(entry, context);
  });
  return retVal;
}, "de___listOfProbeResult");
var de___listOfQueue = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Queue(entry, context);
  });
  return retVal;
}, "de___listOfQueue");
var de___listOfQueueTransition = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_QueueTransition(entry, context);
  });
  return retVal;
}, "de___listOfQueueTransition");
var de___listOfServiceOverride = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_ServiceOverride(entry, context);
  });
  return retVal;
}, "de___listOfServiceOverride");
var de___listOfTrack = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_Track(entry, context);
  });
  return retVal;
}, "de___listOfTrack");
var de___listOfTrackMapping = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_TrackMapping(entry, context);
  });
  return retVal;
}, "de___listOfTrackMapping");
var de___listOfVideoOverlay = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_VideoOverlay(entry, context);
  });
  return retVal;
}, "de___listOfVideoOverlay");
var de___listOfVideoOverlayInputClipping = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_VideoOverlayInputClipping(entry, context);
  });
  return retVal;
}, "de___listOfVideoOverlayInputClipping");
var de___listOfVideoOverlayTransition = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_VideoOverlayTransition(entry, context);
  });
  return retVal;
}, "de___listOfVideoOverlayTransition");
var de___listOfWarningGroup = /* @__PURE__ */ __name((output, context) => {
  const retVal = (output || []).filter((e) => e != null).map((entry) => {
    return de_WarningGroup(entry, context);
  });
  return retVal;
}, "de___listOfWarningGroup");
var de___mapOfAudioSelector = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_AudioSelector(value, context);
    return acc;
  }, {});
}, "de___mapOfAudioSelector");
var de___mapOfAudioSelectorGroup = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_AudioSelectorGroup(value, context);
    return acc;
  }, {});
}, "de___mapOfAudioSelectorGroup");
var de___mapOfCaptionSelector = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_CaptionSelector(value, context);
    return acc;
  }, {});
}, "de___mapOfCaptionSelector");
var de___mapOfDynamicAudioSelector = /* @__PURE__ */ __name((output, context) => {
  return Object.entries(output).reduce((acc, [key, value]) => {
    if (value === null) {
      return acc;
    }
    acc[key] = de_DynamicAudioSelector(value, context);
    return acc;
  }, {});
}, "de___mapOfDynamicAudioSelector");
var de_AacSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioDescriptionBroadcasterMix: [, import_smithy_client.expectString, `audioDescriptionBroadcasterMix`],
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    CodecProfile: [, import_smithy_client.expectString, `codecProfile`],
    CodingMode: [, import_smithy_client.expectString, `codingMode`],
    RateControlMode: [, import_smithy_client.expectString, `rateControlMode`],
    RawFormat: [, import_smithy_client.expectString, `rawFormat`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`],
    Specification: [, import_smithy_client.expectString, `specification`],
    VbrQuality: [, import_smithy_client.expectString, `vbrQuality`]
  });
}, "de_AacSettings");
var de_Ac3Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    BitstreamMode: [, import_smithy_client.expectString, `bitstreamMode`],
    CodingMode: [, import_smithy_client.expectString, `codingMode`],
    Dialnorm: [, import_smithy_client.expectInt32, `dialnorm`],
    DynamicRangeCompressionLine: [, import_smithy_client.expectString, `dynamicRangeCompressionLine`],
    DynamicRangeCompressionProfile: [, import_smithy_client.expectString, `dynamicRangeCompressionProfile`],
    DynamicRangeCompressionRf: [, import_smithy_client.expectString, `dynamicRangeCompressionRf`],
    LfeFilter: [, import_smithy_client.expectString, `lfeFilter`],
    MetadataControl: [, import_smithy_client.expectString, `metadataControl`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`]
  });
}, "de_Ac3Settings");
var de_AccelerationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Mode: [, import_smithy_client.expectString, `mode`]
  });
}, "de_AccelerationSettings");
var de_AdvancedInputFilterSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AddTexture: [, import_smithy_client.expectString, `addTexture`],
    Sharpening: [, import_smithy_client.expectString, `sharpening`]
  });
}, "de_AdvancedInputFilterSettings");
var de_AiffSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BitDepth: [, import_smithy_client.expectInt32, `bitDepth`],
    Channels: [, import_smithy_client.expectInt32, `channels`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`]
  });
}, "de_AiffSettings");
var de_AllowedRenditionSize = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Height: [, import_smithy_client.expectInt32, `height`],
    Required: [, import_smithy_client.expectString, `required`],
    Width: [, import_smithy_client.expectInt32, `width`]
  });
}, "de_AllowedRenditionSize");
var de_AncillarySourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Convert608To708: [, import_smithy_client.expectString, `convert608To708`],
    SourceAncillaryChannelNumber: [, import_smithy_client.expectInt32, `sourceAncillaryChannelNumber`],
    TerminateCaptions: [, import_smithy_client.expectString, `terminateCaptions`]
  });
}, "de_AncillarySourceSettings");
var de_AudioChannelTaggingSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ChannelTag: [, import_smithy_client.expectString, `channelTag`],
    ChannelTags: [, import_smithy_client._json, `channelTags`]
  });
}, "de_AudioChannelTaggingSettings");
var de_AudioCodecSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AacSettings: [, (_) => de_AacSettings(_, context), `aacSettings`],
    Ac3Settings: [, (_) => de_Ac3Settings(_, context), `ac3Settings`],
    AiffSettings: [, (_) => de_AiffSettings(_, context), `aiffSettings`],
    Codec: [, import_smithy_client.expectString, `codec`],
    Eac3AtmosSettings: [, (_) => de_Eac3AtmosSettings(_, context), `eac3AtmosSettings`],
    Eac3Settings: [, (_) => de_Eac3Settings(_, context), `eac3Settings`],
    FlacSettings: [, (_) => de_FlacSettings(_, context), `flacSettings`],
    Mp2Settings: [, (_) => de_Mp2Settings(_, context), `mp2Settings`],
    Mp3Settings: [, (_) => de_Mp3Settings(_, context), `mp3Settings`],
    OpusSettings: [, (_) => de_OpusSettings(_, context), `opusSettings`],
    VorbisSettings: [, (_) => de_VorbisSettings(_, context), `vorbisSettings`],
    WavSettings: [, (_) => de_WavSettings(_, context), `wavSettings`]
  });
}, "de_AudioCodecSettings");
var de_AudioDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioChannelTaggingSettings: [
      ,
      (_) => de_AudioChannelTaggingSettings(_, context),
      `audioChannelTaggingSettings`
    ],
    AudioNormalizationSettings: [, (_) => de_AudioNormalizationSettings(_, context), `audioNormalizationSettings`],
    AudioSourceName: [, import_smithy_client.expectString, `audioSourceName`],
    AudioType: [, import_smithy_client.expectInt32, `audioType`],
    AudioTypeControl: [, import_smithy_client.expectString, `audioTypeControl`],
    CodecSettings: [, (_) => de_AudioCodecSettings(_, context), `codecSettings`],
    CustomLanguageCode: [, import_smithy_client.expectString, `customLanguageCode`],
    LanguageCode: [, import_smithy_client.expectString, `languageCode`],
    LanguageCodeControl: [, import_smithy_client.expectString, `languageCodeControl`],
    RemixSettings: [, (_) => de_RemixSettings(_, context), `remixSettings`],
    StreamName: [, import_smithy_client.expectString, `streamName`]
  });
}, "de_AudioDescription");
var de_AudioNormalizationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Algorithm: [, import_smithy_client.expectString, `algorithm`],
    AlgorithmControl: [, import_smithy_client.expectString, `algorithmControl`],
    CorrectionGateLevel: [, import_smithy_client.expectInt32, `correctionGateLevel`],
    LoudnessLogging: [, import_smithy_client.expectString, `loudnessLogging`],
    PeakCalculation: [, import_smithy_client.expectString, `peakCalculation`],
    TargetLkfs: [, import_smithy_client.limitedParseDouble, `targetLkfs`],
    TruePeakLimiterThreshold: [, import_smithy_client.limitedParseDouble, `truePeakLimiterThreshold`]
  });
}, "de_AudioNormalizationSettings");
var de_AudioProperties = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BitDepth: [, import_smithy_client.expectInt32, `bitDepth`],
    BitRate: [, import_smithy_client.expectLong, `bitRate`],
    Channels: [, import_smithy_client.expectInt32, `channels`],
    FrameRate: [, (_) => de_FrameRate(_, context), `frameRate`],
    LanguageCode: [, import_smithy_client.expectString, `languageCode`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`]
  });
}, "de_AudioProperties");
var de_AudioSelector = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioDurationCorrection: [, import_smithy_client.expectString, `audioDurationCorrection`],
    CustomLanguageCode: [, import_smithy_client.expectString, `customLanguageCode`],
    DefaultSelection: [, import_smithy_client.expectString, `defaultSelection`],
    ExternalAudioFileInput: [, import_smithy_client.expectString, `externalAudioFileInput`],
    HlsRenditionGroupSettings: [, (_) => de_HlsRenditionGroupSettings(_, context), `hlsRenditionGroupSettings`],
    LanguageCode: [, import_smithy_client.expectString, `languageCode`],
    Offset: [, import_smithy_client.expectInt32, `offset`],
    Pids: [, import_smithy_client._json, `pids`],
    ProgramSelection: [, import_smithy_client.expectInt32, `programSelection`],
    RemixSettings: [, (_) => de_RemixSettings(_, context), `remixSettings`],
    SelectorType: [, import_smithy_client.expectString, `selectorType`],
    Tracks: [, import_smithy_client._json, `tracks`]
  });
}, "de_AudioSelector");
var de_AudioSelectorGroup = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioSelectorNames: [, import_smithy_client._json, `audioSelectorNames`]
  });
}, "de_AudioSelectorGroup");
var de_AutomatedAbrRule = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AllowedRenditions: [, (_) => de___listOfAllowedRenditionSize(_, context), `allowedRenditions`],
    ForceIncludeRenditions: [, (_) => de___listOfForceIncludeRenditionSize(_, context), `forceIncludeRenditions`],
    MinBottomRenditionSize: [, (_) => de_MinBottomRenditionSize(_, context), `minBottomRenditionSize`],
    MinTopRenditionSize: [, (_) => de_MinTopRenditionSize(_, context), `minTopRenditionSize`],
    Type: [, import_smithy_client.expectString, `type`]
  });
}, "de_AutomatedAbrRule");
var de_AutomatedAbrSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MaxAbrBitrate: [, import_smithy_client.expectInt32, `maxAbrBitrate`],
    MaxQualityLevel: [, import_smithy_client.limitedParseDouble, `maxQualityLevel`],
    MaxRenditions: [, import_smithy_client.expectInt32, `maxRenditions`],
    MinAbrBitrate: [, import_smithy_client.expectInt32, `minAbrBitrate`],
    Rules: [, (_) => de___listOfAutomatedAbrRule(_, context), `rules`]
  });
}, "de_AutomatedAbrSettings");
var de_AutomatedEncodingSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AbrSettings: [, (_) => de_AutomatedAbrSettings(_, context), `abrSettings`]
  });
}, "de_AutomatedEncodingSettings");
var de_Av1QvbrSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    QvbrQualityLevel: [, import_smithy_client.expectInt32, `qvbrQualityLevel`],
    QvbrQualityLevelFineTune: [, import_smithy_client.limitedParseDouble, `qvbrQualityLevelFineTune`]
  });
}, "de_Av1QvbrSettings");
var de_Av1Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdaptiveQuantization: [, import_smithy_client.expectString, `adaptiveQuantization`],
    BitDepth: [, import_smithy_client.expectString, `bitDepth`],
    FilmGrainSynthesis: [, import_smithy_client.expectString, `filmGrainSynthesis`],
    FramerateControl: [, import_smithy_client.expectString, `framerateControl`],
    FramerateConversionAlgorithm: [, import_smithy_client.expectString, `framerateConversionAlgorithm`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    GopSize: [, import_smithy_client.limitedParseDouble, `gopSize`],
    MaxBitrate: [, import_smithy_client.expectInt32, `maxBitrate`],
    NumberBFramesBetweenReferenceFrames: [, import_smithy_client.expectInt32, `numberBFramesBetweenReferenceFrames`],
    PerFrameMetrics: [, import_smithy_client._json, `perFrameMetrics`],
    QvbrSettings: [, (_) => de_Av1QvbrSettings(_, context), `qvbrSettings`],
    RateControlMode: [, import_smithy_client.expectString, `rateControlMode`],
    Slices: [, import_smithy_client.expectInt32, `slices`],
    SpatialAdaptiveQuantization: [, import_smithy_client.expectString, `spatialAdaptiveQuantization`]
  });
}, "de_Av1Settings");
var de_AvailBlanking = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AvailBlankingImage: [, import_smithy_client.expectString, `availBlankingImage`]
  });
}, "de_AvailBlanking");
var de_AvcIntraSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AvcIntraClass: [, import_smithy_client.expectString, `avcIntraClass`],
    AvcIntraUhdSettings: [, (_) => de_AvcIntraUhdSettings(_, context), `avcIntraUhdSettings`],
    FramerateControl: [, import_smithy_client.expectString, `framerateControl`],
    FramerateConversionAlgorithm: [, import_smithy_client.expectString, `framerateConversionAlgorithm`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    InterlaceMode: [, import_smithy_client.expectString, `interlaceMode`],
    PerFrameMetrics: [, import_smithy_client._json, `perFrameMetrics`],
    ScanTypeConversionMode: [, import_smithy_client.expectString, `scanTypeConversionMode`],
    SlowPal: [, import_smithy_client.expectString, `slowPal`],
    Telecine: [, import_smithy_client.expectString, `telecine`]
  });
}, "de_AvcIntraSettings");
var de_AvcIntraUhdSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    QualityTuningLevel: [, import_smithy_client.expectString, `qualityTuningLevel`]
  });
}, "de_AvcIntraUhdSettings");
var de_BandwidthReductionFilter = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Sharpening: [, import_smithy_client.expectString, `sharpening`],
    Strength: [, import_smithy_client.expectString, `strength`]
  });
}, "de_BandwidthReductionFilter");
var de_BurninDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Alignment: [, import_smithy_client.expectString, `alignment`],
    ApplyFontColor: [, import_smithy_client.expectString, `applyFontColor`],
    BackgroundColor: [, import_smithy_client.expectString, `backgroundColor`],
    BackgroundOpacity: [, import_smithy_client.expectInt32, `backgroundOpacity`],
    FallbackFont: [, import_smithy_client.expectString, `fallbackFont`],
    FontColor: [, import_smithy_client.expectString, `fontColor`],
    FontFileBold: [, import_smithy_client.expectString, `fontFileBold`],
    FontFileBoldItalic: [, import_smithy_client.expectString, `fontFileBoldItalic`],
    FontFileItalic: [, import_smithy_client.expectString, `fontFileItalic`],
    FontFileRegular: [, import_smithy_client.expectString, `fontFileRegular`],
    FontOpacity: [, import_smithy_client.expectInt32, `fontOpacity`],
    FontResolution: [, import_smithy_client.expectInt32, `fontResolution`],
    FontScript: [, import_smithy_client.expectString, `fontScript`],
    FontSize: [, import_smithy_client.expectInt32, `fontSize`],
    HexFontColor: [, import_smithy_client.expectString, `hexFontColor`],
    OutlineColor: [, import_smithy_client.expectString, `outlineColor`],
    OutlineSize: [, import_smithy_client.expectInt32, `outlineSize`],
    RemoveRubyReserveAttributes: [, import_smithy_client.expectString, `removeRubyReserveAttributes`],
    ShadowColor: [, import_smithy_client.expectString, `shadowColor`],
    ShadowOpacity: [, import_smithy_client.expectInt32, `shadowOpacity`],
    ShadowXOffset: [, import_smithy_client.expectInt32, `shadowXOffset`],
    ShadowYOffset: [, import_smithy_client.expectInt32, `shadowYOffset`],
    StylePassthrough: [, import_smithy_client.expectString, `stylePassthrough`],
    TeletextSpacing: [, import_smithy_client.expectString, `teletextSpacing`],
    XPosition: [, import_smithy_client.expectInt32, `xPosition`],
    YPosition: [, import_smithy_client.expectInt32, `yPosition`]
  });
}, "de_BurninDestinationSettings");
var de_CaptionDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CaptionSelectorName: [, import_smithy_client.expectString, `captionSelectorName`],
    CustomLanguageCode: [, import_smithy_client.expectString, `customLanguageCode`],
    DestinationSettings: [, (_) => de_CaptionDestinationSettings(_, context), `destinationSettings`],
    LanguageCode: [, import_smithy_client.expectString, `languageCode`],
    LanguageDescription: [, import_smithy_client.expectString, `languageDescription`]
  });
}, "de_CaptionDescription");
var de_CaptionDescriptionPreset = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CustomLanguageCode: [, import_smithy_client.expectString, `customLanguageCode`],
    DestinationSettings: [, (_) => de_CaptionDestinationSettings(_, context), `destinationSettings`],
    LanguageCode: [, import_smithy_client.expectString, `languageCode`],
    LanguageDescription: [, import_smithy_client.expectString, `languageDescription`]
  });
}, "de_CaptionDescriptionPreset");
var de_CaptionDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BurninDestinationSettings: [, (_) => de_BurninDestinationSettings(_, context), `burninDestinationSettings`],
    DestinationType: [, import_smithy_client.expectString, `destinationType`],
    DvbSubDestinationSettings: [, (_) => de_DvbSubDestinationSettings(_, context), `dvbSubDestinationSettings`],
    EmbeddedDestinationSettings: [
      ,
      (_) => de_EmbeddedDestinationSettings(_, context),
      `embeddedDestinationSettings`
    ],
    ImscDestinationSettings: [, (_) => de_ImscDestinationSettings(_, context), `imscDestinationSettings`],
    SccDestinationSettings: [, (_) => de_SccDestinationSettings(_, context), `sccDestinationSettings`],
    SrtDestinationSettings: [, (_) => de_SrtDestinationSettings(_, context), `srtDestinationSettings`],
    TeletextDestinationSettings: [
      ,
      (_) => de_TeletextDestinationSettings(_, context),
      `teletextDestinationSettings`
    ],
    TtmlDestinationSettings: [, (_) => de_TtmlDestinationSettings(_, context), `ttmlDestinationSettings`],
    WebvttDestinationSettings: [, (_) => de_WebvttDestinationSettings(_, context), `webvttDestinationSettings`]
  });
}, "de_CaptionDestinationSettings");
var de_CaptionSelector = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CustomLanguageCode: [, import_smithy_client.expectString, `customLanguageCode`],
    LanguageCode: [, import_smithy_client.expectString, `languageCode`],
    SourceSettings: [, (_) => de_CaptionSourceSettings(_, context), `sourceSettings`]
  });
}, "de_CaptionSelector");
var de_CaptionSourceFramerate = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`]
  });
}, "de_CaptionSourceFramerate");
var de_CaptionSourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AncillarySourceSettings: [, (_) => de_AncillarySourceSettings(_, context), `ancillarySourceSettings`],
    DvbSubSourceSettings: [, (_) => de_DvbSubSourceSettings(_, context), `dvbSubSourceSettings`],
    EmbeddedSourceSettings: [, (_) => de_EmbeddedSourceSettings(_, context), `embeddedSourceSettings`],
    FileSourceSettings: [, (_) => de_FileSourceSettings(_, context), `fileSourceSettings`],
    SourceType: [, import_smithy_client.expectString, `sourceType`],
    TeletextSourceSettings: [, (_) => de_TeletextSourceSettings(_, context), `teletextSourceSettings`],
    TrackSourceSettings: [, (_) => de_TrackSourceSettings(_, context), `trackSourceSettings`],
    WebvttHlsSourceSettings: [, (_) => de_WebvttHlsSourceSettings(_, context), `webvttHlsSourceSettings`]
  });
}, "de_CaptionSourceSettings");
var de_ChannelMapping = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    OutputChannels: [, (_) => de___listOfOutputChannelMapping(_, context), `outputChannels`]
  });
}, "de_ChannelMapping");
var de_ClipLimits = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MaximumRGBTolerance: [, import_smithy_client.expectInt32, `maximumRGBTolerance`],
    MaximumYUV: [, import_smithy_client.expectInt32, `maximumYUV`],
    MinimumRGBTolerance: [, import_smithy_client.expectInt32, `minimumRGBTolerance`],
    MinimumYUV: [, import_smithy_client.expectInt32, `minimumYUV`]
  });
}, "de_ClipLimits");
var de_CmafAdditionalManifest = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ManifestNameModifier: [, import_smithy_client.expectString, `manifestNameModifier`],
    SelectedOutputs: [, import_smithy_client._json, `selectedOutputs`]
  });
}, "de_CmafAdditionalManifest");
var de_CmafEncryptionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConstantInitializationVector: [, import_smithy_client.expectString, `constantInitializationVector`],
    EncryptionMethod: [, import_smithy_client.expectString, `encryptionMethod`],
    InitializationVectorInManifest: [, import_smithy_client.expectString, `initializationVectorInManifest`],
    SpekeKeyProvider: [, (_) => de_SpekeKeyProviderCmaf(_, context), `spekeKeyProvider`],
    StaticKeyProvider: [, (_) => de_StaticKeyProvider(_, context), `staticKeyProvider`],
    Type: [, import_smithy_client.expectString, `type`]
  });
}, "de_CmafEncryptionSettings");
var de_CmafGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdditionalManifests: [, (_) => de___listOfCmafAdditionalManifest(_, context), `additionalManifests`],
    BaseUrl: [, import_smithy_client.expectString, `baseUrl`],
    ClientCache: [, import_smithy_client.expectString, `clientCache`],
    CodecSpecification: [, import_smithy_client.expectString, `codecSpecification`],
    DashIFrameTrickPlayNameModifier: [, import_smithy_client.expectString, `dashIFrameTrickPlayNameModifier`],
    DashManifestStyle: [, import_smithy_client.expectString, `dashManifestStyle`],
    Destination: [, import_smithy_client.expectString, `destination`],
    DestinationSettings: [, (_) => de_DestinationSettings(_, context), `destinationSettings`],
    Encryption: [, (_) => de_CmafEncryptionSettings(_, context), `encryption`],
    FragmentLength: [, import_smithy_client.expectInt32, `fragmentLength`],
    ImageBasedTrickPlay: [, import_smithy_client.expectString, `imageBasedTrickPlay`],
    ImageBasedTrickPlaySettings: [
      ,
      (_) => de_CmafImageBasedTrickPlaySettings(_, context),
      `imageBasedTrickPlaySettings`
    ],
    ManifestCompression: [, import_smithy_client.expectString, `manifestCompression`],
    ManifestDurationFormat: [, import_smithy_client.expectString, `manifestDurationFormat`],
    MinBufferTime: [, import_smithy_client.expectInt32, `minBufferTime`],
    MinFinalSegmentLength: [, import_smithy_client.limitedParseDouble, `minFinalSegmentLength`],
    MpdManifestBandwidthType: [, import_smithy_client.expectString, `mpdManifestBandwidthType`],
    MpdProfile: [, import_smithy_client.expectString, `mpdProfile`],
    PtsOffsetHandlingForBFrames: [, import_smithy_client.expectString, `ptsOffsetHandlingForBFrames`],
    SegmentControl: [, import_smithy_client.expectString, `segmentControl`],
    SegmentLength: [, import_smithy_client.expectInt32, `segmentLength`],
    SegmentLengthControl: [, import_smithy_client.expectString, `segmentLengthControl`],
    StreamInfResolution: [, import_smithy_client.expectString, `streamInfResolution`],
    TargetDurationCompatibilityMode: [, import_smithy_client.expectString, `targetDurationCompatibilityMode`],
    VideoCompositionOffsets: [, import_smithy_client.expectString, `videoCompositionOffsets`],
    WriteDashManifest: [, import_smithy_client.expectString, `writeDashManifest`],
    WriteHlsManifest: [, import_smithy_client.expectString, `writeHlsManifest`],
    WriteSegmentTimelineInRepresentation: [, import_smithy_client.expectString, `writeSegmentTimelineInRepresentation`]
  });
}, "de_CmafGroupSettings");
var de_CmafImageBasedTrickPlaySettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    IntervalCadence: [, import_smithy_client.expectString, `intervalCadence`],
    ThumbnailHeight: [, import_smithy_client.expectInt32, `thumbnailHeight`],
    ThumbnailInterval: [, import_smithy_client.limitedParseDouble, `thumbnailInterval`],
    ThumbnailWidth: [, import_smithy_client.expectInt32, `thumbnailWidth`],
    TileHeight: [, import_smithy_client.expectInt32, `tileHeight`],
    TileWidth: [, import_smithy_client.expectInt32, `tileWidth`]
  });
}, "de_CmafImageBasedTrickPlaySettings");
var de_CmfcSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioDuration: [, import_smithy_client.expectString, `audioDuration`],
    AudioGroupId: [, import_smithy_client.expectString, `audioGroupId`],
    AudioRenditionSets: [, import_smithy_client.expectString, `audioRenditionSets`],
    AudioTrackType: [, import_smithy_client.expectString, `audioTrackType`],
    DescriptiveVideoServiceFlag: [, import_smithy_client.expectString, `descriptiveVideoServiceFlag`],
    IFrameOnlyManifest: [, import_smithy_client.expectString, `iFrameOnlyManifest`],
    KlvMetadata: [, import_smithy_client.expectString, `klvMetadata`],
    ManifestMetadataSignaling: [, import_smithy_client.expectString, `manifestMetadataSignaling`],
    Scte35Esam: [, import_smithy_client.expectString, `scte35Esam`],
    Scte35Source: [, import_smithy_client.expectString, `scte35Source`],
    TimedMetadata: [, import_smithy_client.expectString, `timedMetadata`],
    TimedMetadataBoxVersion: [, import_smithy_client.expectString, `timedMetadataBoxVersion`],
    TimedMetadataSchemeIdUri: [, import_smithy_client.expectString, `timedMetadataSchemeIdUri`],
    TimedMetadataValue: [, import_smithy_client.expectString, `timedMetadataValue`]
  });
}, "de_CmfcSettings");
var de_ColorConversion3DLUTSetting = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FileInput: [, import_smithy_client.expectString, `fileInput`],
    InputColorSpace: [, import_smithy_client.expectString, `inputColorSpace`],
    InputMasteringLuminance: [, import_smithy_client.expectInt32, `inputMasteringLuminance`],
    OutputColorSpace: [, import_smithy_client.expectString, `outputColorSpace`],
    OutputMasteringLuminance: [, import_smithy_client.expectInt32, `outputMasteringLuminance`]
  });
}, "de_ColorConversion3DLUTSetting");
var de_ColorCorrector = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Brightness: [, import_smithy_client.expectInt32, `brightness`],
    ClipLimits: [, (_) => de_ClipLimits(_, context), `clipLimits`],
    ColorSpaceConversion: [, import_smithy_client.expectString, `colorSpaceConversion`],
    Contrast: [, import_smithy_client.expectInt32, `contrast`],
    Hdr10Metadata: [, (_) => de_Hdr10Metadata(_, context), `hdr10Metadata`],
    HdrToSdrToneMapper: [, import_smithy_client.expectString, `hdrToSdrToneMapper`],
    Hue: [, import_smithy_client.expectInt32, `hue`],
    MaxLuminance: [, import_smithy_client.expectInt32, `maxLuminance`],
    SampleRangeConversion: [, import_smithy_client.expectString, `sampleRangeConversion`],
    Saturation: [, import_smithy_client.expectInt32, `saturation`],
    SdrReferenceWhiteLevel: [, import_smithy_client.expectInt32, `sdrReferenceWhiteLevel`]
  });
}, "de_ColorCorrector");
var de_Container = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Duration: [, import_smithy_client.limitedParseDouble, `duration`],
    Format: [, import_smithy_client.expectString, `format`],
    Tracks: [, (_) => de___listOfTrack(_, context), `tracks`]
  });
}, "de_Container");
var de_ContainerSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CmfcSettings: [, (_) => de_CmfcSettings(_, context), `cmfcSettings`],
    Container: [, import_smithy_client.expectString, `container`],
    F4vSettings: [, (_) => de_F4vSettings(_, context), `f4vSettings`],
    M2tsSettings: [, (_) => de_M2tsSettings(_, context), `m2tsSettings`],
    M3u8Settings: [, (_) => de_M3u8Settings(_, context), `m3u8Settings`],
    MovSettings: [, (_) => de_MovSettings(_, context), `movSettings`],
    Mp4Settings: [, (_) => de_Mp4Settings(_, context), `mp4Settings`],
    MpdSettings: [, (_) => de_MpdSettings(_, context), `mpdSettings`],
    MxfSettings: [, (_) => de_MxfSettings(_, context), `mxfSettings`]
  });
}, "de_ContainerSettings");
var de_DashAdditionalManifest = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ManifestNameModifier: [, import_smithy_client.expectString, `manifestNameModifier`],
    SelectedOutputs: [, import_smithy_client._json, `selectedOutputs`]
  });
}, "de_DashAdditionalManifest");
var de_DashIsoEncryptionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PlaybackDeviceCompatibility: [, import_smithy_client.expectString, `playbackDeviceCompatibility`],
    SpekeKeyProvider: [, (_) => de_SpekeKeyProvider(_, context), `spekeKeyProvider`]
  });
}, "de_DashIsoEncryptionSettings");
var de_DashIsoGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdditionalManifests: [, (_) => de___listOfDashAdditionalManifest(_, context), `additionalManifests`],
    AudioChannelConfigSchemeIdUri: [, import_smithy_client.expectString, `audioChannelConfigSchemeIdUri`],
    BaseUrl: [, import_smithy_client.expectString, `baseUrl`],
    DashIFrameTrickPlayNameModifier: [, import_smithy_client.expectString, `dashIFrameTrickPlayNameModifier`],
    DashManifestStyle: [, import_smithy_client.expectString, `dashManifestStyle`],
    Destination: [, import_smithy_client.expectString, `destination`],
    DestinationSettings: [, (_) => de_DestinationSettings(_, context), `destinationSettings`],
    Encryption: [, (_) => de_DashIsoEncryptionSettings(_, context), `encryption`],
    FragmentLength: [, import_smithy_client.expectInt32, `fragmentLength`],
    HbbtvCompliance: [, import_smithy_client.expectString, `hbbtvCompliance`],
    ImageBasedTrickPlay: [, import_smithy_client.expectString, `imageBasedTrickPlay`],
    ImageBasedTrickPlaySettings: [
      ,
      (_) => de_DashIsoImageBasedTrickPlaySettings(_, context),
      `imageBasedTrickPlaySettings`
    ],
    MinBufferTime: [, import_smithy_client.expectInt32, `minBufferTime`],
    MinFinalSegmentLength: [, import_smithy_client.limitedParseDouble, `minFinalSegmentLength`],
    MpdManifestBandwidthType: [, import_smithy_client.expectString, `mpdManifestBandwidthType`],
    MpdProfile: [, import_smithy_client.expectString, `mpdProfile`],
    PtsOffsetHandlingForBFrames: [, import_smithy_client.expectString, `ptsOffsetHandlingForBFrames`],
    SegmentControl: [, import_smithy_client.expectString, `segmentControl`],
    SegmentLength: [, import_smithy_client.expectInt32, `segmentLength`],
    SegmentLengthControl: [, import_smithy_client.expectString, `segmentLengthControl`],
    VideoCompositionOffsets: [, import_smithy_client.expectString, `videoCompositionOffsets`],
    WriteSegmentTimelineInRepresentation: [, import_smithy_client.expectString, `writeSegmentTimelineInRepresentation`]
  });
}, "de_DashIsoGroupSettings");
var de_DashIsoImageBasedTrickPlaySettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    IntervalCadence: [, import_smithy_client.expectString, `intervalCadence`],
    ThumbnailHeight: [, import_smithy_client.expectInt32, `thumbnailHeight`],
    ThumbnailInterval: [, import_smithy_client.limitedParseDouble, `thumbnailInterval`],
    ThumbnailWidth: [, import_smithy_client.expectInt32, `thumbnailWidth`],
    TileHeight: [, import_smithy_client.expectInt32, `tileHeight`],
    TileWidth: [, import_smithy_client.expectInt32, `tileWidth`]
  });
}, "de_DashIsoImageBasedTrickPlaySettings");
var de_DataProperties = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    LanguageCode: [, import_smithy_client.expectString, `languageCode`]
  });
}, "de_DataProperties");
var de_Deinterlacer = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Algorithm: [, import_smithy_client.expectString, `algorithm`],
    Control: [, import_smithy_client.expectString, `control`],
    Mode: [, import_smithy_client.expectString, `mode`]
  });
}, "de_Deinterlacer");
var de_DestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    S3Settings: [, (_) => de_S3DestinationSettings(_, context), `s3Settings`]
  });
}, "de_DestinationSettings");
var de_DolbyVision = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    L6Metadata: [, (_) => de_DolbyVisionLevel6Metadata(_, context), `l6Metadata`],
    L6Mode: [, import_smithy_client.expectString, `l6Mode`],
    Mapping: [, import_smithy_client.expectString, `mapping`],
    Profile: [, import_smithy_client.expectString, `profile`]
  });
}, "de_DolbyVision");
var de_DolbyVisionLevel6Metadata = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MaxCll: [, import_smithy_client.expectInt32, `maxCll`],
    MaxFall: [, import_smithy_client.expectInt32, `maxFall`]
  });
}, "de_DolbyVisionLevel6Metadata");
var de_DvbNitSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    NetworkId: [, import_smithy_client.expectInt32, `networkId`],
    NetworkName: [, import_smithy_client.expectString, `networkName`],
    NitInterval: [, import_smithy_client.expectInt32, `nitInterval`]
  });
}, "de_DvbNitSettings");
var de_DvbSdtSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    OutputSdt: [, import_smithy_client.expectString, `outputSdt`],
    SdtInterval: [, import_smithy_client.expectInt32, `sdtInterval`],
    ServiceName: [, import_smithy_client.expectString, `serviceName`],
    ServiceProviderName: [, import_smithy_client.expectString, `serviceProviderName`]
  });
}, "de_DvbSdtSettings");
var de_DvbSubDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Alignment: [, import_smithy_client.expectString, `alignment`],
    ApplyFontColor: [, import_smithy_client.expectString, `applyFontColor`],
    BackgroundColor: [, import_smithy_client.expectString, `backgroundColor`],
    BackgroundOpacity: [, import_smithy_client.expectInt32, `backgroundOpacity`],
    DdsHandling: [, import_smithy_client.expectString, `ddsHandling`],
    DdsXCoordinate: [, import_smithy_client.expectInt32, `ddsXCoordinate`],
    DdsYCoordinate: [, import_smithy_client.expectInt32, `ddsYCoordinate`],
    FallbackFont: [, import_smithy_client.expectString, `fallbackFont`],
    FontColor: [, import_smithy_client.expectString, `fontColor`],
    FontFileBold: [, import_smithy_client.expectString, `fontFileBold`],
    FontFileBoldItalic: [, import_smithy_client.expectString, `fontFileBoldItalic`],
    FontFileItalic: [, import_smithy_client.expectString, `fontFileItalic`],
    FontFileRegular: [, import_smithy_client.expectString, `fontFileRegular`],
    FontOpacity: [, import_smithy_client.expectInt32, `fontOpacity`],
    FontResolution: [, import_smithy_client.expectInt32, `fontResolution`],
    FontScript: [, import_smithy_client.expectString, `fontScript`],
    FontSize: [, import_smithy_client.expectInt32, `fontSize`],
    Height: [, import_smithy_client.expectInt32, `height`],
    HexFontColor: [, import_smithy_client.expectString, `hexFontColor`],
    OutlineColor: [, import_smithy_client.expectString, `outlineColor`],
    OutlineSize: [, import_smithy_client.expectInt32, `outlineSize`],
    ShadowColor: [, import_smithy_client.expectString, `shadowColor`],
    ShadowOpacity: [, import_smithy_client.expectInt32, `shadowOpacity`],
    ShadowXOffset: [, import_smithy_client.expectInt32, `shadowXOffset`],
    ShadowYOffset: [, import_smithy_client.expectInt32, `shadowYOffset`],
    StylePassthrough: [, import_smithy_client.expectString, `stylePassthrough`],
    SubtitlingType: [, import_smithy_client.expectString, `subtitlingType`],
    TeletextSpacing: [, import_smithy_client.expectString, `teletextSpacing`],
    Width: [, import_smithy_client.expectInt32, `width`],
    XPosition: [, import_smithy_client.expectInt32, `xPosition`],
    YPosition: [, import_smithy_client.expectInt32, `yPosition`]
  });
}, "de_DvbSubDestinationSettings");
var de_DvbSubSourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Pid: [, import_smithy_client.expectInt32, `pid`]
  });
}, "de_DvbSubSourceSettings");
var de_DvbTdtSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    TdtInterval: [, import_smithy_client.expectInt32, `tdtInterval`]
  });
}, "de_DvbTdtSettings");
var de_DynamicAudioSelector = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioDurationCorrection: [, import_smithy_client.expectString, `audioDurationCorrection`],
    ExternalAudioFileInput: [, import_smithy_client.expectString, `externalAudioFileInput`],
    LanguageCode: [, import_smithy_client.expectString, `languageCode`],
    Offset: [, import_smithy_client.expectInt32, `offset`],
    SelectorType: [, import_smithy_client.expectString, `selectorType`]
  });
}, "de_DynamicAudioSelector");
var de_Eac3AtmosSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    BitstreamMode: [, import_smithy_client.expectString, `bitstreamMode`],
    CodingMode: [, import_smithy_client.expectString, `codingMode`],
    DialogueIntelligence: [, import_smithy_client.expectString, `dialogueIntelligence`],
    DownmixControl: [, import_smithy_client.expectString, `downmixControl`],
    DynamicRangeCompressionLine: [, import_smithy_client.expectString, `dynamicRangeCompressionLine`],
    DynamicRangeCompressionRf: [, import_smithy_client.expectString, `dynamicRangeCompressionRf`],
    DynamicRangeControl: [, import_smithy_client.expectString, `dynamicRangeControl`],
    LoRoCenterMixLevel: [, import_smithy_client.limitedParseDouble, `loRoCenterMixLevel`],
    LoRoSurroundMixLevel: [, import_smithy_client.limitedParseDouble, `loRoSurroundMixLevel`],
    LtRtCenterMixLevel: [, import_smithy_client.limitedParseDouble, `ltRtCenterMixLevel`],
    LtRtSurroundMixLevel: [, import_smithy_client.limitedParseDouble, `ltRtSurroundMixLevel`],
    MeteringMode: [, import_smithy_client.expectString, `meteringMode`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`],
    SpeechThreshold: [, import_smithy_client.expectInt32, `speechThreshold`],
    StereoDownmix: [, import_smithy_client.expectString, `stereoDownmix`],
    SurroundExMode: [, import_smithy_client.expectString, `surroundExMode`]
  });
}, "de_Eac3AtmosSettings");
var de_Eac3Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AttenuationControl: [, import_smithy_client.expectString, `attenuationControl`],
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    BitstreamMode: [, import_smithy_client.expectString, `bitstreamMode`],
    CodingMode: [, import_smithy_client.expectString, `codingMode`],
    DcFilter: [, import_smithy_client.expectString, `dcFilter`],
    Dialnorm: [, import_smithy_client.expectInt32, `dialnorm`],
    DynamicRangeCompressionLine: [, import_smithy_client.expectString, `dynamicRangeCompressionLine`],
    DynamicRangeCompressionRf: [, import_smithy_client.expectString, `dynamicRangeCompressionRf`],
    LfeControl: [, import_smithy_client.expectString, `lfeControl`],
    LfeFilter: [, import_smithy_client.expectString, `lfeFilter`],
    LoRoCenterMixLevel: [, import_smithy_client.limitedParseDouble, `loRoCenterMixLevel`],
    LoRoSurroundMixLevel: [, import_smithy_client.limitedParseDouble, `loRoSurroundMixLevel`],
    LtRtCenterMixLevel: [, import_smithy_client.limitedParseDouble, `ltRtCenterMixLevel`],
    LtRtSurroundMixLevel: [, import_smithy_client.limitedParseDouble, `ltRtSurroundMixLevel`],
    MetadataControl: [, import_smithy_client.expectString, `metadataControl`],
    PassthroughControl: [, import_smithy_client.expectString, `passthroughControl`],
    PhaseControl: [, import_smithy_client.expectString, `phaseControl`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`],
    StereoDownmix: [, import_smithy_client.expectString, `stereoDownmix`],
    SurroundExMode: [, import_smithy_client.expectString, `surroundExMode`],
    SurroundMode: [, import_smithy_client.expectString, `surroundMode`]
  });
}, "de_Eac3Settings");
var de_EmbeddedDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Destination608ChannelNumber: [, import_smithy_client.expectInt32, `destination608ChannelNumber`],
    Destination708ServiceNumber: [, import_smithy_client.expectInt32, `destination708ServiceNumber`]
  });
}, "de_EmbeddedDestinationSettings");
var de_EmbeddedSourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Convert608To708: [, import_smithy_client.expectString, `convert608To708`],
    Source608ChannelNumber: [, import_smithy_client.expectInt32, `source608ChannelNumber`],
    Source608TrackNumber: [, import_smithy_client.expectInt32, `source608TrackNumber`],
    TerminateCaptions: [, import_smithy_client.expectString, `terminateCaptions`]
  });
}, "de_EmbeddedSourceSettings");
var de_EncryptionContractConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    SpekeAudioPreset: [, import_smithy_client.expectString, `spekeAudioPreset`],
    SpekeVideoPreset: [, import_smithy_client.expectString, `spekeVideoPreset`]
  });
}, "de_EncryptionContractConfiguration");
var de_Endpoint = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Url: [, import_smithy_client.expectString, `url`]
  });
}, "de_Endpoint");
var de_EsamManifestConfirmConditionNotification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MccXml: [, import_smithy_client.expectString, `mccXml`]
  });
}, "de_EsamManifestConfirmConditionNotification");
var de_EsamSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ManifestConfirmConditionNotification: [
      ,
      (_) => de_EsamManifestConfirmConditionNotification(_, context),
      `manifestConfirmConditionNotification`
    ],
    ResponseSignalPreroll: [, import_smithy_client.expectInt32, `responseSignalPreroll`],
    SignalProcessingNotification: [
      ,
      (_) => de_EsamSignalProcessingNotification(_, context),
      `signalProcessingNotification`
    ]
  });
}, "de_EsamSettings");
var de_EsamSignalProcessingNotification = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    SccXml: [, import_smithy_client.expectString, `sccXml`]
  });
}, "de_EsamSignalProcessingNotification");
var de_ExtendedDataServices = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CopyProtectionAction: [, import_smithy_client.expectString, `copyProtectionAction`],
    VchipAction: [, import_smithy_client.expectString, `vchipAction`]
  });
}, "de_ExtendedDataServices");
var de_F4vSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MoovPlacement: [, import_smithy_client.expectString, `moovPlacement`]
  });
}, "de_F4vSettings");
var de_FileGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Destination: [, import_smithy_client.expectString, `destination`],
    DestinationSettings: [, (_) => de_DestinationSettings(_, context), `destinationSettings`]
  });
}, "de_FileGroupSettings");
var de_FileSourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ByteRateLimit: [, import_smithy_client.expectString, `byteRateLimit`],
    Convert608To708: [, import_smithy_client.expectString, `convert608To708`],
    ConvertPaintToPop: [, import_smithy_client.expectString, `convertPaintToPop`],
    Framerate: [, (_) => de_CaptionSourceFramerate(_, context), `framerate`],
    SourceFile: [, import_smithy_client.expectString, `sourceFile`],
    TimeDelta: [, import_smithy_client.expectInt32, `timeDelta`],
    TimeDeltaUnits: [, import_smithy_client.expectString, `timeDeltaUnits`],
    UpconvertSTLToTeletext: [, import_smithy_client.expectString, `upconvertSTLToTeletext`]
  });
}, "de_FileSourceSettings");
var de_FlacSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BitDepth: [, import_smithy_client.expectInt32, `bitDepth`],
    Channels: [, import_smithy_client.expectInt32, `channels`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`]
  });
}, "de_FlacSettings");
var de_ForceIncludeRenditionSize = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Height: [, import_smithy_client.expectInt32, `height`],
    Width: [, import_smithy_client.expectInt32, `width`]
  });
}, "de_ForceIncludeRenditionSize");
var de_FrameCaptureSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    MaxCaptures: [, import_smithy_client.expectInt32, `maxCaptures`],
    Quality: [, import_smithy_client.expectInt32, `quality`]
  });
}, "de_FrameCaptureSettings");
var de_FrameRate = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Denominator: [, import_smithy_client.expectInt32, `denominator`],
    Numerator: [, import_smithy_client.expectInt32, `numerator`]
  });
}, "de_FrameRate");
var de_GifSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FramerateControl: [, import_smithy_client.expectString, `framerateControl`],
    FramerateConversionAlgorithm: [, import_smithy_client.expectString, `framerateConversionAlgorithm`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`]
  });
}, "de_GifSettings");
var de_H264QvbrSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MaxAverageBitrate: [, import_smithy_client.expectInt32, `maxAverageBitrate`],
    QvbrQualityLevel: [, import_smithy_client.expectInt32, `qvbrQualityLevel`],
    QvbrQualityLevelFineTune: [, import_smithy_client.limitedParseDouble, `qvbrQualityLevelFineTune`]
  });
}, "de_H264QvbrSettings");
var de_H264Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdaptiveQuantization: [, import_smithy_client.expectString, `adaptiveQuantization`],
    BandwidthReductionFilter: [, (_) => de_BandwidthReductionFilter(_, context), `bandwidthReductionFilter`],
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    CodecLevel: [, import_smithy_client.expectString, `codecLevel`],
    CodecProfile: [, import_smithy_client.expectString, `codecProfile`],
    DynamicSubGop: [, import_smithy_client.expectString, `dynamicSubGop`],
    EndOfStreamMarkers: [, import_smithy_client.expectString, `endOfStreamMarkers`],
    EntropyEncoding: [, import_smithy_client.expectString, `entropyEncoding`],
    FieldEncoding: [, import_smithy_client.expectString, `fieldEncoding`],
    FlickerAdaptiveQuantization: [, import_smithy_client.expectString, `flickerAdaptiveQuantization`],
    FramerateControl: [, import_smithy_client.expectString, `framerateControl`],
    FramerateConversionAlgorithm: [, import_smithy_client.expectString, `framerateConversionAlgorithm`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    GopBReference: [, import_smithy_client.expectString, `gopBReference`],
    GopClosedCadence: [, import_smithy_client.expectInt32, `gopClosedCadence`],
    GopSize: [, import_smithy_client.limitedParseDouble, `gopSize`],
    GopSizeUnits: [, import_smithy_client.expectString, `gopSizeUnits`],
    HrdBufferFinalFillPercentage: [, import_smithy_client.expectInt32, `hrdBufferFinalFillPercentage`],
    HrdBufferInitialFillPercentage: [, import_smithy_client.expectInt32, `hrdBufferInitialFillPercentage`],
    HrdBufferSize: [, import_smithy_client.expectInt32, `hrdBufferSize`],
    InterlaceMode: [, import_smithy_client.expectString, `interlaceMode`],
    MaxBitrate: [, import_smithy_client.expectInt32, `maxBitrate`],
    MinIInterval: [, import_smithy_client.expectInt32, `minIInterval`],
    NumberBFramesBetweenReferenceFrames: [, import_smithy_client.expectInt32, `numberBFramesBetweenReferenceFrames`],
    NumberReferenceFrames: [, import_smithy_client.expectInt32, `numberReferenceFrames`],
    ParControl: [, import_smithy_client.expectString, `parControl`],
    ParDenominator: [, import_smithy_client.expectInt32, `parDenominator`],
    ParNumerator: [, import_smithy_client.expectInt32, `parNumerator`],
    PerFrameMetrics: [, import_smithy_client._json, `perFrameMetrics`],
    QualityTuningLevel: [, import_smithy_client.expectString, `qualityTuningLevel`],
    QvbrSettings: [, (_) => de_H264QvbrSettings(_, context), `qvbrSettings`],
    RateControlMode: [, import_smithy_client.expectString, `rateControlMode`],
    RepeatPps: [, import_smithy_client.expectString, `repeatPps`],
    SaliencyAwareEncoding: [, import_smithy_client.expectString, `saliencyAwareEncoding`],
    ScanTypeConversionMode: [, import_smithy_client.expectString, `scanTypeConversionMode`],
    SceneChangeDetect: [, import_smithy_client.expectString, `sceneChangeDetect`],
    Slices: [, import_smithy_client.expectInt32, `slices`],
    SlowPal: [, import_smithy_client.expectString, `slowPal`],
    Softness: [, import_smithy_client.expectInt32, `softness`],
    SpatialAdaptiveQuantization: [, import_smithy_client.expectString, `spatialAdaptiveQuantization`],
    Syntax: [, import_smithy_client.expectString, `syntax`],
    Telecine: [, import_smithy_client.expectString, `telecine`],
    TemporalAdaptiveQuantization: [, import_smithy_client.expectString, `temporalAdaptiveQuantization`],
    UnregisteredSeiTimecode: [, import_smithy_client.expectString, `unregisteredSeiTimecode`],
    WriteMp4PackagingType: [, import_smithy_client.expectString, `writeMp4PackagingType`]
  });
}, "de_H264Settings");
var de_H265QvbrSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MaxAverageBitrate: [, import_smithy_client.expectInt32, `maxAverageBitrate`],
    QvbrQualityLevel: [, import_smithy_client.expectInt32, `qvbrQualityLevel`],
    QvbrQualityLevelFineTune: [, import_smithy_client.limitedParseDouble, `qvbrQualityLevelFineTune`]
  });
}, "de_H265QvbrSettings");
var de_H265Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdaptiveQuantization: [, import_smithy_client.expectString, `adaptiveQuantization`],
    AlternateTransferFunctionSei: [, import_smithy_client.expectString, `alternateTransferFunctionSei`],
    BandwidthReductionFilter: [, (_) => de_BandwidthReductionFilter(_, context), `bandwidthReductionFilter`],
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    CodecLevel: [, import_smithy_client.expectString, `codecLevel`],
    CodecProfile: [, import_smithy_client.expectString, `codecProfile`],
    Deblocking: [, import_smithy_client.expectString, `deblocking`],
    DynamicSubGop: [, import_smithy_client.expectString, `dynamicSubGop`],
    EndOfStreamMarkers: [, import_smithy_client.expectString, `endOfStreamMarkers`],
    FlickerAdaptiveQuantization: [, import_smithy_client.expectString, `flickerAdaptiveQuantization`],
    FramerateControl: [, import_smithy_client.expectString, `framerateControl`],
    FramerateConversionAlgorithm: [, import_smithy_client.expectString, `framerateConversionAlgorithm`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    GopBReference: [, import_smithy_client.expectString, `gopBReference`],
    GopClosedCadence: [, import_smithy_client.expectInt32, `gopClosedCadence`],
    GopSize: [, import_smithy_client.limitedParseDouble, `gopSize`],
    GopSizeUnits: [, import_smithy_client.expectString, `gopSizeUnits`],
    HrdBufferFinalFillPercentage: [, import_smithy_client.expectInt32, `hrdBufferFinalFillPercentage`],
    HrdBufferInitialFillPercentage: [, import_smithy_client.expectInt32, `hrdBufferInitialFillPercentage`],
    HrdBufferSize: [, import_smithy_client.expectInt32, `hrdBufferSize`],
    InterlaceMode: [, import_smithy_client.expectString, `interlaceMode`],
    MaxBitrate: [, import_smithy_client.expectInt32, `maxBitrate`],
    MinIInterval: [, import_smithy_client.expectInt32, `minIInterval`],
    NumberBFramesBetweenReferenceFrames: [, import_smithy_client.expectInt32, `numberBFramesBetweenReferenceFrames`],
    NumberReferenceFrames: [, import_smithy_client.expectInt32, `numberReferenceFrames`],
    ParControl: [, import_smithy_client.expectString, `parControl`],
    ParDenominator: [, import_smithy_client.expectInt32, `parDenominator`],
    ParNumerator: [, import_smithy_client.expectInt32, `parNumerator`],
    PerFrameMetrics: [, import_smithy_client._json, `perFrameMetrics`],
    QualityTuningLevel: [, import_smithy_client.expectString, `qualityTuningLevel`],
    QvbrSettings: [, (_) => de_H265QvbrSettings(_, context), `qvbrSettings`],
    RateControlMode: [, import_smithy_client.expectString, `rateControlMode`],
    SampleAdaptiveOffsetFilterMode: [, import_smithy_client.expectString, `sampleAdaptiveOffsetFilterMode`],
    ScanTypeConversionMode: [, import_smithy_client.expectString, `scanTypeConversionMode`],
    SceneChangeDetect: [, import_smithy_client.expectString, `sceneChangeDetect`],
    Slices: [, import_smithy_client.expectInt32, `slices`],
    SlowPal: [, import_smithy_client.expectString, `slowPal`],
    SpatialAdaptiveQuantization: [, import_smithy_client.expectString, `spatialAdaptiveQuantization`],
    Telecine: [, import_smithy_client.expectString, `telecine`],
    TemporalAdaptiveQuantization: [, import_smithy_client.expectString, `temporalAdaptiveQuantization`],
    TemporalIds: [, import_smithy_client.expectString, `temporalIds`],
    Tiles: [, import_smithy_client.expectString, `tiles`],
    UnregisteredSeiTimecode: [, import_smithy_client.expectString, `unregisteredSeiTimecode`],
    WriteMp4PackagingType: [, import_smithy_client.expectString, `writeMp4PackagingType`]
  });
}, "de_H265Settings");
var de_Hdr10Metadata = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BluePrimaryX: [, import_smithy_client.expectInt32, `bluePrimaryX`],
    BluePrimaryY: [, import_smithy_client.expectInt32, `bluePrimaryY`],
    GreenPrimaryX: [, import_smithy_client.expectInt32, `greenPrimaryX`],
    GreenPrimaryY: [, import_smithy_client.expectInt32, `greenPrimaryY`],
    MaxContentLightLevel: [, import_smithy_client.expectInt32, `maxContentLightLevel`],
    MaxFrameAverageLightLevel: [, import_smithy_client.expectInt32, `maxFrameAverageLightLevel`],
    MaxLuminance: [, import_smithy_client.expectInt32, `maxLuminance`],
    MinLuminance: [, import_smithy_client.expectInt32, `minLuminance`],
    RedPrimaryX: [, import_smithy_client.expectInt32, `redPrimaryX`],
    RedPrimaryY: [, import_smithy_client.expectInt32, `redPrimaryY`],
    WhitePointX: [, import_smithy_client.expectInt32, `whitePointX`],
    WhitePointY: [, import_smithy_client.expectInt32, `whitePointY`]
  });
}, "de_Hdr10Metadata");
var de_Hdr10Plus = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    MasteringMonitorNits: [, import_smithy_client.expectInt32, `masteringMonitorNits`],
    TargetMonitorNits: [, import_smithy_client.expectInt32, `targetMonitorNits`]
  });
}, "de_Hdr10Plus");
var de_HlsAdditionalManifest = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ManifestNameModifier: [, import_smithy_client.expectString, `manifestNameModifier`],
    SelectedOutputs: [, import_smithy_client._json, `selectedOutputs`]
  });
}, "de_HlsAdditionalManifest");
var de_HlsCaptionLanguageMapping = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CaptionChannel: [, import_smithy_client.expectInt32, `captionChannel`],
    CustomLanguageCode: [, import_smithy_client.expectString, `customLanguageCode`],
    LanguageCode: [, import_smithy_client.expectString, `languageCode`],
    LanguageDescription: [, import_smithy_client.expectString, `languageDescription`]
  });
}, "de_HlsCaptionLanguageMapping");
var de_HlsEncryptionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ConstantInitializationVector: [, import_smithy_client.expectString, `constantInitializationVector`],
    EncryptionMethod: [, import_smithy_client.expectString, `encryptionMethod`],
    InitializationVectorInManifest: [, import_smithy_client.expectString, `initializationVectorInManifest`],
    OfflineEncrypted: [, import_smithy_client.expectString, `offlineEncrypted`],
    SpekeKeyProvider: [, (_) => de_SpekeKeyProvider(_, context), `spekeKeyProvider`],
    StaticKeyProvider: [, (_) => de_StaticKeyProvider(_, context), `staticKeyProvider`],
    Type: [, import_smithy_client.expectString, `type`]
  });
}, "de_HlsEncryptionSettings");
var de_HlsGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdMarkers: [, import_smithy_client._json, `adMarkers`],
    AdditionalManifests: [, (_) => de___listOfHlsAdditionalManifest(_, context), `additionalManifests`],
    AudioOnlyHeader: [, import_smithy_client.expectString, `audioOnlyHeader`],
    BaseUrl: [, import_smithy_client.expectString, `baseUrl`],
    CaptionLanguageMappings: [
      ,
      (_) => de___listOfHlsCaptionLanguageMapping(_, context),
      `captionLanguageMappings`
    ],
    CaptionLanguageSetting: [, import_smithy_client.expectString, `captionLanguageSetting`],
    CaptionSegmentLengthControl: [, import_smithy_client.expectString, `captionSegmentLengthControl`],
    ClientCache: [, import_smithy_client.expectString, `clientCache`],
    CodecSpecification: [, import_smithy_client.expectString, `codecSpecification`],
    Destination: [, import_smithy_client.expectString, `destination`],
    DestinationSettings: [, (_) => de_DestinationSettings(_, context), `destinationSettings`],
    DirectoryStructure: [, import_smithy_client.expectString, `directoryStructure`],
    Encryption: [, (_) => de_HlsEncryptionSettings(_, context), `encryption`],
    ImageBasedTrickPlay: [, import_smithy_client.expectString, `imageBasedTrickPlay`],
    ImageBasedTrickPlaySettings: [
      ,
      (_) => de_HlsImageBasedTrickPlaySettings(_, context),
      `imageBasedTrickPlaySettings`
    ],
    ManifestCompression: [, import_smithy_client.expectString, `manifestCompression`],
    ManifestDurationFormat: [, import_smithy_client.expectString, `manifestDurationFormat`],
    MinFinalSegmentLength: [, import_smithy_client.limitedParseDouble, `minFinalSegmentLength`],
    MinSegmentLength: [, import_smithy_client.expectInt32, `minSegmentLength`],
    OutputSelection: [, import_smithy_client.expectString, `outputSelection`],
    ProgramDateTime: [, import_smithy_client.expectString, `programDateTime`],
    ProgramDateTimePeriod: [, import_smithy_client.expectInt32, `programDateTimePeriod`],
    ProgressiveWriteHlsManifest: [, import_smithy_client.expectString, `progressiveWriteHlsManifest`],
    SegmentControl: [, import_smithy_client.expectString, `segmentControl`],
    SegmentLength: [, import_smithy_client.expectInt32, `segmentLength`],
    SegmentLengthControl: [, import_smithy_client.expectString, `segmentLengthControl`],
    SegmentsPerSubdirectory: [, import_smithy_client.expectInt32, `segmentsPerSubdirectory`],
    StreamInfResolution: [, import_smithy_client.expectString, `streamInfResolution`],
    TargetDurationCompatibilityMode: [, import_smithy_client.expectString, `targetDurationCompatibilityMode`],
    TimedMetadataId3Frame: [, import_smithy_client.expectString, `timedMetadataId3Frame`],
    TimedMetadataId3Period: [, import_smithy_client.expectInt32, `timedMetadataId3Period`],
    TimestampDeltaMilliseconds: [, import_smithy_client.expectInt32, `timestampDeltaMilliseconds`]
  });
}, "de_HlsGroupSettings");
var de_HlsImageBasedTrickPlaySettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    IntervalCadence: [, import_smithy_client.expectString, `intervalCadence`],
    ThumbnailHeight: [, import_smithy_client.expectInt32, `thumbnailHeight`],
    ThumbnailInterval: [, import_smithy_client.limitedParseDouble, `thumbnailInterval`],
    ThumbnailWidth: [, import_smithy_client.expectInt32, `thumbnailWidth`],
    TileHeight: [, import_smithy_client.expectInt32, `tileHeight`],
    TileWidth: [, import_smithy_client.expectInt32, `tileWidth`]
  });
}, "de_HlsImageBasedTrickPlaySettings");
var de_HlsRenditionGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    RenditionGroupId: [, import_smithy_client.expectString, `renditionGroupId`],
    RenditionLanguageCode: [, import_smithy_client.expectString, `renditionLanguageCode`],
    RenditionName: [, import_smithy_client.expectString, `renditionName`]
  });
}, "de_HlsRenditionGroupSettings");
var de_HlsSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioGroupId: [, import_smithy_client.expectString, `audioGroupId`],
    AudioOnlyContainer: [, import_smithy_client.expectString, `audioOnlyContainer`],
    AudioRenditionSets: [, import_smithy_client.expectString, `audioRenditionSets`],
    AudioTrackType: [, import_smithy_client.expectString, `audioTrackType`],
    DescriptiveVideoServiceFlag: [, import_smithy_client.expectString, `descriptiveVideoServiceFlag`],
    IFrameOnlyManifest: [, import_smithy_client.expectString, `iFrameOnlyManifest`],
    SegmentModifier: [, import_smithy_client.expectString, `segmentModifier`]
  });
}, "de_HlsSettings");
var de_HopDestination = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Priority: [, import_smithy_client.expectInt32, `priority`],
    Queue: [, import_smithy_client.expectString, `queue`],
    WaitMinutes: [, import_smithy_client.expectInt32, `waitMinutes`]
  });
}, "de_HopDestination");
var de_Id3Insertion = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Id3: [, import_smithy_client.expectString, `id3`],
    Timecode: [, import_smithy_client.expectString, `timecode`]
  });
}, "de_Id3Insertion");
var de_ImageInserter = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InsertableImages: [, (_) => de___listOfInsertableImage(_, context), `insertableImages`],
    SdrReferenceWhiteLevel: [, import_smithy_client.expectInt32, `sdrReferenceWhiteLevel`]
  });
}, "de_ImageInserter");
var de_ImscDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Accessibility: [, import_smithy_client.expectString, `accessibility`],
    StylePassthrough: [, import_smithy_client.expectString, `stylePassthrough`]
  });
}, "de_ImscDestinationSettings");
var de_Input = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdvancedInputFilter: [, import_smithy_client.expectString, `advancedInputFilter`],
    AdvancedInputFilterSettings: [
      ,
      (_) => de_AdvancedInputFilterSettings(_, context),
      `advancedInputFilterSettings`
    ],
    AudioSelectorGroups: [, (_) => de___mapOfAudioSelectorGroup(_, context), `audioSelectorGroups`],
    AudioSelectors: [, (_) => de___mapOfAudioSelector(_, context), `audioSelectors`],
    CaptionSelectors: [, (_) => de___mapOfCaptionSelector(_, context), `captionSelectors`],
    Crop: [, (_) => de_Rectangle(_, context), `crop`],
    DeblockFilter: [, import_smithy_client.expectString, `deblockFilter`],
    DecryptionSettings: [, (_) => de_InputDecryptionSettings(_, context), `decryptionSettings`],
    DenoiseFilter: [, import_smithy_client.expectString, `denoiseFilter`],
    DolbyVisionMetadataXml: [, import_smithy_client.expectString, `dolbyVisionMetadataXml`],
    DynamicAudioSelectors: [, (_) => de___mapOfDynamicAudioSelector(_, context), `dynamicAudioSelectors`],
    FileInput: [, import_smithy_client.expectString, `fileInput`],
    FilterEnable: [, import_smithy_client.expectString, `filterEnable`],
    FilterStrength: [, import_smithy_client.expectInt32, `filterStrength`],
    ImageInserter: [, (_) => de_ImageInserter(_, context), `imageInserter`],
    InputClippings: [, (_) => de___listOfInputClipping(_, context), `inputClippings`],
    InputScanType: [, import_smithy_client.expectString, `inputScanType`],
    Position: [, (_) => de_Rectangle(_, context), `position`],
    ProgramNumber: [, import_smithy_client.expectInt32, `programNumber`],
    PsiControl: [, import_smithy_client.expectString, `psiControl`],
    SupplementalImps: [, import_smithy_client._json, `supplementalImps`],
    TimecodeSource: [, import_smithy_client.expectString, `timecodeSource`],
    TimecodeStart: [, import_smithy_client.expectString, `timecodeStart`],
    VideoGenerator: [, (_) => de_InputVideoGenerator(_, context), `videoGenerator`],
    VideoOverlays: [, (_) => de___listOfVideoOverlay(_, context), `videoOverlays`],
    VideoSelector: [, (_) => de_VideoSelector(_, context), `videoSelector`]
  });
}, "de_Input");
var de_InputClipping = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EndTimecode: [, import_smithy_client.expectString, `endTimecode`],
    StartTimecode: [, import_smithy_client.expectString, `startTimecode`]
  });
}, "de_InputClipping");
var de_InputDecryptionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DecryptionMode: [, import_smithy_client.expectString, `decryptionMode`],
    EncryptedDecryptionKey: [, import_smithy_client.expectString, `encryptedDecryptionKey`],
    InitializationVector: [, import_smithy_client.expectString, `initializationVector`],
    KmsKeyRegion: [, import_smithy_client.expectString, `kmsKeyRegion`]
  });
}, "de_InputDecryptionSettings");
var de_InputTemplate = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdvancedInputFilter: [, import_smithy_client.expectString, `advancedInputFilter`],
    AdvancedInputFilterSettings: [
      ,
      (_) => de_AdvancedInputFilterSettings(_, context),
      `advancedInputFilterSettings`
    ],
    AudioSelectorGroups: [, (_) => de___mapOfAudioSelectorGroup(_, context), `audioSelectorGroups`],
    AudioSelectors: [, (_) => de___mapOfAudioSelector(_, context), `audioSelectors`],
    CaptionSelectors: [, (_) => de___mapOfCaptionSelector(_, context), `captionSelectors`],
    Crop: [, (_) => de_Rectangle(_, context), `crop`],
    DeblockFilter: [, import_smithy_client.expectString, `deblockFilter`],
    DenoiseFilter: [, import_smithy_client.expectString, `denoiseFilter`],
    DolbyVisionMetadataXml: [, import_smithy_client.expectString, `dolbyVisionMetadataXml`],
    DynamicAudioSelectors: [, (_) => de___mapOfDynamicAudioSelector(_, context), `dynamicAudioSelectors`],
    FilterEnable: [, import_smithy_client.expectString, `filterEnable`],
    FilterStrength: [, import_smithy_client.expectInt32, `filterStrength`],
    ImageInserter: [, (_) => de_ImageInserter(_, context), `imageInserter`],
    InputClippings: [, (_) => de___listOfInputClipping(_, context), `inputClippings`],
    InputScanType: [, import_smithy_client.expectString, `inputScanType`],
    Position: [, (_) => de_Rectangle(_, context), `position`],
    ProgramNumber: [, import_smithy_client.expectInt32, `programNumber`],
    PsiControl: [, import_smithy_client.expectString, `psiControl`],
    TimecodeSource: [, import_smithy_client.expectString, `timecodeSource`],
    TimecodeStart: [, import_smithy_client.expectString, `timecodeStart`],
    VideoOverlays: [, (_) => de___listOfVideoOverlay(_, context), `videoOverlays`],
    VideoSelector: [, (_) => de_VideoSelector(_, context), `videoSelector`]
  });
}, "de_InputTemplate");
var de_InputVideoGenerator = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Channels: [, import_smithy_client.expectInt32, `channels`],
    Duration: [, import_smithy_client.expectInt32, `duration`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`]
  });
}, "de_InputVideoGenerator");
var de_InsertableImage = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Duration: [, import_smithy_client.expectInt32, `duration`],
    FadeIn: [, import_smithy_client.expectInt32, `fadeIn`],
    FadeOut: [, import_smithy_client.expectInt32, `fadeOut`],
    Height: [, import_smithy_client.expectInt32, `height`],
    ImageInserterInput: [, import_smithy_client.expectString, `imageInserterInput`],
    ImageX: [, import_smithy_client.expectInt32, `imageX`],
    ImageY: [, import_smithy_client.expectInt32, `imageY`],
    Layer: [, import_smithy_client.expectInt32, `layer`],
    Opacity: [, import_smithy_client.expectInt32, `opacity`],
    StartTime: [, import_smithy_client.expectString, `startTime`],
    Width: [, import_smithy_client.expectInt32, `width`]
  });
}, "de_InsertableImage");
var de_Job = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AccelerationSettings: [, (_) => de_AccelerationSettings(_, context), `accelerationSettings`],
    AccelerationStatus: [, import_smithy_client.expectString, `accelerationStatus`],
    Arn: [, import_smithy_client.expectString, `arn`],
    BillingTagsSource: [, import_smithy_client.expectString, `billingTagsSource`],
    ClientRequestToken: [, import_smithy_client.expectString, `clientRequestToken`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `createdAt`],
    CurrentPhase: [, import_smithy_client.expectString, `currentPhase`],
    ErrorCode: [, import_smithy_client.expectInt32, `errorCode`],
    ErrorMessage: [, import_smithy_client.expectString, `errorMessage`],
    HopDestinations: [, (_) => de___listOfHopDestination(_, context), `hopDestinations`],
    Id: [, import_smithy_client.expectString, `id`],
    JobEngineVersionRequested: [, import_smithy_client.expectString, `jobEngineVersionRequested`],
    JobEngineVersionUsed: [, import_smithy_client.expectString, `jobEngineVersionUsed`],
    JobPercentComplete: [, import_smithy_client.expectInt32, `jobPercentComplete`],
    JobTemplate: [, import_smithy_client.expectString, `jobTemplate`],
    Messages: [, (_) => de_JobMessages(_, context), `messages`],
    OutputGroupDetails: [, (_) => de___listOfOutputGroupDetail(_, context), `outputGroupDetails`],
    Priority: [, import_smithy_client.expectInt32, `priority`],
    Queue: [, import_smithy_client.expectString, `queue`],
    QueueTransitions: [, (_) => de___listOfQueueTransition(_, context), `queueTransitions`],
    RetryCount: [, import_smithy_client.expectInt32, `retryCount`],
    Role: [, import_smithy_client.expectString, `role`],
    Settings: [, (_) => de_JobSettings(_, context), `settings`],
    SimulateReservedQueue: [, import_smithy_client.expectString, `simulateReservedQueue`],
    Status: [, import_smithy_client.expectString, `status`],
    StatusUpdateInterval: [, import_smithy_client.expectString, `statusUpdateInterval`],
    Timing: [, (_) => de_Timing(_, context), `timing`],
    UserMetadata: [, import_smithy_client._json, `userMetadata`],
    Warnings: [, (_) => de___listOfWarningGroup(_, context), `warnings`]
  });
}, "de_Job");
var de_JobEngineVersion = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ExpirationDate: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `expirationDate`],
    Version: [, import_smithy_client.expectString, `version`]
  });
}, "de_JobEngineVersion");
var de_JobMessages = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Info: [, import_smithy_client._json, `info`],
    Warning: [, import_smithy_client._json, `warning`]
  });
}, "de_JobMessages");
var de_JobSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdAvailOffset: [, import_smithy_client.expectInt32, `adAvailOffset`],
    AvailBlanking: [, (_) => de_AvailBlanking(_, context), `availBlanking`],
    ColorConversion3DLUTSettings: [
      ,
      (_) => de___listOfColorConversion3DLUTSetting(_, context),
      `colorConversion3DLUTSettings`
    ],
    Esam: [, (_) => de_EsamSettings(_, context), `esam`],
    ExtendedDataServices: [, (_) => de_ExtendedDataServices(_, context), `extendedDataServices`],
    FollowSource: [, import_smithy_client.expectInt32, `followSource`],
    Inputs: [, (_) => de___listOfInput(_, context), `inputs`],
    KantarWatermark: [, (_) => de_KantarWatermarkSettings(_, context), `kantarWatermark`],
    MotionImageInserter: [, (_) => de_MotionImageInserter(_, context), `motionImageInserter`],
    NielsenConfiguration: [, (_) => de_NielsenConfiguration(_, context), `nielsenConfiguration`],
    NielsenNonLinearWatermark: [
      ,
      (_) => de_NielsenNonLinearWatermarkSettings(_, context),
      `nielsenNonLinearWatermark`
    ],
    OutputGroups: [, (_) => de___listOfOutputGroup(_, context), `outputGroups`],
    TimecodeConfig: [, (_) => de_TimecodeConfig(_, context), `timecodeConfig`],
    TimedMetadataInsertion: [, (_) => de_TimedMetadataInsertion(_, context), `timedMetadataInsertion`]
  });
}, "de_JobSettings");
var de_JobTemplate = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AccelerationSettings: [, (_) => de_AccelerationSettings(_, context), `accelerationSettings`],
    Arn: [, import_smithy_client.expectString, `arn`],
    Category: [, import_smithy_client.expectString, `category`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    HopDestinations: [, (_) => de___listOfHopDestination(_, context), `hopDestinations`],
    LastUpdated: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `lastUpdated`],
    Name: [, import_smithy_client.expectString, `name`],
    Priority: [, import_smithy_client.expectInt32, `priority`],
    Queue: [, import_smithy_client.expectString, `queue`],
    Settings: [, (_) => de_JobTemplateSettings(_, context), `settings`],
    StatusUpdateInterval: [, import_smithy_client.expectString, `statusUpdateInterval`],
    Type: [, import_smithy_client.expectString, `type`]
  });
}, "de_JobTemplate");
var de_JobTemplateSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdAvailOffset: [, import_smithy_client.expectInt32, `adAvailOffset`],
    AvailBlanking: [, (_) => de_AvailBlanking(_, context), `availBlanking`],
    ColorConversion3DLUTSettings: [
      ,
      (_) => de___listOfColorConversion3DLUTSetting(_, context),
      `colorConversion3DLUTSettings`
    ],
    Esam: [, (_) => de_EsamSettings(_, context), `esam`],
    ExtendedDataServices: [, (_) => de_ExtendedDataServices(_, context), `extendedDataServices`],
    FollowSource: [, import_smithy_client.expectInt32, `followSource`],
    Inputs: [, (_) => de___listOfInputTemplate(_, context), `inputs`],
    KantarWatermark: [, (_) => de_KantarWatermarkSettings(_, context), `kantarWatermark`],
    MotionImageInserter: [, (_) => de_MotionImageInserter(_, context), `motionImageInserter`],
    NielsenConfiguration: [, (_) => de_NielsenConfiguration(_, context), `nielsenConfiguration`],
    NielsenNonLinearWatermark: [
      ,
      (_) => de_NielsenNonLinearWatermarkSettings(_, context),
      `nielsenNonLinearWatermark`
    ],
    OutputGroups: [, (_) => de___listOfOutputGroup(_, context), `outputGroups`],
    TimecodeConfig: [, (_) => de_TimecodeConfig(_, context), `timecodeConfig`],
    TimedMetadataInsertion: [, (_) => de_TimedMetadataInsertion(_, context), `timedMetadataInsertion`]
  });
}, "de_JobTemplateSettings");
var de_KantarWatermarkSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ChannelName: [, import_smithy_client.expectString, `channelName`],
    ContentReference: [, import_smithy_client.expectString, `contentReference`],
    CredentialsSecretName: [, import_smithy_client.expectString, `credentialsSecretName`],
    FileOffset: [, import_smithy_client.limitedParseDouble, `fileOffset`],
    KantarLicenseId: [, import_smithy_client.expectInt32, `kantarLicenseId`],
    KantarServerUrl: [, import_smithy_client.expectString, `kantarServerUrl`],
    LogDestination: [, import_smithy_client.expectString, `logDestination`],
    Metadata3: [, import_smithy_client.expectString, `metadata3`],
    Metadata4: [, import_smithy_client.expectString, `metadata4`],
    Metadata5: [, import_smithy_client.expectString, `metadata5`],
    Metadata6: [, import_smithy_client.expectString, `metadata6`],
    Metadata7: [, import_smithy_client.expectString, `metadata7`],
    Metadata8: [, import_smithy_client.expectString, `metadata8`]
  });
}, "de_KantarWatermarkSettings");
var de_M2tsScte35Esam = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Scte35EsamPid: [, import_smithy_client.expectInt32, `scte35EsamPid`]
  });
}, "de_M2tsScte35Esam");
var de_M2tsSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioBufferModel: [, import_smithy_client.expectString, `audioBufferModel`],
    AudioDuration: [, import_smithy_client.expectString, `audioDuration`],
    AudioFramesPerPes: [, import_smithy_client.expectInt32, `audioFramesPerPes`],
    AudioPids: [, import_smithy_client._json, `audioPids`],
    AudioPtsOffsetDelta: [, import_smithy_client.expectInt32, `audioPtsOffsetDelta`],
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    BufferModel: [, import_smithy_client.expectString, `bufferModel`],
    DataPTSControl: [, import_smithy_client.expectString, `dataPTSControl`],
    DvbNitSettings: [, (_) => de_DvbNitSettings(_, context), `dvbNitSettings`],
    DvbSdtSettings: [, (_) => de_DvbSdtSettings(_, context), `dvbSdtSettings`],
    DvbSubPids: [, import_smithy_client._json, `dvbSubPids`],
    DvbTdtSettings: [, (_) => de_DvbTdtSettings(_, context), `dvbTdtSettings`],
    DvbTeletextPid: [, import_smithy_client.expectInt32, `dvbTeletextPid`],
    EbpAudioInterval: [, import_smithy_client.expectString, `ebpAudioInterval`],
    EbpPlacement: [, import_smithy_client.expectString, `ebpPlacement`],
    EsRateInPes: [, import_smithy_client.expectString, `esRateInPes`],
    ForceTsVideoEbpOrder: [, import_smithy_client.expectString, `forceTsVideoEbpOrder`],
    FragmentTime: [, import_smithy_client.limitedParseDouble, `fragmentTime`],
    KlvMetadata: [, import_smithy_client.expectString, `klvMetadata`],
    MaxPcrInterval: [, import_smithy_client.expectInt32, `maxPcrInterval`],
    MinEbpInterval: [, import_smithy_client.expectInt32, `minEbpInterval`],
    NielsenId3: [, import_smithy_client.expectString, `nielsenId3`],
    NullPacketBitrate: [, import_smithy_client.limitedParseDouble, `nullPacketBitrate`],
    PatInterval: [, import_smithy_client.expectInt32, `patInterval`],
    PcrControl: [, import_smithy_client.expectString, `pcrControl`],
    PcrPid: [, import_smithy_client.expectInt32, `pcrPid`],
    PmtInterval: [, import_smithy_client.expectInt32, `pmtInterval`],
    PmtPid: [, import_smithy_client.expectInt32, `pmtPid`],
    PreventBufferUnderflow: [, import_smithy_client.expectString, `preventBufferUnderflow`],
    PrivateMetadataPid: [, import_smithy_client.expectInt32, `privateMetadataPid`],
    ProgramNumber: [, import_smithy_client.expectInt32, `programNumber`],
    PtsOffset: [, import_smithy_client.expectInt32, `ptsOffset`],
    PtsOffsetMode: [, import_smithy_client.expectString, `ptsOffsetMode`],
    RateMode: [, import_smithy_client.expectString, `rateMode`],
    Scte35Esam: [, (_) => de_M2tsScte35Esam(_, context), `scte35Esam`],
    Scte35Pid: [, import_smithy_client.expectInt32, `scte35Pid`],
    Scte35Source: [, import_smithy_client.expectString, `scte35Source`],
    SegmentationMarkers: [, import_smithy_client.expectString, `segmentationMarkers`],
    SegmentationStyle: [, import_smithy_client.expectString, `segmentationStyle`],
    SegmentationTime: [, import_smithy_client.limitedParseDouble, `segmentationTime`],
    TimedMetadataPid: [, import_smithy_client.expectInt32, `timedMetadataPid`],
    TransportStreamId: [, import_smithy_client.expectInt32, `transportStreamId`],
    VideoPid: [, import_smithy_client.expectInt32, `videoPid`]
  });
}, "de_M2tsSettings");
var de_M3u8Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioDuration: [, import_smithy_client.expectString, `audioDuration`],
    AudioFramesPerPes: [, import_smithy_client.expectInt32, `audioFramesPerPes`],
    AudioPids: [, import_smithy_client._json, `audioPids`],
    AudioPtsOffsetDelta: [, import_smithy_client.expectInt32, `audioPtsOffsetDelta`],
    DataPTSControl: [, import_smithy_client.expectString, `dataPTSControl`],
    MaxPcrInterval: [, import_smithy_client.expectInt32, `maxPcrInterval`],
    NielsenId3: [, import_smithy_client.expectString, `nielsenId3`],
    PatInterval: [, import_smithy_client.expectInt32, `patInterval`],
    PcrControl: [, import_smithy_client.expectString, `pcrControl`],
    PcrPid: [, import_smithy_client.expectInt32, `pcrPid`],
    PmtInterval: [, import_smithy_client.expectInt32, `pmtInterval`],
    PmtPid: [, import_smithy_client.expectInt32, `pmtPid`],
    PrivateMetadataPid: [, import_smithy_client.expectInt32, `privateMetadataPid`],
    ProgramNumber: [, import_smithy_client.expectInt32, `programNumber`],
    PtsOffset: [, import_smithy_client.expectInt32, `ptsOffset`],
    PtsOffsetMode: [, import_smithy_client.expectString, `ptsOffsetMode`],
    Scte35Pid: [, import_smithy_client.expectInt32, `scte35Pid`],
    Scte35Source: [, import_smithy_client.expectString, `scte35Source`],
    TimedMetadata: [, import_smithy_client.expectString, `timedMetadata`],
    TimedMetadataPid: [, import_smithy_client.expectInt32, `timedMetadataPid`],
    TransportStreamId: [, import_smithy_client.expectInt32, `transportStreamId`],
    VideoPid: [, import_smithy_client.expectInt32, `videoPid`]
  });
}, "de_M3u8Settings");
var de_Metadata = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ETag: [, import_smithy_client.expectString, `eTag`],
    FileSize: [, import_smithy_client.expectLong, `fileSize`],
    LastModified: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `lastModified`],
    MimeType: [, import_smithy_client.expectString, `mimeType`]
  });
}, "de_Metadata");
var de_MinBottomRenditionSize = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Height: [, import_smithy_client.expectInt32, `height`],
    Width: [, import_smithy_client.expectInt32, `width`]
  });
}, "de_MinBottomRenditionSize");
var de_MinTopRenditionSize = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Height: [, import_smithy_client.expectInt32, `height`],
    Width: [, import_smithy_client.expectInt32, `width`]
  });
}, "de_MinTopRenditionSize");
var de_MotionImageInserter = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Framerate: [, (_) => de_MotionImageInsertionFramerate(_, context), `framerate`],
    Input: [, import_smithy_client.expectString, `input`],
    InsertionMode: [, import_smithy_client.expectString, `insertionMode`],
    Offset: [, (_) => de_MotionImageInsertionOffset(_, context), `offset`],
    Playback: [, import_smithy_client.expectString, `playback`],
    StartTime: [, import_smithy_client.expectString, `startTime`]
  });
}, "de_MotionImageInserter");
var de_MotionImageInsertionFramerate = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`]
  });
}, "de_MotionImageInsertionFramerate");
var de_MotionImageInsertionOffset = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ImageX: [, import_smithy_client.expectInt32, `imageX`],
    ImageY: [, import_smithy_client.expectInt32, `imageY`]
  });
}, "de_MotionImageInsertionOffset");
var de_MovSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ClapAtom: [, import_smithy_client.expectString, `clapAtom`],
    CslgAtom: [, import_smithy_client.expectString, `cslgAtom`],
    Mpeg2FourCCControl: [, import_smithy_client.expectString, `mpeg2FourCCControl`],
    PaddingControl: [, import_smithy_client.expectString, `paddingControl`],
    Reference: [, import_smithy_client.expectString, `reference`]
  });
}, "de_MovSettings");
var de_Mp2Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    Channels: [, import_smithy_client.expectInt32, `channels`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`]
  });
}, "de_Mp2Settings");
var de_Mp3Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    Channels: [, import_smithy_client.expectInt32, `channels`],
    RateControlMode: [, import_smithy_client.expectString, `rateControlMode`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`],
    VbrQuality: [, import_smithy_client.expectInt32, `vbrQuality`]
  });
}, "de_Mp3Settings");
var de_Mp4Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioDuration: [, import_smithy_client.expectString, `audioDuration`],
    CslgAtom: [, import_smithy_client.expectString, `cslgAtom`],
    CttsVersion: [, import_smithy_client.expectInt32, `cttsVersion`],
    FreeSpaceBox: [, import_smithy_client.expectString, `freeSpaceBox`],
    MoovPlacement: [, import_smithy_client.expectString, `moovPlacement`],
    Mp4MajorBrand: [, import_smithy_client.expectString, `mp4MajorBrand`]
  });
}, "de_Mp4Settings");
var de_MpdSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AccessibilityCaptionHints: [, import_smithy_client.expectString, `accessibilityCaptionHints`],
    AudioDuration: [, import_smithy_client.expectString, `audioDuration`],
    CaptionContainerType: [, import_smithy_client.expectString, `captionContainerType`],
    KlvMetadata: [, import_smithy_client.expectString, `klvMetadata`],
    ManifestMetadataSignaling: [, import_smithy_client.expectString, `manifestMetadataSignaling`],
    Scte35Esam: [, import_smithy_client.expectString, `scte35Esam`],
    Scte35Source: [, import_smithy_client.expectString, `scte35Source`],
    TimedMetadata: [, import_smithy_client.expectString, `timedMetadata`],
    TimedMetadataBoxVersion: [, import_smithy_client.expectString, `timedMetadataBoxVersion`],
    TimedMetadataSchemeIdUri: [, import_smithy_client.expectString, `timedMetadataSchemeIdUri`],
    TimedMetadataValue: [, import_smithy_client.expectString, `timedMetadataValue`]
  });
}, "de_MpdSettings");
var de_Mpeg2Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdaptiveQuantization: [, import_smithy_client.expectString, `adaptiveQuantization`],
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    CodecLevel: [, import_smithy_client.expectString, `codecLevel`],
    CodecProfile: [, import_smithy_client.expectString, `codecProfile`],
    DynamicSubGop: [, import_smithy_client.expectString, `dynamicSubGop`],
    FramerateControl: [, import_smithy_client.expectString, `framerateControl`],
    FramerateConversionAlgorithm: [, import_smithy_client.expectString, `framerateConversionAlgorithm`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    GopClosedCadence: [, import_smithy_client.expectInt32, `gopClosedCadence`],
    GopSize: [, import_smithy_client.limitedParseDouble, `gopSize`],
    GopSizeUnits: [, import_smithy_client.expectString, `gopSizeUnits`],
    HrdBufferFinalFillPercentage: [, import_smithy_client.expectInt32, `hrdBufferFinalFillPercentage`],
    HrdBufferInitialFillPercentage: [, import_smithy_client.expectInt32, `hrdBufferInitialFillPercentage`],
    HrdBufferSize: [, import_smithy_client.expectInt32, `hrdBufferSize`],
    InterlaceMode: [, import_smithy_client.expectString, `interlaceMode`],
    IntraDcPrecision: [, import_smithy_client.expectString, `intraDcPrecision`],
    MaxBitrate: [, import_smithy_client.expectInt32, `maxBitrate`],
    MinIInterval: [, import_smithy_client.expectInt32, `minIInterval`],
    NumberBFramesBetweenReferenceFrames: [, import_smithy_client.expectInt32, `numberBFramesBetweenReferenceFrames`],
    ParControl: [, import_smithy_client.expectString, `parControl`],
    ParDenominator: [, import_smithy_client.expectInt32, `parDenominator`],
    ParNumerator: [, import_smithy_client.expectInt32, `parNumerator`],
    PerFrameMetrics: [, import_smithy_client._json, `perFrameMetrics`],
    QualityTuningLevel: [, import_smithy_client.expectString, `qualityTuningLevel`],
    RateControlMode: [, import_smithy_client.expectString, `rateControlMode`],
    ScanTypeConversionMode: [, import_smithy_client.expectString, `scanTypeConversionMode`],
    SceneChangeDetect: [, import_smithy_client.expectString, `sceneChangeDetect`],
    SlowPal: [, import_smithy_client.expectString, `slowPal`],
    Softness: [, import_smithy_client.expectInt32, `softness`],
    SpatialAdaptiveQuantization: [, import_smithy_client.expectString, `spatialAdaptiveQuantization`],
    Syntax: [, import_smithy_client.expectString, `syntax`],
    Telecine: [, import_smithy_client.expectString, `telecine`],
    TemporalAdaptiveQuantization: [, import_smithy_client.expectString, `temporalAdaptiveQuantization`]
  });
}, "de_Mpeg2Settings");
var de_MsSmoothAdditionalManifest = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ManifestNameModifier: [, import_smithy_client.expectString, `manifestNameModifier`],
    SelectedOutputs: [, import_smithy_client._json, `selectedOutputs`]
  });
}, "de_MsSmoothAdditionalManifest");
var de_MsSmoothEncryptionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    SpekeKeyProvider: [, (_) => de_SpekeKeyProvider(_, context), `spekeKeyProvider`]
  });
}, "de_MsSmoothEncryptionSettings");
var de_MsSmoothGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdditionalManifests: [, (_) => de___listOfMsSmoothAdditionalManifest(_, context), `additionalManifests`],
    AudioDeduplication: [, import_smithy_client.expectString, `audioDeduplication`],
    Destination: [, import_smithy_client.expectString, `destination`],
    DestinationSettings: [, (_) => de_DestinationSettings(_, context), `destinationSettings`],
    Encryption: [, (_) => de_MsSmoothEncryptionSettings(_, context), `encryption`],
    FragmentLength: [, import_smithy_client.expectInt32, `fragmentLength`],
    FragmentLengthControl: [, import_smithy_client.expectString, `fragmentLengthControl`],
    ManifestEncoding: [, import_smithy_client.expectString, `manifestEncoding`]
  });
}, "de_MsSmoothGroupSettings");
var de_MxfSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AfdSignaling: [, import_smithy_client.expectString, `afdSignaling`],
    Profile: [, import_smithy_client.expectString, `profile`],
    XavcProfileSettings: [, (_) => de_MxfXavcProfileSettings(_, context), `xavcProfileSettings`]
  });
}, "de_MxfSettings");
var de_MxfXavcProfileSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DurationMode: [, import_smithy_client.expectString, `durationMode`],
    MaxAncDataSize: [, import_smithy_client.expectInt32, `maxAncDataSize`]
  });
}, "de_MxfXavcProfileSettings");
var de_NexGuardFileMarkerSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    License: [, import_smithy_client.expectString, `license`],
    Payload: [, import_smithy_client.expectInt32, `payload`],
    Preset: [, import_smithy_client.expectString, `preset`],
    Strength: [, import_smithy_client.expectString, `strength`]
  });
}, "de_NexGuardFileMarkerSettings");
var de_NielsenConfiguration = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BreakoutCode: [, import_smithy_client.expectInt32, `breakoutCode`],
    DistributorId: [, import_smithy_client.expectString, `distributorId`]
  });
}, "de_NielsenConfiguration");
var de_NielsenNonLinearWatermarkSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ActiveWatermarkProcess: [, import_smithy_client.expectString, `activeWatermarkProcess`],
    AdiFilename: [, import_smithy_client.expectString, `adiFilename`],
    AssetId: [, import_smithy_client.expectString, `assetId`],
    AssetName: [, import_smithy_client.expectString, `assetName`],
    CbetSourceId: [, import_smithy_client.expectString, `cbetSourceId`],
    EpisodeId: [, import_smithy_client.expectString, `episodeId`],
    MetadataDestination: [, import_smithy_client.expectString, `metadataDestination`],
    SourceId: [, import_smithy_client.expectInt32, `sourceId`],
    SourceWatermarkStatus: [, import_smithy_client.expectString, `sourceWatermarkStatus`],
    TicServerUrl: [, import_smithy_client.expectString, `ticServerUrl`],
    UniqueTicPerAudioTrack: [, import_smithy_client.expectString, `uniqueTicPerAudioTrack`]
  });
}, "de_NielsenNonLinearWatermarkSettings");
var de_NoiseReducer = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Filter: [, import_smithy_client.expectString, `filter`],
    FilterSettings: [, (_) => de_NoiseReducerFilterSettings(_, context), `filterSettings`],
    SpatialFilterSettings: [, (_) => de_NoiseReducerSpatialFilterSettings(_, context), `spatialFilterSettings`],
    TemporalFilterSettings: [, (_) => de_NoiseReducerTemporalFilterSettings(_, context), `temporalFilterSettings`]
  });
}, "de_NoiseReducer");
var de_NoiseReducerFilterSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Strength: [, import_smithy_client.expectInt32, `strength`]
  });
}, "de_NoiseReducerFilterSettings");
var de_NoiseReducerSpatialFilterSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PostFilterSharpenStrength: [, import_smithy_client.expectInt32, `postFilterSharpenStrength`],
    Speed: [, import_smithy_client.expectInt32, `speed`],
    Strength: [, import_smithy_client.expectInt32, `strength`]
  });
}, "de_NoiseReducerSpatialFilterSettings");
var de_NoiseReducerTemporalFilterSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AggressiveMode: [, import_smithy_client.expectInt32, `aggressiveMode`],
    PostTemporalSharpening: [, import_smithy_client.expectString, `postTemporalSharpening`],
    PostTemporalSharpeningStrength: [, import_smithy_client.expectString, `postTemporalSharpeningStrength`],
    Speed: [, import_smithy_client.expectInt32, `speed`],
    Strength: [, import_smithy_client.expectInt32, `strength`]
  });
}, "de_NoiseReducerTemporalFilterSettings");
var de_OpusSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    Channels: [, import_smithy_client.expectInt32, `channels`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`]
  });
}, "de_OpusSettings");
var de_Output = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioDescriptions: [, (_) => de___listOfAudioDescription(_, context), `audioDescriptions`],
    CaptionDescriptions: [, (_) => de___listOfCaptionDescription(_, context), `captionDescriptions`],
    ContainerSettings: [, (_) => de_ContainerSettings(_, context), `containerSettings`],
    Extension: [, import_smithy_client.expectString, `extension`],
    NameModifier: [, import_smithy_client.expectString, `nameModifier`],
    OutputSettings: [, (_) => de_OutputSettings(_, context), `outputSettings`],
    Preset: [, import_smithy_client.expectString, `preset`],
    VideoDescription: [, (_) => de_VideoDescription(_, context), `videoDescription`]
  });
}, "de_Output");
var de_OutputChannelMapping = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    InputChannels: [, import_smithy_client._json, `inputChannels`],
    InputChannelsFineTune: [, (_) => de___listOf__doubleMinNegative60Max6(_, context), `inputChannelsFineTune`]
  });
}, "de_OutputChannelMapping");
var de_OutputDetail = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DurationInMs: [, import_smithy_client.expectInt32, `durationInMs`],
    VideoDetails: [, (_) => de_VideoDetail(_, context), `videoDetails`]
  });
}, "de_OutputDetail");
var de_OutputGroup = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AutomatedEncodingSettings: [, (_) => de_AutomatedEncodingSettings(_, context), `automatedEncodingSettings`],
    CustomName: [, import_smithy_client.expectString, `customName`],
    Name: [, import_smithy_client.expectString, `name`],
    OutputGroupSettings: [, (_) => de_OutputGroupSettings(_, context), `outputGroupSettings`],
    Outputs: [, (_) => de___listOfOutput(_, context), `outputs`]
  });
}, "de_OutputGroup");
var de_OutputGroupDetail = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    OutputDetails: [, (_) => de___listOfOutputDetail(_, context), `outputDetails`]
  });
}, "de_OutputGroupDetail");
var de_OutputGroupSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CmafGroupSettings: [, (_) => de_CmafGroupSettings(_, context), `cmafGroupSettings`],
    DashIsoGroupSettings: [, (_) => de_DashIsoGroupSettings(_, context), `dashIsoGroupSettings`],
    FileGroupSettings: [, (_) => de_FileGroupSettings(_, context), `fileGroupSettings`],
    HlsGroupSettings: [, (_) => de_HlsGroupSettings(_, context), `hlsGroupSettings`],
    MsSmoothGroupSettings: [, (_) => de_MsSmoothGroupSettings(_, context), `msSmoothGroupSettings`],
    PerFrameMetrics: [, import_smithy_client._json, `perFrameMetrics`],
    Type: [, import_smithy_client.expectString, `type`]
  });
}, "de_OutputGroupSettings");
var de_OutputSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    HlsSettings: [, (_) => de_HlsSettings(_, context), `hlsSettings`]
  });
}, "de_OutputSettings");
var de_PartnerWatermarking = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    NexguardFileMarkerSettings: [, (_) => de_NexGuardFileMarkerSettings(_, context), `nexguardFileMarkerSettings`]
  });
}, "de_PartnerWatermarking");
var de_Policy = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    HttpInputs: [, import_smithy_client.expectString, `httpInputs`],
    HttpsInputs: [, import_smithy_client.expectString, `httpsInputs`],
    S3Inputs: [, import_smithy_client.expectString, `s3Inputs`]
  });
}, "de_Policy");
var de_Preset = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    Category: [, import_smithy_client.expectString, `category`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    LastUpdated: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `lastUpdated`],
    Name: [, import_smithy_client.expectString, `name`],
    Settings: [, (_) => de_PresetSettings(_, context), `settings`],
    Type: [, import_smithy_client.expectString, `type`]
  });
}, "de_Preset");
var de_PresetSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioDescriptions: [, (_) => de___listOfAudioDescription(_, context), `audioDescriptions`],
    CaptionDescriptions: [, (_) => de___listOfCaptionDescriptionPreset(_, context), `captionDescriptions`],
    ContainerSettings: [, (_) => de_ContainerSettings(_, context), `containerSettings`],
    VideoDescription: [, (_) => de_VideoDescription(_, context), `videoDescription`]
  });
}, "de_PresetSettings");
var de_ProbeResult = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Container: [, (_) => de_Container(_, context), `container`],
    Metadata: [, (_) => de_Metadata(_, context), `metadata`],
    TrackMappings: [, (_) => de___listOfTrackMapping(_, context), `trackMappings`]
  });
}, "de_ProbeResult");
var de_ProresSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ChromaSampling: [, import_smithy_client.expectString, `chromaSampling`],
    CodecProfile: [, import_smithy_client.expectString, `codecProfile`],
    FramerateControl: [, import_smithy_client.expectString, `framerateControl`],
    FramerateConversionAlgorithm: [, import_smithy_client.expectString, `framerateConversionAlgorithm`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    InterlaceMode: [, import_smithy_client.expectString, `interlaceMode`],
    ParControl: [, import_smithy_client.expectString, `parControl`],
    ParDenominator: [, import_smithy_client.expectInt32, `parDenominator`],
    ParNumerator: [, import_smithy_client.expectInt32, `parNumerator`],
    PerFrameMetrics: [, import_smithy_client._json, `perFrameMetrics`],
    ScanTypeConversionMode: [, import_smithy_client.expectString, `scanTypeConversionMode`],
    SlowPal: [, import_smithy_client.expectString, `slowPal`],
    Telecine: [, import_smithy_client.expectString, `telecine`]
  });
}, "de_ProresSettings");
var de_Queue = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    ConcurrentJobs: [, import_smithy_client.expectInt32, `concurrentJobs`],
    CreatedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `createdAt`],
    Description: [, import_smithy_client.expectString, `description`],
    LastUpdated: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `lastUpdated`],
    Name: [, import_smithy_client.expectString, `name`],
    PricingPlan: [, import_smithy_client.expectString, `pricingPlan`],
    ProgressingJobsCount: [, import_smithy_client.expectInt32, `progressingJobsCount`],
    ReservationPlan: [, (_) => de_ReservationPlan(_, context), `reservationPlan`],
    ServiceOverrides: [, (_) => de___listOfServiceOverride(_, context), `serviceOverrides`],
    Status: [, import_smithy_client.expectString, `status`],
    SubmittedJobsCount: [, import_smithy_client.expectInt32, `submittedJobsCount`],
    Type: [, import_smithy_client.expectString, `type`]
  });
}, "de_Queue");
var de_QueueTransition = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    DestinationQueue: [, import_smithy_client.expectString, `destinationQueue`],
    SourceQueue: [, import_smithy_client.expectString, `sourceQueue`],
    Timestamp: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `timestamp`]
  });
}, "de_QueueTransition");
var de_Rectangle = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Height: [, import_smithy_client.expectInt32, `height`],
    Width: [, import_smithy_client.expectInt32, `width`],
    X: [, import_smithy_client.expectInt32, `x`],
    Y: [, import_smithy_client.expectInt32, `y`]
  });
}, "de_Rectangle");
var de_RemixSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioDescriptionAudioChannel: [, import_smithy_client.expectInt32, `audioDescriptionAudioChannel`],
    AudioDescriptionDataChannel: [, import_smithy_client.expectInt32, `audioDescriptionDataChannel`],
    ChannelMapping: [, (_) => de_ChannelMapping(_, context), `channelMapping`],
    ChannelsIn: [, import_smithy_client.expectInt32, `channelsIn`],
    ChannelsOut: [, import_smithy_client.expectInt32, `channelsOut`]
  });
}, "de_RemixSettings");
var de_ReservationPlan = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Commitment: [, import_smithy_client.expectString, `commitment`],
    ExpiresAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `expiresAt`],
    PurchasedAt: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `purchasedAt`],
    RenewalType: [, import_smithy_client.expectString, `renewalType`],
    ReservedSlots: [, import_smithy_client.expectInt32, `reservedSlots`],
    Status: [, import_smithy_client.expectString, `status`]
  });
}, "de_ReservationPlan");
var de_ResourceTags = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Arn: [, import_smithy_client.expectString, `arn`],
    Tags: [, import_smithy_client._json, `tags`]
  });
}, "de_ResourceTags");
var de_S3DestinationAccessControl = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CannedAcl: [, import_smithy_client.expectString, `cannedAcl`]
  });
}, "de_S3DestinationAccessControl");
var de_S3DestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AccessControl: [, (_) => de_S3DestinationAccessControl(_, context), `accessControl`],
    Encryption: [, (_) => de_S3EncryptionSettings(_, context), `encryption`],
    StorageClass: [, import_smithy_client.expectString, `storageClass`]
  });
}, "de_S3DestinationSettings");
var de_S3EncryptionSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EncryptionType: [, import_smithy_client.expectString, `encryptionType`],
    KmsEncryptionContext: [, import_smithy_client.expectString, `kmsEncryptionContext`],
    KmsKeyArn: [, import_smithy_client.expectString, `kmsKeyArn`]
  });
}, "de_S3EncryptionSettings");
var de_SccDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Framerate: [, import_smithy_client.expectString, `framerate`]
  });
}, "de_SccDestinationSettings");
var de_ServiceOverride = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Message: [, import_smithy_client.expectString, `message`],
    Name: [, import_smithy_client.expectString, `name`],
    OverrideValue: [, import_smithy_client.expectString, `overrideValue`],
    Value: [, import_smithy_client.expectString, `value`]
  });
}, "de_ServiceOverride");
var de_SpekeKeyProvider = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CertificateArn: [, import_smithy_client.expectString, `certificateArn`],
    EncryptionContractConfiguration: [
      ,
      (_) => de_EncryptionContractConfiguration(_, context),
      `encryptionContractConfiguration`
    ],
    ResourceId: [, import_smithy_client.expectString, `resourceId`],
    SystemIds: [, import_smithy_client._json, `systemIds`],
    Url: [, import_smithy_client.expectString, `url`]
  });
}, "de_SpekeKeyProvider");
var de_SpekeKeyProviderCmaf = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    CertificateArn: [, import_smithy_client.expectString, `certificateArn`],
    DashSignaledSystemIds: [, import_smithy_client._json, `dashSignaledSystemIds`],
    EncryptionContractConfiguration: [
      ,
      (_) => de_EncryptionContractConfiguration(_, context),
      `encryptionContractConfiguration`
    ],
    HlsSignaledSystemIds: [, import_smithy_client._json, `hlsSignaledSystemIds`],
    ResourceId: [, import_smithy_client.expectString, `resourceId`],
    Url: [, import_smithy_client.expectString, `url`]
  });
}, "de_SpekeKeyProviderCmaf");
var de_SrtDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    StylePassthrough: [, import_smithy_client.expectString, `stylePassthrough`]
  });
}, "de_SrtDestinationSettings");
var de_StaticKeyProvider = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    KeyFormat: [, import_smithy_client.expectString, `keyFormat`],
    KeyFormatVersions: [, import_smithy_client.expectString, `keyFormatVersions`],
    StaticKeyValue: [, import_smithy_client.expectString, `staticKeyValue`],
    Url: [, import_smithy_client.expectString, `url`]
  });
}, "de_StaticKeyProvider");
var de_TeletextDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PageNumber: [, import_smithy_client.expectString, `pageNumber`],
    PageTypes: [, import_smithy_client._json, `pageTypes`]
  });
}, "de_TeletextDestinationSettings");
var de_TeletextSourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    PageNumber: [, import_smithy_client.expectString, `pageNumber`]
  });
}, "de_TeletextSourceSettings");
var de_TimecodeBurnin = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FontSize: [, import_smithy_client.expectInt32, `fontSize`],
    Position: [, import_smithy_client.expectString, `position`],
    Prefix: [, import_smithy_client.expectString, `prefix`]
  });
}, "de_TimecodeBurnin");
var de_TimecodeConfig = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Anchor: [, import_smithy_client.expectString, `anchor`],
    Source: [, import_smithy_client.expectString, `source`],
    Start: [, import_smithy_client.expectString, `start`],
    TimestampOffset: [, import_smithy_client.expectString, `timestampOffset`]
  });
}, "de_TimecodeConfig");
var de_TimedMetadataInsertion = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Id3Insertions: [, (_) => de___listOfId3Insertion(_, context), `id3Insertions`]
  });
}, "de_TimedMetadataInsertion");
var de_Timing = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FinishTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `finishTime`],
    StartTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `startTime`],
    SubmitTime: [, (_) => (0, import_smithy_client.expectNonNull)((0, import_smithy_client.parseEpochTimestamp)((0, import_smithy_client.expectNumber)(_))), `submitTime`]
  });
}, "de_Timing");
var de_Track = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioProperties: [, (_) => de_AudioProperties(_, context), `audioProperties`],
    Codec: [, import_smithy_client.expectString, `codec`],
    DataProperties: [, (_) => de_DataProperties(_, context), `dataProperties`],
    Duration: [, import_smithy_client.limitedParseDouble, `duration`],
    Index: [, import_smithy_client.expectInt32, `index`],
    TrackType: [, import_smithy_client.expectString, `trackType`],
    VideoProperties: [, (_) => de_VideoProperties(_, context), `videoProperties`]
  });
}, "de_Track");
var de_TrackMapping = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AudioTrackIndexes: [, import_smithy_client._json, `audioTrackIndexes`],
    DataTrackIndexes: [, import_smithy_client._json, `dataTrackIndexes`],
    VideoTrackIndexes: [, import_smithy_client._json, `videoTrackIndexes`]
  });
}, "de_TrackMapping");
var de_TrackSourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    TrackNumber: [, import_smithy_client.expectInt32, `trackNumber`]
  });
}, "de_TrackSourceSettings");
var de_TtmlDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    StylePassthrough: [, import_smithy_client.expectString, `stylePassthrough`]
  });
}, "de_TtmlDestinationSettings");
var de_UncompressedSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Fourcc: [, import_smithy_client.expectString, `fourcc`],
    FramerateControl: [, import_smithy_client.expectString, `framerateControl`],
    FramerateConversionAlgorithm: [, import_smithy_client.expectString, `framerateConversionAlgorithm`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    InterlaceMode: [, import_smithy_client.expectString, `interlaceMode`],
    ScanTypeConversionMode: [, import_smithy_client.expectString, `scanTypeConversionMode`],
    SlowPal: [, import_smithy_client.expectString, `slowPal`],
    Telecine: [, import_smithy_client.expectString, `telecine`]
  });
}, "de_UncompressedSettings");
var de_Vc3Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FramerateControl: [, import_smithy_client.expectString, `framerateControl`],
    FramerateConversionAlgorithm: [, import_smithy_client.expectString, `framerateConversionAlgorithm`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    InterlaceMode: [, import_smithy_client.expectString, `interlaceMode`],
    ScanTypeConversionMode: [, import_smithy_client.expectString, `scanTypeConversionMode`],
    SlowPal: [, import_smithy_client.expectString, `slowPal`],
    Telecine: [, import_smithy_client.expectString, `telecine`],
    Vc3Class: [, import_smithy_client.expectString, `vc3Class`]
  });
}, "de_Vc3Settings");
var de_VideoCodecSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Av1Settings: [, (_) => de_Av1Settings(_, context), `av1Settings`],
    AvcIntraSettings: [, (_) => de_AvcIntraSettings(_, context), `avcIntraSettings`],
    Codec: [, import_smithy_client.expectString, `codec`],
    FrameCaptureSettings: [, (_) => de_FrameCaptureSettings(_, context), `frameCaptureSettings`],
    GifSettings: [, (_) => de_GifSettings(_, context), `gifSettings`],
    H264Settings: [, (_) => de_H264Settings(_, context), `h264Settings`],
    H265Settings: [, (_) => de_H265Settings(_, context), `h265Settings`],
    Mpeg2Settings: [, (_) => de_Mpeg2Settings(_, context), `mpeg2Settings`],
    ProresSettings: [, (_) => de_ProresSettings(_, context), `proresSettings`],
    UncompressedSettings: [, (_) => de_UncompressedSettings(_, context), `uncompressedSettings`],
    Vc3Settings: [, (_) => de_Vc3Settings(_, context), `vc3Settings`],
    Vp8Settings: [, (_) => de_Vp8Settings(_, context), `vp8Settings`],
    Vp9Settings: [, (_) => de_Vp9Settings(_, context), `vp9Settings`],
    XavcSettings: [, (_) => de_XavcSettings(_, context), `xavcSettings`]
  });
}, "de_VideoCodecSettings");
var de_VideoDescription = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AfdSignaling: [, import_smithy_client.expectString, `afdSignaling`],
    AntiAlias: [, import_smithy_client.expectString, `antiAlias`],
    ChromaPositionMode: [, import_smithy_client.expectString, `chromaPositionMode`],
    CodecSettings: [, (_) => de_VideoCodecSettings(_, context), `codecSettings`],
    ColorMetadata: [, import_smithy_client.expectString, `colorMetadata`],
    Crop: [, (_) => de_Rectangle(_, context), `crop`],
    DropFrameTimecode: [, import_smithy_client.expectString, `dropFrameTimecode`],
    FixedAfd: [, import_smithy_client.expectInt32, `fixedAfd`],
    Height: [, import_smithy_client.expectInt32, `height`],
    Position: [, (_) => de_Rectangle(_, context), `position`],
    RespondToAfd: [, import_smithy_client.expectString, `respondToAfd`],
    ScalingBehavior: [, import_smithy_client.expectString, `scalingBehavior`],
    Sharpness: [, import_smithy_client.expectInt32, `sharpness`],
    TimecodeInsertion: [, import_smithy_client.expectString, `timecodeInsertion`],
    TimecodeTrack: [, import_smithy_client.expectString, `timecodeTrack`],
    VideoPreprocessors: [, (_) => de_VideoPreprocessor(_, context), `videoPreprocessors`],
    Width: [, import_smithy_client.expectInt32, `width`]
  });
}, "de_VideoDescription");
var de_VideoDetail = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    HeightInPx: [, import_smithy_client.expectInt32, `heightInPx`],
    WidthInPx: [, import_smithy_client.expectInt32, `widthInPx`]
  });
}, "de_VideoDetail");
var de_VideoOverlay = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Crop: [, (_) => de_VideoOverlayCrop(_, context), `crop`],
    EndTimecode: [, import_smithy_client.expectString, `endTimecode`],
    InitialPosition: [, (_) => de_VideoOverlayPosition(_, context), `initialPosition`],
    Input: [, (_) => de_VideoOverlayInput(_, context), `input`],
    Playback: [, import_smithy_client.expectString, `playback`],
    StartTimecode: [, import_smithy_client.expectString, `startTimecode`],
    Transitions: [, (_) => de___listOfVideoOverlayTransition(_, context), `transitions`]
  });
}, "de_VideoOverlay");
var de_VideoOverlayCrop = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Height: [, import_smithy_client.expectInt32, `height`],
    Unit: [, import_smithy_client.expectString, `unit`],
    Width: [, import_smithy_client.expectInt32, `width`],
    X: [, import_smithy_client.expectInt32, `x`],
    Y: [, import_smithy_client.expectInt32, `y`]
  });
}, "de_VideoOverlayCrop");
var de_VideoOverlayInput = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    FileInput: [, import_smithy_client.expectString, `fileInput`],
    InputClippings: [, (_) => de___listOfVideoOverlayInputClipping(_, context), `inputClippings`],
    TimecodeSource: [, import_smithy_client.expectString, `timecodeSource`],
    TimecodeStart: [, import_smithy_client.expectString, `timecodeStart`]
  });
}, "de_VideoOverlayInput");
var de_VideoOverlayInputClipping = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EndTimecode: [, import_smithy_client.expectString, `endTimecode`],
    StartTimecode: [, import_smithy_client.expectString, `startTimecode`]
  });
}, "de_VideoOverlayInputClipping");
var de_VideoOverlayPosition = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Height: [, import_smithy_client.expectInt32, `height`],
    Unit: [, import_smithy_client.expectString, `unit`],
    Width: [, import_smithy_client.expectInt32, `width`],
    XPosition: [, import_smithy_client.expectInt32, `xPosition`],
    YPosition: [, import_smithy_client.expectInt32, `yPosition`]
  });
}, "de_VideoOverlayPosition");
var de_VideoOverlayTransition = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    EndPosition: [, (_) => de_VideoOverlayPosition(_, context), `endPosition`],
    EndTimecode: [, import_smithy_client.expectString, `endTimecode`],
    StartTimecode: [, import_smithy_client.expectString, `startTimecode`]
  });
}, "de_VideoOverlayTransition");
var de_VideoPreprocessor = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    ColorCorrector: [, (_) => de_ColorCorrector(_, context), `colorCorrector`],
    Deinterlacer: [, (_) => de_Deinterlacer(_, context), `deinterlacer`],
    DolbyVision: [, (_) => de_DolbyVision(_, context), `dolbyVision`],
    Hdr10Plus: [, (_) => de_Hdr10Plus(_, context), `hdr10Plus`],
    ImageInserter: [, (_) => de_ImageInserter(_, context), `imageInserter`],
    NoiseReducer: [, (_) => de_NoiseReducer(_, context), `noiseReducer`],
    PartnerWatermarking: [, (_) => de_PartnerWatermarking(_, context), `partnerWatermarking`],
    TimecodeBurnin: [, (_) => de_TimecodeBurnin(_, context), `timecodeBurnin`]
  });
}, "de_VideoPreprocessor");
var de_VideoProperties = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BitDepth: [, import_smithy_client.expectInt32, `bitDepth`],
    BitRate: [, import_smithy_client.expectLong, `bitRate`],
    ColorPrimaries: [, import_smithy_client.expectString, `colorPrimaries`],
    FrameRate: [, (_) => de_FrameRate(_, context), `frameRate`],
    Height: [, import_smithy_client.expectInt32, `height`],
    MatrixCoefficients: [, import_smithy_client.expectString, `matrixCoefficients`],
    TransferCharacteristics: [, import_smithy_client.expectString, `transferCharacteristics`],
    Width: [, import_smithy_client.expectInt32, `width`]
  });
}, "de_VideoProperties");
var de_VideoSelector = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AlphaBehavior: [, import_smithy_client.expectString, `alphaBehavior`],
    ColorSpace: [, import_smithy_client.expectString, `colorSpace`],
    ColorSpaceUsage: [, import_smithy_client.expectString, `colorSpaceUsage`],
    EmbeddedTimecodeOverride: [, import_smithy_client.expectString, `embeddedTimecodeOverride`],
    Hdr10Metadata: [, (_) => de_Hdr10Metadata(_, context), `hdr10Metadata`],
    MaxLuminance: [, import_smithy_client.expectInt32, `maxLuminance`],
    PadVideo: [, import_smithy_client.expectString, `padVideo`],
    Pid: [, import_smithy_client.expectInt32, `pid`],
    ProgramNumber: [, import_smithy_client.expectInt32, `programNumber`],
    Rotate: [, import_smithy_client.expectString, `rotate`],
    SampleRange: [, import_smithy_client.expectString, `sampleRange`]
  });
}, "de_VideoSelector");
var de_VorbisSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Channels: [, import_smithy_client.expectInt32, `channels`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`],
    VbrQuality: [, import_smithy_client.expectInt32, `vbrQuality`]
  });
}, "de_VorbisSettings");
var de_Vp8Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    FramerateControl: [, import_smithy_client.expectString, `framerateControl`],
    FramerateConversionAlgorithm: [, import_smithy_client.expectString, `framerateConversionAlgorithm`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    GopSize: [, import_smithy_client.limitedParseDouble, `gopSize`],
    HrdBufferSize: [, import_smithy_client.expectInt32, `hrdBufferSize`],
    MaxBitrate: [, import_smithy_client.expectInt32, `maxBitrate`],
    ParControl: [, import_smithy_client.expectString, `parControl`],
    ParDenominator: [, import_smithy_client.expectInt32, `parDenominator`],
    ParNumerator: [, import_smithy_client.expectInt32, `parNumerator`],
    QualityTuningLevel: [, import_smithy_client.expectString, `qualityTuningLevel`],
    RateControlMode: [, import_smithy_client.expectString, `rateControlMode`]
  });
}, "de_Vp8Settings");
var de_Vp9Settings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Bitrate: [, import_smithy_client.expectInt32, `bitrate`],
    FramerateControl: [, import_smithy_client.expectString, `framerateControl`],
    FramerateConversionAlgorithm: [, import_smithy_client.expectString, `framerateConversionAlgorithm`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    GopSize: [, import_smithy_client.limitedParseDouble, `gopSize`],
    HrdBufferSize: [, import_smithy_client.expectInt32, `hrdBufferSize`],
    MaxBitrate: [, import_smithy_client.expectInt32, `maxBitrate`],
    ParControl: [, import_smithy_client.expectString, `parControl`],
    ParDenominator: [, import_smithy_client.expectInt32, `parDenominator`],
    ParNumerator: [, import_smithy_client.expectInt32, `parNumerator`],
    QualityTuningLevel: [, import_smithy_client.expectString, `qualityTuningLevel`],
    RateControlMode: [, import_smithy_client.expectString, `rateControlMode`]
  });
}, "de_Vp9Settings");
var de_WarningGroup = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Code: [, import_smithy_client.expectInt32, `code`],
    Count: [, import_smithy_client.expectInt32, `count`]
  });
}, "de_WarningGroup");
var de_WavSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BitDepth: [, import_smithy_client.expectInt32, `bitDepth`],
    Channels: [, import_smithy_client.expectInt32, `channels`],
    Format: [, import_smithy_client.expectString, `format`],
    SampleRate: [, import_smithy_client.expectInt32, `sampleRate`]
  });
}, "de_WavSettings");
var de_WebvttDestinationSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    Accessibility: [, import_smithy_client.expectString, `accessibility`],
    StylePassthrough: [, import_smithy_client.expectString, `stylePassthrough`]
  });
}, "de_WebvttDestinationSettings");
var de_WebvttHlsSourceSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    RenditionGroupId: [, import_smithy_client.expectString, `renditionGroupId`],
    RenditionLanguageCode: [, import_smithy_client.expectString, `renditionLanguageCode`],
    RenditionName: [, import_smithy_client.expectString, `renditionName`]
  });
}, "de_WebvttHlsSourceSettings");
var de_Xavc4kIntraCbgProfileSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    XavcClass: [, import_smithy_client.expectString, `xavcClass`]
  });
}, "de_Xavc4kIntraCbgProfileSettings");
var de_Xavc4kIntraVbrProfileSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    XavcClass: [, import_smithy_client.expectString, `xavcClass`]
  });
}, "de_Xavc4kIntraVbrProfileSettings");
var de_Xavc4kProfileSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BitrateClass: [, import_smithy_client.expectString, `bitrateClass`],
    CodecProfile: [, import_smithy_client.expectString, `codecProfile`],
    FlickerAdaptiveQuantization: [, import_smithy_client.expectString, `flickerAdaptiveQuantization`],
    GopBReference: [, import_smithy_client.expectString, `gopBReference`],
    GopClosedCadence: [, import_smithy_client.expectInt32, `gopClosedCadence`],
    HrdBufferSize: [, import_smithy_client.expectInt32, `hrdBufferSize`],
    QualityTuningLevel: [, import_smithy_client.expectString, `qualityTuningLevel`],
    Slices: [, import_smithy_client.expectInt32, `slices`]
  });
}, "de_Xavc4kProfileSettings");
var de_XavcHdIntraCbgProfileSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    XavcClass: [, import_smithy_client.expectString, `xavcClass`]
  });
}, "de_XavcHdIntraCbgProfileSettings");
var de_XavcHdProfileSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    BitrateClass: [, import_smithy_client.expectString, `bitrateClass`],
    FlickerAdaptiveQuantization: [, import_smithy_client.expectString, `flickerAdaptiveQuantization`],
    GopBReference: [, import_smithy_client.expectString, `gopBReference`],
    GopClosedCadence: [, import_smithy_client.expectInt32, `gopClosedCadence`],
    HrdBufferSize: [, import_smithy_client.expectInt32, `hrdBufferSize`],
    InterlaceMode: [, import_smithy_client.expectString, `interlaceMode`],
    QualityTuningLevel: [, import_smithy_client.expectString, `qualityTuningLevel`],
    Slices: [, import_smithy_client.expectInt32, `slices`],
    Telecine: [, import_smithy_client.expectString, `telecine`]
  });
}, "de_XavcHdProfileSettings");
var de_XavcSettings = /* @__PURE__ */ __name((output, context) => {
  return (0, import_smithy_client.take)(output, {
    AdaptiveQuantization: [, import_smithy_client.expectString, `adaptiveQuantization`],
    EntropyEncoding: [, import_smithy_client.expectString, `entropyEncoding`],
    FramerateControl: [, import_smithy_client.expectString, `framerateControl`],
    FramerateConversionAlgorithm: [, import_smithy_client.expectString, `framerateConversionAlgorithm`],
    FramerateDenominator: [, import_smithy_client.expectInt32, `framerateDenominator`],
    FramerateNumerator: [, import_smithy_client.expectInt32, `framerateNumerator`],
    PerFrameMetrics: [, import_smithy_client._json, `perFrameMetrics`],
    Profile: [, import_smithy_client.expectString, `profile`],
    SlowPal: [, import_smithy_client.expectString, `slowPal`],
    Softness: [, import_smithy_client.expectInt32, `softness`],
    SpatialAdaptiveQuantization: [, import_smithy_client.expectString, `spatialAdaptiveQuantization`],
    TemporalAdaptiveQuantization: [, import_smithy_client.expectString, `temporalAdaptiveQuantization`],
    Xavc4kIntraCbgProfileSettings: [
      ,
      (_) => de_Xavc4kIntraCbgProfileSettings(_, context),
      `xavc4kIntraCbgProfileSettings`
    ],
    Xavc4kIntraVbrProfileSettings: [
      ,
      (_) => de_Xavc4kIntraVbrProfileSettings(_, context),
      `xavc4kIntraVbrProfileSettings`
    ],
    Xavc4kProfileSettings: [, (_) => de_Xavc4kProfileSettings(_, context), `xavc4kProfileSettings`],
    XavcHdIntraCbgProfileSettings: [
      ,
      (_) => de_XavcHdIntraCbgProfileSettings(_, context),
      `xavcHdIntraCbgProfileSettings`
    ],
    XavcHdProfileSettings: [, (_) => de_XavcHdProfileSettings(_, context), `xavcHdProfileSettings`]
  });
}, "de_XavcSettings");
var deserializeMetadata = /* @__PURE__ */ __name((output) => ({
  httpStatusCode: output.statusCode,
  requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
  extendedRequestId: output.headers["x-amz-id-2"],
  cfId: output.headers["x-amz-cf-id"]
}), "deserializeMetadata");
var _C = "Category";
var _IF = "InputFile";
var _LB = "ListBy";
var _MR = "MaxResults";
var _NT = "NextToken";
var _O = "Order";
var _Q = "Queue";
var _S = "Status";
var _c = "category";
var _iF = "inputFile";
var _lB = "listBy";
var _mR = "maxResults";
var _nT = "nextToken";
var _o = "order";
var _q = "queue";
var _s = "status";

// src/commands/AssociateCertificateCommand.ts
var AssociateCertificateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "AssociateCertificate", {}).n("MediaConvertClient", "AssociateCertificateCommand").f(void 0, void 0).ser(se_AssociateCertificateCommand).de(de_AssociateCertificateCommand).build() {
  static {
    __name(this, "AssociateCertificateCommand");
  }
};

// src/commands/CancelJobCommand.ts



var CancelJobCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "CancelJob", {}).n("MediaConvertClient", "CancelJobCommand").f(void 0, void 0).ser(se_CancelJobCommand).de(de_CancelJobCommand).build() {
  static {
    __name(this, "CancelJobCommand");
  }
};

// src/commands/CreateJobCommand.ts



var CreateJobCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "CreateJob", {}).n("MediaConvertClient", "CreateJobCommand").f(void 0, void 0).ser(se_CreateJobCommand).de(de_CreateJobCommand).build() {
  static {
    __name(this, "CreateJobCommand");
  }
};

// src/commands/CreateJobTemplateCommand.ts



var CreateJobTemplateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "CreateJobTemplate", {}).n("MediaConvertClient", "CreateJobTemplateCommand").f(void 0, void 0).ser(se_CreateJobTemplateCommand).de(de_CreateJobTemplateCommand).build() {
  static {
    __name(this, "CreateJobTemplateCommand");
  }
};

// src/commands/CreatePresetCommand.ts



var CreatePresetCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "CreatePreset", {}).n("MediaConvertClient", "CreatePresetCommand").f(void 0, void 0).ser(se_CreatePresetCommand).de(de_CreatePresetCommand).build() {
  static {
    __name(this, "CreatePresetCommand");
  }
};

// src/commands/CreateQueueCommand.ts



var CreateQueueCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "CreateQueue", {}).n("MediaConvertClient", "CreateQueueCommand").f(void 0, void 0).ser(se_CreateQueueCommand).de(de_CreateQueueCommand).build() {
  static {
    __name(this, "CreateQueueCommand");
  }
};

// src/commands/DeleteJobTemplateCommand.ts



var DeleteJobTemplateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "DeleteJobTemplate", {}).n("MediaConvertClient", "DeleteJobTemplateCommand").f(void 0, void 0).ser(se_DeleteJobTemplateCommand).de(de_DeleteJobTemplateCommand).build() {
  static {
    __name(this, "DeleteJobTemplateCommand");
  }
};

// src/commands/DeletePolicyCommand.ts



var DeletePolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "DeletePolicy", {}).n("MediaConvertClient", "DeletePolicyCommand").f(void 0, void 0).ser(se_DeletePolicyCommand).de(de_DeletePolicyCommand).build() {
  static {
    __name(this, "DeletePolicyCommand");
  }
};

// src/commands/DeletePresetCommand.ts



var DeletePresetCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "DeletePreset", {}).n("MediaConvertClient", "DeletePresetCommand").f(void 0, void 0).ser(se_DeletePresetCommand).de(de_DeletePresetCommand).build() {
  static {
    __name(this, "DeletePresetCommand");
  }
};

// src/commands/DeleteQueueCommand.ts



var DeleteQueueCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "DeleteQueue", {}).n("MediaConvertClient", "DeleteQueueCommand").f(void 0, void 0).ser(se_DeleteQueueCommand).de(de_DeleteQueueCommand).build() {
  static {
    __name(this, "DeleteQueueCommand");
  }
};

// src/commands/DescribeEndpointsCommand.ts



var DescribeEndpointsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "DescribeEndpoints", {}).n("MediaConvertClient", "DescribeEndpointsCommand").f(void 0, void 0).ser(se_DescribeEndpointsCommand).de(de_DescribeEndpointsCommand).build() {
  static {
    __name(this, "DescribeEndpointsCommand");
  }
};

// src/commands/DisassociateCertificateCommand.ts



var DisassociateCertificateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "DisassociateCertificate", {}).n("MediaConvertClient", "DisassociateCertificateCommand").f(void 0, void 0).ser(se_DisassociateCertificateCommand).de(de_DisassociateCertificateCommand).build() {
  static {
    __name(this, "DisassociateCertificateCommand");
  }
};

// src/commands/GetJobCommand.ts



var GetJobCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "GetJob", {}).n("MediaConvertClient", "GetJobCommand").f(void 0, void 0).ser(se_GetJobCommand).de(de_GetJobCommand).build() {
  static {
    __name(this, "GetJobCommand");
  }
};

// src/commands/GetJobTemplateCommand.ts



var GetJobTemplateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "GetJobTemplate", {}).n("MediaConvertClient", "GetJobTemplateCommand").f(void 0, void 0).ser(se_GetJobTemplateCommand).de(de_GetJobTemplateCommand).build() {
  static {
    __name(this, "GetJobTemplateCommand");
  }
};

// src/commands/GetPolicyCommand.ts



var GetPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "GetPolicy", {}).n("MediaConvertClient", "GetPolicyCommand").f(void 0, void 0).ser(se_GetPolicyCommand).de(de_GetPolicyCommand).build() {
  static {
    __name(this, "GetPolicyCommand");
  }
};

// src/commands/GetPresetCommand.ts



var GetPresetCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "GetPreset", {}).n("MediaConvertClient", "GetPresetCommand").f(void 0, void 0).ser(se_GetPresetCommand).de(de_GetPresetCommand).build() {
  static {
    __name(this, "GetPresetCommand");
  }
};

// src/commands/GetQueueCommand.ts



var GetQueueCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "GetQueue", {}).n("MediaConvertClient", "GetQueueCommand").f(void 0, void 0).ser(se_GetQueueCommand).de(de_GetQueueCommand).build() {
  static {
    __name(this, "GetQueueCommand");
  }
};

// src/commands/ListJobsCommand.ts



var ListJobsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "ListJobs", {}).n("MediaConvertClient", "ListJobsCommand").f(void 0, void 0).ser(se_ListJobsCommand).de(de_ListJobsCommand).build() {
  static {
    __name(this, "ListJobsCommand");
  }
};

// src/commands/ListJobTemplatesCommand.ts



var ListJobTemplatesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "ListJobTemplates", {}).n("MediaConvertClient", "ListJobTemplatesCommand").f(void 0, void 0).ser(se_ListJobTemplatesCommand).de(de_ListJobTemplatesCommand).build() {
  static {
    __name(this, "ListJobTemplatesCommand");
  }
};

// src/commands/ListPresetsCommand.ts



var ListPresetsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "ListPresets", {}).n("MediaConvertClient", "ListPresetsCommand").f(void 0, void 0).ser(se_ListPresetsCommand).de(de_ListPresetsCommand).build() {
  static {
    __name(this, "ListPresetsCommand");
  }
};

// src/commands/ListQueuesCommand.ts



var ListQueuesCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "ListQueues", {}).n("MediaConvertClient", "ListQueuesCommand").f(void 0, void 0).ser(se_ListQueuesCommand).de(de_ListQueuesCommand).build() {
  static {
    __name(this, "ListQueuesCommand");
  }
};

// src/commands/ListTagsForResourceCommand.ts



var ListTagsForResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "ListTagsForResource", {}).n("MediaConvertClient", "ListTagsForResourceCommand").f(void 0, void 0).ser(se_ListTagsForResourceCommand).de(de_ListTagsForResourceCommand).build() {
  static {
    __name(this, "ListTagsForResourceCommand");
  }
};

// src/commands/ListVersionsCommand.ts



var ListVersionsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "ListVersions", {}).n("MediaConvertClient", "ListVersionsCommand").f(void 0, void 0).ser(se_ListVersionsCommand).de(de_ListVersionsCommand).build() {
  static {
    __name(this, "ListVersionsCommand");
  }
};

// src/commands/ProbeCommand.ts



var ProbeCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "Probe", {}).n("MediaConvertClient", "ProbeCommand").f(void 0, void 0).ser(se_ProbeCommand).de(de_ProbeCommand).build() {
  static {
    __name(this, "ProbeCommand");
  }
};

// src/commands/PutPolicyCommand.ts



var PutPolicyCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "PutPolicy", {}).n("MediaConvertClient", "PutPolicyCommand").f(void 0, void 0).ser(se_PutPolicyCommand).de(de_PutPolicyCommand).build() {
  static {
    __name(this, "PutPolicyCommand");
  }
};

// src/commands/SearchJobsCommand.ts



var SearchJobsCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "SearchJobs", {}).n("MediaConvertClient", "SearchJobsCommand").f(void 0, void 0).ser(se_SearchJobsCommand).de(de_SearchJobsCommand).build() {
  static {
    __name(this, "SearchJobsCommand");
  }
};

// src/commands/TagResourceCommand.ts



var TagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "TagResource", {}).n("MediaConvertClient", "TagResourceCommand").f(void 0, void 0).ser(se_TagResourceCommand).de(de_TagResourceCommand).build() {
  static {
    __name(this, "TagResourceCommand");
  }
};

// src/commands/UntagResourceCommand.ts



var UntagResourceCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "UntagResource", {}).n("MediaConvertClient", "UntagResourceCommand").f(void 0, void 0).ser(se_UntagResourceCommand).de(de_UntagResourceCommand).build() {
  static {
    __name(this, "UntagResourceCommand");
  }
};

// src/commands/UpdateJobTemplateCommand.ts



var UpdateJobTemplateCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "UpdateJobTemplate", {}).n("MediaConvertClient", "UpdateJobTemplateCommand").f(void 0, void 0).ser(se_UpdateJobTemplateCommand).de(de_UpdateJobTemplateCommand).build() {
  static {
    __name(this, "UpdateJobTemplateCommand");
  }
};

// src/commands/UpdatePresetCommand.ts



var UpdatePresetCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "UpdatePreset", {}).n("MediaConvertClient", "UpdatePresetCommand").f(void 0, void 0).ser(se_UpdatePresetCommand).de(de_UpdatePresetCommand).build() {
  static {
    __name(this, "UpdatePresetCommand");
  }
};

// src/commands/UpdateQueueCommand.ts



var UpdateQueueCommand = class extends import_smithy_client.Command.classBuilder().ep(commonParams).m(function(Command, cs, config, o) {
  return [
    (0, import_middleware_serde.getSerdePlugin)(config, this.serialize, this.deserialize),
    (0, import_middleware_endpoint.getEndpointPlugin)(config, Command.getEndpointParameterInstructions())
  ];
}).s("MediaConvert", "UpdateQueue", {}).n("MediaConvertClient", "UpdateQueueCommand").f(void 0, void 0).ser(se_UpdateQueueCommand).de(de_UpdateQueueCommand).build() {
  static {
    __name(this, "UpdateQueueCommand");
  }
};

// src/MediaConvert.ts
var commands = {
  AssociateCertificateCommand,
  CancelJobCommand,
  CreateJobCommand,
  CreateJobTemplateCommand,
  CreatePresetCommand,
  CreateQueueCommand,
  DeleteJobTemplateCommand,
  DeletePolicyCommand,
  DeletePresetCommand,
  DeleteQueueCommand,
  DescribeEndpointsCommand,
  DisassociateCertificateCommand,
  GetJobCommand,
  GetJobTemplateCommand,
  GetPolicyCommand,
  GetPresetCommand,
  GetQueueCommand,
  ListJobsCommand,
  ListJobTemplatesCommand,
  ListPresetsCommand,
  ListQueuesCommand,
  ListTagsForResourceCommand,
  ListVersionsCommand,
  ProbeCommand,
  PutPolicyCommand,
  SearchJobsCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateJobTemplateCommand,
  UpdatePresetCommand,
  UpdateQueueCommand
};
var MediaConvert = class extends MediaConvertClient {
  static {
    __name(this, "MediaConvert");
  }
};
(0, import_smithy_client.createAggregatedClient)(commands, MediaConvert);

// src/pagination/DescribeEndpointsPaginator.ts

var paginateDescribeEndpoints = (0, import_core.createPaginator)(MediaConvertClient, DescribeEndpointsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListJobTemplatesPaginator.ts

var paginateListJobTemplates = (0, import_core.createPaginator)(MediaConvertClient, ListJobTemplatesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListJobsPaginator.ts

var paginateListJobs = (0, import_core.createPaginator)(MediaConvertClient, ListJobsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListPresetsPaginator.ts

var paginateListPresets = (0, import_core.createPaginator)(MediaConvertClient, ListPresetsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListQueuesPaginator.ts

var paginateListQueues = (0, import_core.createPaginator)(MediaConvertClient, ListQueuesCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/ListVersionsPaginator.ts

var paginateListVersions = (0, import_core.createPaginator)(MediaConvertClient, ListVersionsCommand, "NextToken", "NextToken", "MaxResults");

// src/pagination/SearchJobsPaginator.ts

var paginateSearchJobs = (0, import_core.createPaginator)(MediaConvertClient, SearchJobsCommand, "NextToken", "NextToken", "MaxResults");

// src/models/models_0.ts
var RequiredFlag = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var AudioChannelTag = {
  C: "C",
  CS: "CS",
  HI: "HI",
  L: "L",
  LC: "LC",
  LFE: "LFE",
  LFE2: "LFE2",
  LS: "LS",
  LSD: "LSD",
  LT: "LT",
  LW: "LW",
  M: "M",
  NAR: "NAR",
  R: "R",
  RC: "RC",
  RS: "RS",
  RSD: "RSD",
  RSL: "RSL",
  RSR: "RSR",
  RT: "RT",
  RW: "RW",
  TBC: "TBC",
  TBL: "TBL",
  TBR: "TBR",
  TCS: "TCS",
  VHC: "VHC",
  VHL: "VHL",
  VHR: "VHR"
};
var AudioNormalizationAlgorithm = {
  ITU_BS_1770_1: "ITU_BS_1770_1",
  ITU_BS_1770_2: "ITU_BS_1770_2",
  ITU_BS_1770_3: "ITU_BS_1770_3",
  ITU_BS_1770_4: "ITU_BS_1770_4"
};
var AudioNormalizationAlgorithmControl = {
  CORRECT_AUDIO: "CORRECT_AUDIO",
  MEASURE_ONLY: "MEASURE_ONLY"
};
var AudioNormalizationLoudnessLogging = {
  DONT_LOG: "DONT_LOG",
  LOG: "LOG"
};
var AudioNormalizationPeakCalculation = {
  NONE: "NONE",
  TRUE_PEAK: "TRUE_PEAK"
};
var AudioTypeControl = {
  FOLLOW_INPUT: "FOLLOW_INPUT",
  USE_CONFIGURED: "USE_CONFIGURED"
};
var AacAudioDescriptionBroadcasterMix = {
  BROADCASTER_MIXED_AD: "BROADCASTER_MIXED_AD",
  NORMAL: "NORMAL"
};
var AacCodecProfile = {
  HEV1: "HEV1",
  HEV2: "HEV2",
  LC: "LC"
};
var AacCodingMode = {
  AD_RECEIVER_MIX: "AD_RECEIVER_MIX",
  CODING_MODE_1_0: "CODING_MODE_1_0",
  CODING_MODE_1_1: "CODING_MODE_1_1",
  CODING_MODE_2_0: "CODING_MODE_2_0",
  CODING_MODE_5_1: "CODING_MODE_5_1"
};
var AacRateControlMode = {
  CBR: "CBR",
  VBR: "VBR"
};
var AacRawFormat = {
  LATM_LOAS: "LATM_LOAS",
  NONE: "NONE"
};
var AacSpecification = {
  MPEG2: "MPEG2",
  MPEG4: "MPEG4"
};
var AacVbrQuality = {
  HIGH: "HIGH",
  LOW: "LOW",
  MEDIUM_HIGH: "MEDIUM_HIGH",
  MEDIUM_LOW: "MEDIUM_LOW"
};
var Ac3BitstreamMode = {
  COMMENTARY: "COMMENTARY",
  COMPLETE_MAIN: "COMPLETE_MAIN",
  DIALOGUE: "DIALOGUE",
  EMERGENCY: "EMERGENCY",
  HEARING_IMPAIRED: "HEARING_IMPAIRED",
  MUSIC_AND_EFFECTS: "MUSIC_AND_EFFECTS",
  VISUALLY_IMPAIRED: "VISUALLY_IMPAIRED",
  VOICE_OVER: "VOICE_OVER"
};
var Ac3CodingMode = {
  CODING_MODE_1_0: "CODING_MODE_1_0",
  CODING_MODE_1_1: "CODING_MODE_1_1",
  CODING_MODE_2_0: "CODING_MODE_2_0",
  CODING_MODE_3_2_LFE: "CODING_MODE_3_2_LFE"
};
var Ac3DynamicRangeCompressionLine = {
  FILM_LIGHT: "FILM_LIGHT",
  FILM_STANDARD: "FILM_STANDARD",
  MUSIC_LIGHT: "MUSIC_LIGHT",
  MUSIC_STANDARD: "MUSIC_STANDARD",
  NONE: "NONE",
  SPEECH: "SPEECH"
};
var Ac3DynamicRangeCompressionProfile = {
  FILM_STANDARD: "FILM_STANDARD",
  NONE: "NONE"
};
var Ac3DynamicRangeCompressionRf = {
  FILM_LIGHT: "FILM_LIGHT",
  FILM_STANDARD: "FILM_STANDARD",
  MUSIC_LIGHT: "MUSIC_LIGHT",
  MUSIC_STANDARD: "MUSIC_STANDARD",
  NONE: "NONE",
  SPEECH: "SPEECH"
};
var Ac3LfeFilter = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Ac3MetadataControl = {
  FOLLOW_INPUT: "FOLLOW_INPUT",
  USE_CONFIGURED: "USE_CONFIGURED"
};
var AudioCodec = {
  AAC: "AAC",
  AC3: "AC3",
  AIFF: "AIFF",
  EAC3: "EAC3",
  EAC3_ATMOS: "EAC3_ATMOS",
  FLAC: "FLAC",
  MP2: "MP2",
  MP3: "MP3",
  OPUS: "OPUS",
  PASSTHROUGH: "PASSTHROUGH",
  VORBIS: "VORBIS",
  WAV: "WAV"
};
var Eac3AtmosBitstreamMode = {
  COMPLETE_MAIN: "COMPLETE_MAIN"
};
var Eac3AtmosCodingMode = {
  CODING_MODE_5_1_4: "CODING_MODE_5_1_4",
  CODING_MODE_7_1_4: "CODING_MODE_7_1_4",
  CODING_MODE_9_1_6: "CODING_MODE_9_1_6",
  CODING_MODE_AUTO: "CODING_MODE_AUTO"
};
var Eac3AtmosDialogueIntelligence = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Eac3AtmosDownmixControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var Eac3AtmosDynamicRangeCompressionLine = {
  FILM_LIGHT: "FILM_LIGHT",
  FILM_STANDARD: "FILM_STANDARD",
  MUSIC_LIGHT: "MUSIC_LIGHT",
  MUSIC_STANDARD: "MUSIC_STANDARD",
  NONE: "NONE",
  SPEECH: "SPEECH"
};
var Eac3AtmosDynamicRangeCompressionRf = {
  FILM_LIGHT: "FILM_LIGHT",
  FILM_STANDARD: "FILM_STANDARD",
  MUSIC_LIGHT: "MUSIC_LIGHT",
  MUSIC_STANDARD: "MUSIC_STANDARD",
  NONE: "NONE",
  SPEECH: "SPEECH"
};
var Eac3AtmosDynamicRangeControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var Eac3AtmosMeteringMode = {
  ITU_BS_1770_1: "ITU_BS_1770_1",
  ITU_BS_1770_2: "ITU_BS_1770_2",
  ITU_BS_1770_3: "ITU_BS_1770_3",
  ITU_BS_1770_4: "ITU_BS_1770_4",
  LEQ_A: "LEQ_A"
};
var Eac3AtmosStereoDownmix = {
  DPL2: "DPL2",
  NOT_INDICATED: "NOT_INDICATED",
  STEREO: "STEREO",
  SURROUND: "SURROUND"
};
var Eac3AtmosSurroundExMode = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED",
  NOT_INDICATED: "NOT_INDICATED"
};
var Eac3AttenuationControl = {
  ATTENUATE_3_DB: "ATTENUATE_3_DB",
  NONE: "NONE"
};
var Eac3BitstreamMode = {
  COMMENTARY: "COMMENTARY",
  COMPLETE_MAIN: "COMPLETE_MAIN",
  EMERGENCY: "EMERGENCY",
  HEARING_IMPAIRED: "HEARING_IMPAIRED",
  VISUALLY_IMPAIRED: "VISUALLY_IMPAIRED"
};
var Eac3CodingMode = {
  CODING_MODE_1_0: "CODING_MODE_1_0",
  CODING_MODE_2_0: "CODING_MODE_2_0",
  CODING_MODE_3_2: "CODING_MODE_3_2"
};
var Eac3DcFilter = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Eac3DynamicRangeCompressionLine = {
  FILM_LIGHT: "FILM_LIGHT",
  FILM_STANDARD: "FILM_STANDARD",
  MUSIC_LIGHT: "MUSIC_LIGHT",
  MUSIC_STANDARD: "MUSIC_STANDARD",
  NONE: "NONE",
  SPEECH: "SPEECH"
};
var Eac3DynamicRangeCompressionRf = {
  FILM_LIGHT: "FILM_LIGHT",
  FILM_STANDARD: "FILM_STANDARD",
  MUSIC_LIGHT: "MUSIC_LIGHT",
  MUSIC_STANDARD: "MUSIC_STANDARD",
  NONE: "NONE",
  SPEECH: "SPEECH"
};
var Eac3LfeControl = {
  LFE: "LFE",
  NO_LFE: "NO_LFE"
};
var Eac3LfeFilter = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Eac3MetadataControl = {
  FOLLOW_INPUT: "FOLLOW_INPUT",
  USE_CONFIGURED: "USE_CONFIGURED"
};
var Eac3PassthroughControl = {
  NO_PASSTHROUGH: "NO_PASSTHROUGH",
  WHEN_POSSIBLE: "WHEN_POSSIBLE"
};
var Eac3PhaseControl = {
  NO_SHIFT: "NO_SHIFT",
  SHIFT_90_DEGREES: "SHIFT_90_DEGREES"
};
var Eac3StereoDownmix = {
  DPL2: "DPL2",
  LO_RO: "LO_RO",
  LT_RT: "LT_RT",
  NOT_INDICATED: "NOT_INDICATED"
};
var Eac3SurroundExMode = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED",
  NOT_INDICATED: "NOT_INDICATED"
};
var Eac3SurroundMode = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED",
  NOT_INDICATED: "NOT_INDICATED"
};
var Mp3RateControlMode = {
  CBR: "CBR",
  VBR: "VBR"
};
var WavFormat = {
  EXTENSIBLE: "EXTENSIBLE",
  RF64: "RF64",
  RIFF: "RIFF"
};
var LanguageCode = {
  AAR: "AAR",
  ABK: "ABK",
  AFR: "AFR",
  AKA: "AKA",
  AMH: "AMH",
  ARA: "ARA",
  ARG: "ARG",
  ASM: "ASM",
  AVA: "AVA",
  AVE: "AVE",
  AYM: "AYM",
  AZE: "AZE",
  BAK: "BAK",
  BAM: "BAM",
  BEL: "BEL",
  BEN: "BEN",
  BIH: "BIH",
  BIS: "BIS",
  BOD: "BOD",
  BOS: "BOS",
  BRE: "BRE",
  BUL: "BUL",
  CAT: "CAT",
  CES: "CES",
  CHA: "CHA",
  CHE: "CHE",
  CHU: "CHU",
  CHV: "CHV",
  COR: "COR",
  COS: "COS",
  CRE: "CRE",
  CYM: "CYM",
  DAN: "DAN",
  DEU: "DEU",
  DIV: "DIV",
  DZO: "DZO",
  ELL: "ELL",
  ENG: "ENG",
  ENM: "ENM",
  EPO: "EPO",
  EST: "EST",
  EUS: "EUS",
  EWE: "EWE",
  FAO: "FAO",
  FAS: "FAS",
  FIJ: "FIJ",
  FIN: "FIN",
  FRA: "FRA",
  FRM: "FRM",
  FRY: "FRY",
  FUL: "FUL",
  GER: "GER",
  GLA: "GLA",
  GLE: "GLE",
  GLG: "GLG",
  GLV: "GLV",
  GRN: "GRN",
  GUJ: "GUJ",
  HAT: "HAT",
  HAU: "HAU",
  HEB: "HEB",
  HER: "HER",
  HIN: "HIN",
  HMO: "HMO",
  HRV: "HRV",
  HUN: "HUN",
  HYE: "HYE",
  IBO: "IBO",
  IDO: "IDO",
  III: "III",
  IKU: "IKU",
  ILE: "ILE",
  INA: "INA",
  IND: "IND",
  IPK: "IPK",
  ISL: "ISL",
  ITA: "ITA",
  JAV: "JAV",
  JPN: "JPN",
  KAL: "KAL",
  KAN: "KAN",
  KAS: "KAS",
  KAT: "KAT",
  KAU: "KAU",
  KAZ: "KAZ",
  KHM: "KHM",
  KIK: "KIK",
  KIN: "KIN",
  KIR: "KIR",
  KOM: "KOM",
  KON: "KON",
  KOR: "KOR",
  KUA: "KUA",
  KUR: "KUR",
  LAO: "LAO",
  LAT: "LAT",
  LAV: "LAV",
  LIM: "LIM",
  LIN: "LIN",
  LIT: "LIT",
  LTZ: "LTZ",
  LUB: "LUB",
  LUG: "LUG",
  MAH: "MAH",
  MAL: "MAL",
  MAR: "MAR",
  MKD: "MKD",
  MLG: "MLG",
  MLT: "MLT",
  MON: "MON",
  MRI: "MRI",
  MSA: "MSA",
  MYA: "MYA",
  NAU: "NAU",
  NAV: "NAV",
  NBL: "NBL",
  NDE: "NDE",
  NDO: "NDO",
  NEP: "NEP",
  NLD: "NLD",
  NNO: "NNO",
  NOB: "NOB",
  NOR: "NOR",
  NYA: "NYA",
  OCI: "OCI",
  OJI: "OJI",
  ORI: "ORI",
  ORJ: "ORJ",
  ORM: "ORM",
  OSS: "OSS",
  PAN: "PAN",
  PLI: "PLI",
  POL: "POL",
  POR: "POR",
  PUS: "PUS",
  QAA: "QAA",
  QPC: "QPC",
  QUE: "QUE",
  ROH: "ROH",
  RON: "RON",
  RUN: "RUN",
  RUS: "RUS",
  SAG: "SAG",
  SAN: "SAN",
  SIN: "SIN",
  SLK: "SLK",
  SLV: "SLV",
  SME: "SME",
  SMO: "SMO",
  SNA: "SNA",
  SND: "SND",
  SOM: "SOM",
  SOT: "SOT",
  SPA: "SPA",
  SQI: "SQI",
  SRB: "SRB",
  SRD: "SRD",
  SRP: "SRP",
  SSW: "SSW",
  SUN: "SUN",
  SWA: "SWA",
  SWE: "SWE",
  TAH: "TAH",
  TAM: "TAM",
  TAT: "TAT",
  TEL: "TEL",
  TGK: "TGK",
  TGL: "TGL",
  THA: "THA",
  TIR: "TIR",
  TNG: "TNG",
  TON: "TON",
  TSN: "TSN",
  TSO: "TSO",
  TUK: "TUK",
  TUR: "TUR",
  TWI: "TWI",
  UIG: "UIG",
  UKR: "UKR",
  URD: "URD",
  UZB: "UZB",
  VEN: "VEN",
  VIE: "VIE",
  VOL: "VOL",
  WLN: "WLN",
  WOL: "WOL",
  XHO: "XHO",
  YID: "YID",
  YOR: "YOR",
  ZHA: "ZHA",
  ZHO: "ZHO",
  ZUL: "ZUL"
};
var AudioLanguageCodeControl = {
  FOLLOW_INPUT: "FOLLOW_INPUT",
  USE_CONFIGURED: "USE_CONFIGURED"
};
var RuleType = {
  ALLOWED_RENDITIONS: "ALLOWED_RENDITIONS",
  FORCE_INCLUDE_RENDITIONS: "FORCE_INCLUDE_RENDITIONS",
  MIN_BOTTOM_RENDITION_SIZE: "MIN_BOTTOM_RENDITION_SIZE",
  MIN_TOP_RENDITION_SIZE: "MIN_TOP_RENDITION_SIZE"
};
var BurninSubtitleAlignment = {
  AUTO: "AUTO",
  CENTERED: "CENTERED",
  LEFT: "LEFT"
};
var BurninSubtitleApplyFontColor = {
  ALL_TEXT: "ALL_TEXT",
  WHITE_TEXT_ONLY: "WHITE_TEXT_ONLY"
};
var BurninSubtitleBackgroundColor = {
  AUTO: "AUTO",
  BLACK: "BLACK",
  NONE: "NONE",
  WHITE: "WHITE"
};
var BurninSubtitleFallbackFont = {
  BEST_MATCH: "BEST_MATCH",
  MONOSPACED_SANSSERIF: "MONOSPACED_SANSSERIF",
  MONOSPACED_SERIF: "MONOSPACED_SERIF",
  PROPORTIONAL_SANSSERIF: "PROPORTIONAL_SANSSERIF",
  PROPORTIONAL_SERIF: "PROPORTIONAL_SERIF"
};
var BurninSubtitleFontColor = {
  AUTO: "AUTO",
  BLACK: "BLACK",
  BLUE: "BLUE",
  GREEN: "GREEN",
  HEX: "HEX",
  RED: "RED",
  WHITE: "WHITE",
  YELLOW: "YELLOW"
};
var FontScript = {
  AUTOMATIC: "AUTOMATIC",
  HANS: "HANS",
  HANT: "HANT"
};
var BurninSubtitleOutlineColor = {
  AUTO: "AUTO",
  BLACK: "BLACK",
  BLUE: "BLUE",
  GREEN: "GREEN",
  RED: "RED",
  WHITE: "WHITE",
  YELLOW: "YELLOW"
};
var RemoveRubyReserveAttributes = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var BurninSubtitleShadowColor = {
  AUTO: "AUTO",
  BLACK: "BLACK",
  NONE: "NONE",
  WHITE: "WHITE"
};
var BurnInSubtitleStylePassthrough = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var BurninSubtitleTeletextSpacing = {
  AUTO: "AUTO",
  FIXED_GRID: "FIXED_GRID",
  PROPORTIONAL: "PROPORTIONAL"
};
var CaptionDestinationType = {
  BURN_IN: "BURN_IN",
  DVB_SUB: "DVB_SUB",
  EMBEDDED: "EMBEDDED",
  EMBEDDED_PLUS_SCTE20: "EMBEDDED_PLUS_SCTE20",
  IMSC: "IMSC",
  SCC: "SCC",
  SCTE20_PLUS_EMBEDDED: "SCTE20_PLUS_EMBEDDED",
  SMI: "SMI",
  SRT: "SRT",
  TELETEXT: "TELETEXT",
  TTML: "TTML",
  WEBVTT: "WEBVTT"
};
var DvbSubtitleAlignment = {
  AUTO: "AUTO",
  CENTERED: "CENTERED",
  LEFT: "LEFT"
};
var DvbSubtitleApplyFontColor = {
  ALL_TEXT: "ALL_TEXT",
  WHITE_TEXT_ONLY: "WHITE_TEXT_ONLY"
};
var DvbSubtitleBackgroundColor = {
  AUTO: "AUTO",
  BLACK: "BLACK",
  NONE: "NONE",
  WHITE: "WHITE"
};
var DvbddsHandling = {
  NONE: "NONE",
  NO_DISPLAY_WINDOW: "NO_DISPLAY_WINDOW",
  SPECIFIED: "SPECIFIED"
};
var DvbSubSubtitleFallbackFont = {
  BEST_MATCH: "BEST_MATCH",
  MONOSPACED_SANSSERIF: "MONOSPACED_SANSSERIF",
  MONOSPACED_SERIF: "MONOSPACED_SERIF",
  PROPORTIONAL_SANSSERIF: "PROPORTIONAL_SANSSERIF",
  PROPORTIONAL_SERIF: "PROPORTIONAL_SERIF"
};
var DvbSubtitleFontColor = {
  AUTO: "AUTO",
  BLACK: "BLACK",
  BLUE: "BLUE",
  GREEN: "GREEN",
  HEX: "HEX",
  RED: "RED",
  WHITE: "WHITE",
  YELLOW: "YELLOW"
};
var DvbSubtitleOutlineColor = {
  AUTO: "AUTO",
  BLACK: "BLACK",
  BLUE: "BLUE",
  GREEN: "GREEN",
  RED: "RED",
  WHITE: "WHITE",
  YELLOW: "YELLOW"
};
var DvbSubtitleShadowColor = {
  AUTO: "AUTO",
  BLACK: "BLACK",
  NONE: "NONE",
  WHITE: "WHITE"
};
var DvbSubtitleStylePassthrough = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var DvbSubtitlingType = {
  HEARING_IMPAIRED: "HEARING_IMPAIRED",
  STANDARD: "STANDARD"
};
var DvbSubtitleTeletextSpacing = {
  AUTO: "AUTO",
  FIXED_GRID: "FIXED_GRID",
  PROPORTIONAL: "PROPORTIONAL"
};
var ImscAccessibilitySubs = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var ImscStylePassthrough = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var SccDestinationFramerate = {
  FRAMERATE_23_97: "FRAMERATE_23_97",
  FRAMERATE_24: "FRAMERATE_24",
  FRAMERATE_25: "FRAMERATE_25",
  FRAMERATE_29_97_DROPFRAME: "FRAMERATE_29_97_DROPFRAME",
  FRAMERATE_29_97_NON_DROPFRAME: "FRAMERATE_29_97_NON_DROPFRAME"
};
var SrtStylePassthrough = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var TeletextPageType = {
  PAGE_TYPE_ADDL_INFO: "PAGE_TYPE_ADDL_INFO",
  PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE: "PAGE_TYPE_HEARING_IMPAIRED_SUBTITLE",
  PAGE_TYPE_INITIAL: "PAGE_TYPE_INITIAL",
  PAGE_TYPE_PROGRAM_SCHEDULE: "PAGE_TYPE_PROGRAM_SCHEDULE",
  PAGE_TYPE_SUBTITLE: "PAGE_TYPE_SUBTITLE"
};
var TtmlStylePassthrough = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var WebvttAccessibilitySubs = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var WebvttStylePassthrough = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED",
  MERGE: "MERGE",
  STRICT: "STRICT"
};
var ColorSpace = {
  FOLLOW: "FOLLOW",
  HDR10: "HDR10",
  HLG_2020: "HLG_2020",
  P3D65_HDR: "P3D65_HDR",
  P3D65_SDR: "P3D65_SDR",
  P3DCI: "P3DCI",
  REC_601: "REC_601",
  REC_709: "REC_709"
};
var FrameMetricType = {
  MS_SSIM: "MS_SSIM",
  PSNR: "PSNR",
  PSNR_HVS: "PSNR_HVS",
  QVBR: "QVBR",
  SSIM: "SSIM",
  VMAF: "VMAF"
};
var HlsAdMarkers = {
  ELEMENTAL: "ELEMENTAL",
  ELEMENTAL_SCTE35: "ELEMENTAL_SCTE35"
};
var AdvancedInputFilter = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var AdvancedInputFilterAddTexture = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var AdvancedInputFilterSharpen = {
  HIGH: "HIGH",
  LOW: "LOW",
  OFF: "OFF"
};
var AudioDurationCorrection = {
  AUTO: "AUTO",
  DISABLED: "DISABLED",
  FORCE: "FORCE",
  FRAME: "FRAME",
  TRACK: "TRACK"
};
var AudioDefaultSelection = {
  DEFAULT: "DEFAULT",
  NOT_DEFAULT: "NOT_DEFAULT"
};
var AudioSelectorType = {
  ALL_PCM: "ALL_PCM",
  HLS_RENDITION_GROUP: "HLS_RENDITION_GROUP",
  LANGUAGE_CODE: "LANGUAGE_CODE",
  PID: "PID",
  TRACK: "TRACK"
};
var AncillaryConvert608To708 = {
  DISABLED: "DISABLED",
  UPCONVERT: "UPCONVERT"
};
var AncillaryTerminateCaptions = {
  DISABLED: "DISABLED",
  END_OF_INPUT: "END_OF_INPUT"
};
var EmbeddedConvert608To708 = {
  DISABLED: "DISABLED",
  UPCONVERT: "UPCONVERT"
};
var EmbeddedTerminateCaptions = {
  DISABLED: "DISABLED",
  END_OF_INPUT: "END_OF_INPUT"
};
var CaptionSourceByteRateLimit = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var FileSourceConvert608To708 = {
  DISABLED: "DISABLED",
  UPCONVERT: "UPCONVERT"
};
var CaptionSourceConvertPaintOnToPopOn = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var FileSourceTimeDeltaUnits = {
  MILLISECONDS: "MILLISECONDS",
  SECONDS: "SECONDS"
};
var CaptionSourceUpconvertSTLToTeletext = {
  DISABLED: "DISABLED",
  UPCONVERT: "UPCONVERT"
};
var CaptionSourceType = {
  ANCILLARY: "ANCILLARY",
  DVB_SUB: "DVB_SUB",
  EMBEDDED: "EMBEDDED",
  IMSC: "IMSC",
  NULL_SOURCE: "NULL_SOURCE",
  SCC: "SCC",
  SCTE20: "SCTE20",
  SMI: "SMI",
  SMPTE_TT: "SMPTE_TT",
  SRT: "SRT",
  STL: "STL",
  TELETEXT: "TELETEXT",
  TTML: "TTML",
  WEBVTT: "WEBVTT"
};
var InputDeblockFilter = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var DecryptionMode = {
  AES_CBC: "AES_CBC",
  AES_CTR: "AES_CTR",
  AES_GCM: "AES_GCM"
};
var InputDenoiseFilter = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var DynamicAudioSelectorType = {
  ALL_TRACKS: "ALL_TRACKS",
  LANGUAGE_CODE: "LANGUAGE_CODE"
};
var InputFilterEnable = {
  AUTO: "AUTO",
  DISABLE: "DISABLE",
  FORCE: "FORCE"
};
var InputScanType = {
  AUTO: "AUTO",
  PSF: "PSF"
};
var InputPsiControl = {
  IGNORE_PSI: "IGNORE_PSI",
  USE_PSI: "USE_PSI"
};
var InputTimecodeSource = {
  EMBEDDED: "EMBEDDED",
  SPECIFIEDSTART: "SPECIFIEDSTART",
  ZEROBASED: "ZEROBASED"
};
var VideoOverlayUnit = {
  PERCENTAGE: "PERCENTAGE",
  PIXELS: "PIXELS"
};
var VideoOverlayPlayBackMode = {
  ONCE: "ONCE",
  REPEAT: "REPEAT"
};
var AlphaBehavior = {
  DISCARD: "DISCARD",
  REMAP_TO_LUMA: "REMAP_TO_LUMA"
};
var ColorSpaceUsage = {
  FALLBACK: "FALLBACK",
  FORCE: "FORCE"
};
var EmbeddedTimecodeOverride = {
  NONE: "NONE",
  USE_MDPM: "USE_MDPM"
};
var PadVideo = {
  BLACK: "BLACK",
  DISABLED: "DISABLED"
};
var InputRotate = {
  AUTO: "AUTO",
  DEGREES_180: "DEGREES_180",
  DEGREES_270: "DEGREES_270",
  DEGREES_90: "DEGREES_90",
  DEGREE_0: "DEGREE_0"
};
var InputSampleRange = {
  FOLLOW: "FOLLOW",
  FULL_RANGE: "FULL_RANGE",
  LIMITED_RANGE: "LIMITED_RANGE"
};
var AccelerationMode = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED",
  PREFERRED: "PREFERRED"
};
var AccelerationStatus = {
  ACCELERATED: "ACCELERATED",
  IN_PROGRESS: "IN_PROGRESS",
  NOT_ACCELERATED: "NOT_ACCELERATED",
  NOT_APPLICABLE: "NOT_APPLICABLE"
};
var BillingTagsSource = {
  JOB: "JOB",
  JOB_TEMPLATE: "JOB_TEMPLATE",
  PRESET: "PRESET",
  QUEUE: "QUEUE"
};
var JobPhase = {
  PROBING: "PROBING",
  TRANSCODING: "TRANSCODING",
  UPLOADING: "UPLOADING"
};
var CopyProtectionAction = {
  PASSTHROUGH: "PASSTHROUGH",
  STRIP: "STRIP"
};
var VchipAction = {
  PASSTHROUGH: "PASSTHROUGH",
  STRIP: "STRIP"
};
var MotionImageInsertionMode = {
  MOV: "MOV",
  PNG: "PNG"
};
var MotionImagePlayback = {
  ONCE: "ONCE",
  REPEAT: "REPEAT"
};
var NielsenActiveWatermarkProcessType = {
  CBET: "CBET",
  NAES2_AND_NW: "NAES2_AND_NW",
  NAES2_AND_NW_AND_CBET: "NAES2_AND_NW_AND_CBET"
};
var NielsenSourceWatermarkStatusType = {
  CLEAN: "CLEAN",
  WATERMARKED: "WATERMARKED"
};
var NielsenUniqueTicPerAudioTrackType = {
  RESERVE_UNIQUE_TICS_PER_TRACK: "RESERVE_UNIQUE_TICS_PER_TRACK",
  SAME_TICS_PER_TRACK: "SAME_TICS_PER_TRACK"
};
var CmafClientCache = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var CmafCodecSpecification = {
  RFC_4281: "RFC_4281",
  RFC_6381: "RFC_6381"
};
var DashManifestStyle = {
  BASIC: "BASIC",
  COMPACT: "COMPACT",
  DISTINCT: "DISTINCT"
};
var S3ObjectCannedAcl = {
  AUTHENTICATED_READ: "AUTHENTICATED_READ",
  BUCKET_OWNER_FULL_CONTROL: "BUCKET_OWNER_FULL_CONTROL",
  BUCKET_OWNER_READ: "BUCKET_OWNER_READ",
  PUBLIC_READ: "PUBLIC_READ"
};
var S3ServerSideEncryptionType = {
  SERVER_SIDE_ENCRYPTION_KMS: "SERVER_SIDE_ENCRYPTION_KMS",
  SERVER_SIDE_ENCRYPTION_S3: "SERVER_SIDE_ENCRYPTION_S3"
};
var S3StorageClass = {
  DEEP_ARCHIVE: "DEEP_ARCHIVE",
  GLACIER: "GLACIER",
  INTELLIGENT_TIERING: "INTELLIGENT_TIERING",
  ONEZONE_IA: "ONEZONE_IA",
  REDUCED_REDUNDANCY: "REDUCED_REDUNDANCY",
  STANDARD: "STANDARD",
  STANDARD_IA: "STANDARD_IA"
};
var CmafEncryptionType = {
  AES_CTR: "AES_CTR",
  SAMPLE_AES: "SAMPLE_AES"
};
var CmafInitializationVectorInManifest = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var PresetSpeke20Audio = {
  PRESET_AUDIO_1: "PRESET_AUDIO_1",
  PRESET_AUDIO_2: "PRESET_AUDIO_2",
  PRESET_AUDIO_3: "PRESET_AUDIO_3",
  SHARED: "SHARED",
  UNENCRYPTED: "UNENCRYPTED"
};
var PresetSpeke20Video = {
  PRESET_VIDEO_1: "PRESET_VIDEO_1",
  PRESET_VIDEO_2: "PRESET_VIDEO_2",
  PRESET_VIDEO_3: "PRESET_VIDEO_3",
  PRESET_VIDEO_4: "PRESET_VIDEO_4",
  PRESET_VIDEO_5: "PRESET_VIDEO_5",
  PRESET_VIDEO_6: "PRESET_VIDEO_6",
  PRESET_VIDEO_7: "PRESET_VIDEO_7",
  PRESET_VIDEO_8: "PRESET_VIDEO_8",
  SHARED: "SHARED",
  UNENCRYPTED: "UNENCRYPTED"
};
var CmafKeyProviderType = {
  SPEKE: "SPEKE",
  STATIC_KEY: "STATIC_KEY"
};
var CmafImageBasedTrickPlay = {
  ADVANCED: "ADVANCED",
  NONE: "NONE",
  THUMBNAIL: "THUMBNAIL",
  THUMBNAIL_AND_FULLFRAME: "THUMBNAIL_AND_FULLFRAME"
};
var CmafIntervalCadence = {
  FOLLOW_CUSTOM: "FOLLOW_CUSTOM",
  FOLLOW_IFRAME: "FOLLOW_IFRAME"
};
var CmafManifestCompression = {
  GZIP: "GZIP",
  NONE: "NONE"
};
var CmafManifestDurationFormat = {
  FLOATING_POINT: "FLOATING_POINT",
  INTEGER: "INTEGER"
};
var CmafMpdManifestBandwidthType = {
  AVERAGE: "AVERAGE",
  MAX: "MAX"
};
var CmafMpdProfile = {
  MAIN_PROFILE: "MAIN_PROFILE",
  ON_DEMAND_PROFILE: "ON_DEMAND_PROFILE"
};
var CmafPtsOffsetHandlingForBFrames = {
  MATCH_INITIAL_PTS: "MATCH_INITIAL_PTS",
  ZERO_BASED: "ZERO_BASED"
};
var CmafSegmentControl = {
  SEGMENTED_FILES: "SEGMENTED_FILES",
  SINGLE_FILE: "SINGLE_FILE"
};
var CmafSegmentLengthControl = {
  EXACT: "EXACT",
  GOP_MULTIPLE: "GOP_MULTIPLE",
  MATCH: "MATCH"
};
var CmafStreamInfResolution = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var CmafTargetDurationCompatibilityMode = {
  LEGACY: "LEGACY",
  SPEC_COMPLIANT: "SPEC_COMPLIANT"
};
var CmafVideoCompositionOffsets = {
  SIGNED: "SIGNED",
  UNSIGNED: "UNSIGNED"
};
var CmafWriteDASHManifest = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var CmafWriteHLSManifest = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var CmafWriteSegmentTimelineInRepresentation = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var DashIsoGroupAudioChannelConfigSchemeIdUri = {
  DOLBY_CHANNEL_CONFIGURATION: "DOLBY_CHANNEL_CONFIGURATION",
  MPEG_CHANNEL_CONFIGURATION: "MPEG_CHANNEL_CONFIGURATION"
};
var DashIsoPlaybackDeviceCompatibility = {
  CENC_V1: "CENC_V1",
  UNENCRYPTED_SEI: "UNENCRYPTED_SEI"
};
var DashIsoHbbtvCompliance = {
  HBBTV_1_5: "HBBTV_1_5",
  NONE: "NONE"
};
var DashIsoImageBasedTrickPlay = {
  ADVANCED: "ADVANCED",
  NONE: "NONE",
  THUMBNAIL: "THUMBNAIL",
  THUMBNAIL_AND_FULLFRAME: "THUMBNAIL_AND_FULLFRAME"
};
var DashIsoIntervalCadence = {
  FOLLOW_CUSTOM: "FOLLOW_CUSTOM",
  FOLLOW_IFRAME: "FOLLOW_IFRAME"
};
var DashIsoMpdManifestBandwidthType = {
  AVERAGE: "AVERAGE",
  MAX: "MAX"
};
var DashIsoMpdProfile = {
  MAIN_PROFILE: "MAIN_PROFILE",
  ON_DEMAND_PROFILE: "ON_DEMAND_PROFILE"
};
var DashIsoPtsOffsetHandlingForBFrames = {
  MATCH_INITIAL_PTS: "MATCH_INITIAL_PTS",
  ZERO_BASED: "ZERO_BASED"
};
var DashIsoSegmentControl = {
  SEGMENTED_FILES: "SEGMENTED_FILES",
  SINGLE_FILE: "SINGLE_FILE"
};
var DashIsoSegmentLengthControl = {
  EXACT: "EXACT",
  GOP_MULTIPLE: "GOP_MULTIPLE",
  MATCH: "MATCH"
};
var DashIsoVideoCompositionOffsets = {
  SIGNED: "SIGNED",
  UNSIGNED: "UNSIGNED"
};
var DashIsoWriteSegmentTimelineInRepresentation = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var HlsAudioOnlyHeader = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var HlsCaptionLanguageSetting = {
  INSERT: "INSERT",
  NONE: "NONE",
  OMIT: "OMIT"
};
var HlsCaptionSegmentLengthControl = {
  LARGE_SEGMENTS: "LARGE_SEGMENTS",
  MATCH_VIDEO: "MATCH_VIDEO"
};
var HlsClientCache = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var HlsCodecSpecification = {
  RFC_4281: "RFC_4281",
  RFC_6381: "RFC_6381"
};
var HlsDirectoryStructure = {
  SINGLE_DIRECTORY: "SINGLE_DIRECTORY",
  SUBDIRECTORY_PER_STREAM: "SUBDIRECTORY_PER_STREAM"
};
var HlsEncryptionType = {
  AES128: "AES128",
  SAMPLE_AES: "SAMPLE_AES"
};
var HlsInitializationVectorInManifest = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var HlsOfflineEncrypted = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var HlsKeyProviderType = {
  SPEKE: "SPEKE",
  STATIC_KEY: "STATIC_KEY"
};
var HlsImageBasedTrickPlay = {
  ADVANCED: "ADVANCED",
  NONE: "NONE",
  THUMBNAIL: "THUMBNAIL",
  THUMBNAIL_AND_FULLFRAME: "THUMBNAIL_AND_FULLFRAME"
};
var HlsIntervalCadence = {
  FOLLOW_CUSTOM: "FOLLOW_CUSTOM",
  FOLLOW_IFRAME: "FOLLOW_IFRAME"
};
var HlsManifestCompression = {
  GZIP: "GZIP",
  NONE: "NONE"
};
var HlsManifestDurationFormat = {
  FLOATING_POINT: "FLOATING_POINT",
  INTEGER: "INTEGER"
};
var HlsOutputSelection = {
  MANIFESTS_AND_SEGMENTS: "MANIFESTS_AND_SEGMENTS",
  SEGMENTS_ONLY: "SEGMENTS_ONLY"
};
var HlsProgramDateTime = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var HlsProgressiveWriteHlsManifest = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var HlsSegmentControl = {
  SEGMENTED_FILES: "SEGMENTED_FILES",
  SINGLE_FILE: "SINGLE_FILE"
};
var HlsSegmentLengthControl = {
  EXACT: "EXACT",
  GOP_MULTIPLE: "GOP_MULTIPLE",
  MATCH: "MATCH"
};
var HlsStreamInfResolution = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var HlsTargetDurationCompatibilityMode = {
  LEGACY: "LEGACY",
  SPEC_COMPLIANT: "SPEC_COMPLIANT"
};
var HlsTimedMetadataId3Frame = {
  NONE: "NONE",
  PRIV: "PRIV",
  TDRL: "TDRL"
};

// src/models/models_1.ts
var MsSmoothAudioDeduplication = {
  COMBINE_DUPLICATE_STREAMS: "COMBINE_DUPLICATE_STREAMS",
  NONE: "NONE"
};
var MsSmoothFragmentLengthControl = {
  EXACT: "EXACT",
  GOP_MULTIPLE: "GOP_MULTIPLE"
};
var MsSmoothManifestEncoding = {
  UTF16: "UTF16",
  UTF8: "UTF8"
};
var OutputGroupType = {
  CMAF_GROUP_SETTINGS: "CMAF_GROUP_SETTINGS",
  DASH_ISO_GROUP_SETTINGS: "DASH_ISO_GROUP_SETTINGS",
  FILE_GROUP_SETTINGS: "FILE_GROUP_SETTINGS",
  HLS_GROUP_SETTINGS: "HLS_GROUP_SETTINGS",
  MS_SMOOTH_GROUP_SETTINGS: "MS_SMOOTH_GROUP_SETTINGS"
};
var CmfcAudioDuration = {
  DEFAULT_CODEC_DURATION: "DEFAULT_CODEC_DURATION",
  MATCH_VIDEO_DURATION: "MATCH_VIDEO_DURATION"
};
var CmfcAudioTrackType = {
  ALTERNATE_AUDIO_AUTO_SELECT: "ALTERNATE_AUDIO_AUTO_SELECT",
  ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT: "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT",
  ALTERNATE_AUDIO_NOT_AUTO_SELECT: "ALTERNATE_AUDIO_NOT_AUTO_SELECT",
  AUDIO_ONLY_VARIANT_STREAM: "AUDIO_ONLY_VARIANT_STREAM"
};
var CmfcDescriptiveVideoServiceFlag = {
  DONT_FLAG: "DONT_FLAG",
  FLAG: "FLAG"
};
var CmfcIFrameOnlyManifest = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var CmfcKlvMetadata = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH"
};
var CmfcManifestMetadataSignaling = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var CmfcScte35Esam = {
  INSERT: "INSERT",
  NONE: "NONE"
};
var CmfcScte35Source = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH"
};
var CmfcTimedMetadata = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH"
};
var CmfcTimedMetadataBoxVersion = {
  VERSION_0: "VERSION_0",
  VERSION_1: "VERSION_1"
};
var ContainerType = {
  CMFC: "CMFC",
  F4V: "F4V",
  GIF: "GIF",
  ISMV: "ISMV",
  M2TS: "M2TS",
  M3U8: "M3U8",
  MOV: "MOV",
  MP4: "MP4",
  MPD: "MPD",
  MXF: "MXF",
  OGG: "OGG",
  RAW: "RAW",
  WEBM: "WEBM",
  Y4M: "Y4M"
};
var F4vMoovPlacement = {
  NORMAL: "NORMAL",
  PROGRESSIVE_DOWNLOAD: "PROGRESSIVE_DOWNLOAD"
};
var M2tsAudioBufferModel = {
  ATSC: "ATSC",
  DVB: "DVB"
};
var M2tsAudioDuration = {
  DEFAULT_CODEC_DURATION: "DEFAULT_CODEC_DURATION",
  MATCH_VIDEO_DURATION: "MATCH_VIDEO_DURATION"
};
var M2tsBufferModel = {
  MULTIPLEX: "MULTIPLEX",
  NONE: "NONE"
};
var M2tsDataPtsControl = {
  ALIGN_TO_VIDEO: "ALIGN_TO_VIDEO",
  AUTO: "AUTO"
};
var OutputSdt = {
  SDT_FOLLOW: "SDT_FOLLOW",
  SDT_FOLLOW_IF_PRESENT: "SDT_FOLLOW_IF_PRESENT",
  SDT_MANUAL: "SDT_MANUAL",
  SDT_NONE: "SDT_NONE"
};
var M2tsEbpAudioInterval = {
  VIDEO_AND_FIXED_INTERVALS: "VIDEO_AND_FIXED_INTERVALS",
  VIDEO_INTERVAL: "VIDEO_INTERVAL"
};
var M2tsEbpPlacement = {
  VIDEO_AND_AUDIO_PIDS: "VIDEO_AND_AUDIO_PIDS",
  VIDEO_PID: "VIDEO_PID"
};
var M2tsEsRateInPes = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var M2tsForceTsVideoEbpOrder = {
  DEFAULT: "DEFAULT",
  FORCE: "FORCE"
};
var M2tsKlvMetadata = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH"
};
var M2tsNielsenId3 = {
  INSERT: "INSERT",
  NONE: "NONE"
};
var M2tsPcrControl = {
  CONFIGURED_PCR_PERIOD: "CONFIGURED_PCR_PERIOD",
  PCR_EVERY_PES_PACKET: "PCR_EVERY_PES_PACKET"
};
var M2tsPreventBufferUnderflow = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var TsPtsOffset = {
  AUTO: "AUTO",
  MILLISECONDS: "MILLISECONDS",
  SECONDS: "SECONDS"
};
var M2tsRateMode = {
  CBR: "CBR",
  VBR: "VBR"
};
var M2tsScte35Source = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH"
};
var M2tsSegmentationMarkers = {
  EBP: "EBP",
  EBP_LEGACY: "EBP_LEGACY",
  NONE: "NONE",
  PSI_SEGSTART: "PSI_SEGSTART",
  RAI_ADAPT: "RAI_ADAPT",
  RAI_SEGSTART: "RAI_SEGSTART"
};
var M2tsSegmentationStyle = {
  MAINTAIN_CADENCE: "MAINTAIN_CADENCE",
  RESET_CADENCE: "RESET_CADENCE"
};
var M3u8AudioDuration = {
  DEFAULT_CODEC_DURATION: "DEFAULT_CODEC_DURATION",
  MATCH_VIDEO_DURATION: "MATCH_VIDEO_DURATION"
};
var M3u8DataPtsControl = {
  ALIGN_TO_VIDEO: "ALIGN_TO_VIDEO",
  AUTO: "AUTO"
};
var M3u8NielsenId3 = {
  INSERT: "INSERT",
  NONE: "NONE"
};
var M3u8PcrControl = {
  CONFIGURED_PCR_PERIOD: "CONFIGURED_PCR_PERIOD",
  PCR_EVERY_PES_PACKET: "PCR_EVERY_PES_PACKET"
};
var M3u8Scte35Source = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH"
};
var TimedMetadata = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH"
};
var MovClapAtom = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var MovCslgAtom = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var MovMpeg2FourCCControl = {
  MPEG: "MPEG",
  XDCAM: "XDCAM"
};
var MovPaddingControl = {
  NONE: "NONE",
  OMNEON: "OMNEON"
};
var MovReference = {
  EXTERNAL: "EXTERNAL",
  SELF_CONTAINED: "SELF_CONTAINED"
};
var Mp4CslgAtom = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var Mp4FreeSpaceBox = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var Mp4MoovPlacement = {
  NORMAL: "NORMAL",
  PROGRESSIVE_DOWNLOAD: "PROGRESSIVE_DOWNLOAD"
};
var MpdAccessibilityCaptionHints = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var MpdAudioDuration = {
  DEFAULT_CODEC_DURATION: "DEFAULT_CODEC_DURATION",
  MATCH_VIDEO_DURATION: "MATCH_VIDEO_DURATION"
};
var MpdCaptionContainerType = {
  FRAGMENTED_MP4: "FRAGMENTED_MP4",
  RAW: "RAW"
};
var MpdKlvMetadata = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH"
};
var MpdManifestMetadataSignaling = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var MpdScte35Esam = {
  INSERT: "INSERT",
  NONE: "NONE"
};
var MpdScte35Source = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH"
};
var MpdTimedMetadata = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH"
};
var MpdTimedMetadataBoxVersion = {
  VERSION_0: "VERSION_0",
  VERSION_1: "VERSION_1"
};
var MxfAfdSignaling = {
  COPY_FROM_VIDEO: "COPY_FROM_VIDEO",
  NO_COPY: "NO_COPY"
};
var MxfProfile = {
  D_10: "D_10",
  OP1A: "OP1A",
  XAVC: "XAVC",
  XDCAM: "XDCAM",
  XDCAM_RDD9: "XDCAM_RDD9"
};
var MxfXavcDurationMode = {
  ALLOW_ANY_DURATION: "ALLOW_ANY_DURATION",
  DROP_FRAMES_FOR_COMPLIANCE: "DROP_FRAMES_FOR_COMPLIANCE"
};
var HlsAudioOnlyContainer = {
  AUTOMATIC: "AUTOMATIC",
  M2TS: "M2TS"
};
var HlsAudioTrackType = {
  ALTERNATE_AUDIO_AUTO_SELECT: "ALTERNATE_AUDIO_AUTO_SELECT",
  ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT: "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT",
  ALTERNATE_AUDIO_NOT_AUTO_SELECT: "ALTERNATE_AUDIO_NOT_AUTO_SELECT",
  AUDIO_ONLY_VARIANT_STREAM: "AUDIO_ONLY_VARIANT_STREAM"
};
var HlsDescriptiveVideoServiceFlag = {
  DONT_FLAG: "DONT_FLAG",
  FLAG: "FLAG"
};
var HlsIFrameOnlyManifest = {
  EXCLUDE: "EXCLUDE",
  INCLUDE: "INCLUDE"
};
var AfdSignaling = {
  AUTO: "AUTO",
  FIXED: "FIXED",
  NONE: "NONE"
};
var AntiAlias = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var ChromaPositionMode = {
  AUTO: "AUTO",
  FORCE_CENTER: "FORCE_CENTER",
  FORCE_TOP_LEFT: "FORCE_TOP_LEFT"
};
var Av1AdaptiveQuantization = {
  HIGH: "HIGH",
  HIGHER: "HIGHER",
  LOW: "LOW",
  MAX: "MAX",
  MEDIUM: "MEDIUM",
  OFF: "OFF"
};
var Av1BitDepth = {
  BIT_10: "BIT_10",
  BIT_8: "BIT_8"
};
var Av1FilmGrainSynthesis = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Av1FramerateControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var Av1FramerateConversionAlgorithm = {
  DUPLICATE_DROP: "DUPLICATE_DROP",
  FRAMEFORMER: "FRAMEFORMER",
  INTERPOLATE: "INTERPOLATE",
  MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT"
};
var Av1RateControlMode = {
  QVBR: "QVBR"
};
var Av1SpatialAdaptiveQuantization = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var AvcIntraClass = {
  CLASS_100: "CLASS_100",
  CLASS_200: "CLASS_200",
  CLASS_4K_2K: "CLASS_4K_2K",
  CLASS_50: "CLASS_50"
};
var AvcIntraUhdQualityTuningLevel = {
  MULTI_PASS: "MULTI_PASS",
  SINGLE_PASS: "SINGLE_PASS"
};
var AvcIntraFramerateControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var AvcIntraFramerateConversionAlgorithm = {
  DUPLICATE_DROP: "DUPLICATE_DROP",
  FRAMEFORMER: "FRAMEFORMER",
  INTERPOLATE: "INTERPOLATE",
  MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT"
};
var AvcIntraInterlaceMode = {
  BOTTOM_FIELD: "BOTTOM_FIELD",
  FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD",
  FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD",
  PROGRESSIVE: "PROGRESSIVE",
  TOP_FIELD: "TOP_FIELD"
};
var AvcIntraScanTypeConversionMode = {
  INTERLACED: "INTERLACED",
  INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE"
};
var AvcIntraSlowPal = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var AvcIntraTelecine = {
  HARD: "HARD",
  NONE: "NONE"
};
var VideoCodec = {
  AV1: "AV1",
  AVC_INTRA: "AVC_INTRA",
  FRAME_CAPTURE: "FRAME_CAPTURE",
  GIF: "GIF",
  H_264: "H_264",
  H_265: "H_265",
  MPEG2: "MPEG2",
  PASSTHROUGH: "PASSTHROUGH",
  PRORES: "PRORES",
  UNCOMPRESSED: "UNCOMPRESSED",
  VC3: "VC3",
  VP8: "VP8",
  VP9: "VP9",
  XAVC: "XAVC"
};
var GifFramerateControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var GifFramerateConversionAlgorithm = {
  DUPLICATE_DROP: "DUPLICATE_DROP",
  INTERPOLATE: "INTERPOLATE"
};
var H264AdaptiveQuantization = {
  AUTO: "AUTO",
  HIGH: "HIGH",
  HIGHER: "HIGHER",
  LOW: "LOW",
  MAX: "MAX",
  MEDIUM: "MEDIUM",
  OFF: "OFF"
};
var BandwidthReductionFilterSharpening = {
  HIGH: "HIGH",
  LOW: "LOW",
  MEDIUM: "MEDIUM",
  OFF: "OFF"
};
var BandwidthReductionFilterStrength = {
  AUTO: "AUTO",
  HIGH: "HIGH",
  LOW: "LOW",
  MEDIUM: "MEDIUM",
  OFF: "OFF"
};
var H264CodecLevel = {
  AUTO: "AUTO",
  LEVEL_1: "LEVEL_1",
  LEVEL_1_1: "LEVEL_1_1",
  LEVEL_1_2: "LEVEL_1_2",
  LEVEL_1_3: "LEVEL_1_3",
  LEVEL_2: "LEVEL_2",
  LEVEL_2_1: "LEVEL_2_1",
  LEVEL_2_2: "LEVEL_2_2",
  LEVEL_3: "LEVEL_3",
  LEVEL_3_1: "LEVEL_3_1",
  LEVEL_3_2: "LEVEL_3_2",
  LEVEL_4: "LEVEL_4",
  LEVEL_4_1: "LEVEL_4_1",
  LEVEL_4_2: "LEVEL_4_2",
  LEVEL_5: "LEVEL_5",
  LEVEL_5_1: "LEVEL_5_1",
  LEVEL_5_2: "LEVEL_5_2"
};
var H264CodecProfile = {
  BASELINE: "BASELINE",
  HIGH: "HIGH",
  HIGH_10BIT: "HIGH_10BIT",
  HIGH_422: "HIGH_422",
  HIGH_422_10BIT: "HIGH_422_10BIT",
  MAIN: "MAIN"
};
var H264DynamicSubGop = {
  ADAPTIVE: "ADAPTIVE",
  STATIC: "STATIC"
};
var H264EndOfStreamMarkers = {
  INCLUDE: "INCLUDE",
  SUPPRESS: "SUPPRESS"
};
var H264EntropyEncoding = {
  CABAC: "CABAC",
  CAVLC: "CAVLC"
};
var H264FieldEncoding = {
  FORCE_FIELD: "FORCE_FIELD",
  MBAFF: "MBAFF",
  PAFF: "PAFF"
};
var H264FlickerAdaptiveQuantization = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H264FramerateControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var H264FramerateConversionAlgorithm = {
  DUPLICATE_DROP: "DUPLICATE_DROP",
  FRAMEFORMER: "FRAMEFORMER",
  INTERPOLATE: "INTERPOLATE",
  MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT"
};
var H264GopBReference = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H264GopSizeUnits = {
  AUTO: "AUTO",
  FRAMES: "FRAMES",
  SECONDS: "SECONDS"
};
var H264InterlaceMode = {
  BOTTOM_FIELD: "BOTTOM_FIELD",
  FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD",
  FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD",
  PROGRESSIVE: "PROGRESSIVE",
  TOP_FIELD: "TOP_FIELD"
};
var H264ParControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var H264QualityTuningLevel = {
  MULTI_PASS_HQ: "MULTI_PASS_HQ",
  SINGLE_PASS: "SINGLE_PASS",
  SINGLE_PASS_HQ: "SINGLE_PASS_HQ"
};
var H264RateControlMode = {
  CBR: "CBR",
  QVBR: "QVBR",
  VBR: "VBR"
};
var H264RepeatPps = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H264SaliencyAwareEncoding = {
  DISABLED: "DISABLED",
  PREFERRED: "PREFERRED"
};
var H264ScanTypeConversionMode = {
  INTERLACED: "INTERLACED",
  INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE"
};
var H264SceneChangeDetect = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED",
  TRANSITION_DETECTION: "TRANSITION_DETECTION"
};
var H264SlowPal = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H264SpatialAdaptiveQuantization = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H264Syntax = {
  DEFAULT: "DEFAULT",
  RP2027: "RP2027"
};
var H264Telecine = {
  HARD: "HARD",
  NONE: "NONE",
  SOFT: "SOFT"
};
var H264TemporalAdaptiveQuantization = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H264UnregisteredSeiTimecode = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H264WriteMp4PackagingType = {
  AVC1: "AVC1",
  AVC3: "AVC3"
};
var H265AdaptiveQuantization = {
  AUTO: "AUTO",
  HIGH: "HIGH",
  HIGHER: "HIGHER",
  LOW: "LOW",
  MAX: "MAX",
  MEDIUM: "MEDIUM",
  OFF: "OFF"
};
var H265AlternateTransferFunctionSei = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265CodecLevel = {
  AUTO: "AUTO",
  LEVEL_1: "LEVEL_1",
  LEVEL_2: "LEVEL_2",
  LEVEL_2_1: "LEVEL_2_1",
  LEVEL_3: "LEVEL_3",
  LEVEL_3_1: "LEVEL_3_1",
  LEVEL_4: "LEVEL_4",
  LEVEL_4_1: "LEVEL_4_1",
  LEVEL_5: "LEVEL_5",
  LEVEL_5_1: "LEVEL_5_1",
  LEVEL_5_2: "LEVEL_5_2",
  LEVEL_6: "LEVEL_6",
  LEVEL_6_1: "LEVEL_6_1",
  LEVEL_6_2: "LEVEL_6_2"
};
var H265CodecProfile = {
  MAIN10_HIGH: "MAIN10_HIGH",
  MAIN10_MAIN: "MAIN10_MAIN",
  MAIN_422_10BIT_HIGH: "MAIN_422_10BIT_HIGH",
  MAIN_422_10BIT_MAIN: "MAIN_422_10BIT_MAIN",
  MAIN_422_8BIT_HIGH: "MAIN_422_8BIT_HIGH",
  MAIN_422_8BIT_MAIN: "MAIN_422_8BIT_MAIN",
  MAIN_HIGH: "MAIN_HIGH",
  MAIN_MAIN: "MAIN_MAIN"
};
var H265Deblocking = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265DynamicSubGop = {
  ADAPTIVE: "ADAPTIVE",
  STATIC: "STATIC"
};
var H265EndOfStreamMarkers = {
  INCLUDE: "INCLUDE",
  SUPPRESS: "SUPPRESS"
};
var H265FlickerAdaptiveQuantization = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265FramerateControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var H265FramerateConversionAlgorithm = {
  DUPLICATE_DROP: "DUPLICATE_DROP",
  FRAMEFORMER: "FRAMEFORMER",
  INTERPOLATE: "INTERPOLATE",
  MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT"
};
var H265GopBReference = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265GopSizeUnits = {
  AUTO: "AUTO",
  FRAMES: "FRAMES",
  SECONDS: "SECONDS"
};
var H265InterlaceMode = {
  BOTTOM_FIELD: "BOTTOM_FIELD",
  FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD",
  FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD",
  PROGRESSIVE: "PROGRESSIVE",
  TOP_FIELD: "TOP_FIELD"
};
var H265ParControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var H265QualityTuningLevel = {
  MULTI_PASS_HQ: "MULTI_PASS_HQ",
  SINGLE_PASS: "SINGLE_PASS",
  SINGLE_PASS_HQ: "SINGLE_PASS_HQ"
};
var H265RateControlMode = {
  CBR: "CBR",
  QVBR: "QVBR",
  VBR: "VBR"
};
var H265SampleAdaptiveOffsetFilterMode = {
  ADAPTIVE: "ADAPTIVE",
  DEFAULT: "DEFAULT",
  OFF: "OFF"
};
var H265ScanTypeConversionMode = {
  INTERLACED: "INTERLACED",
  INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE"
};
var H265SceneChangeDetect = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED",
  TRANSITION_DETECTION: "TRANSITION_DETECTION"
};
var H265SlowPal = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265SpatialAdaptiveQuantization = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265Telecine = {
  HARD: "HARD",
  NONE: "NONE",
  SOFT: "SOFT"
};
var H265TemporalAdaptiveQuantization = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265TemporalIds = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265Tiles = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265UnregisteredSeiTimecode = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var H265WriteMp4PackagingType = {
  HEV1: "HEV1",
  HVC1: "HVC1"
};
var Mpeg2AdaptiveQuantization = {
  HIGH: "HIGH",
  LOW: "LOW",
  MEDIUM: "MEDIUM",
  OFF: "OFF"
};
var Mpeg2CodecLevel = {
  AUTO: "AUTO",
  HIGH: "HIGH",
  HIGH1440: "HIGH1440",
  LOW: "LOW",
  MAIN: "MAIN"
};
var Mpeg2CodecProfile = {
  MAIN: "MAIN",
  PROFILE_422: "PROFILE_422"
};
var Mpeg2DynamicSubGop = {
  ADAPTIVE: "ADAPTIVE",
  STATIC: "STATIC"
};
var Mpeg2FramerateControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var Mpeg2FramerateConversionAlgorithm = {
  DUPLICATE_DROP: "DUPLICATE_DROP",
  FRAMEFORMER: "FRAMEFORMER",
  INTERPOLATE: "INTERPOLATE",
  MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT"
};
var Mpeg2GopSizeUnits = {
  FRAMES: "FRAMES",
  SECONDS: "SECONDS"
};
var Mpeg2InterlaceMode = {
  BOTTOM_FIELD: "BOTTOM_FIELD",
  FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD",
  FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD",
  PROGRESSIVE: "PROGRESSIVE",
  TOP_FIELD: "TOP_FIELD"
};
var Mpeg2IntraDcPrecision = {
  AUTO: "AUTO",
  INTRA_DC_PRECISION_10: "INTRA_DC_PRECISION_10",
  INTRA_DC_PRECISION_11: "INTRA_DC_PRECISION_11",
  INTRA_DC_PRECISION_8: "INTRA_DC_PRECISION_8",
  INTRA_DC_PRECISION_9: "INTRA_DC_PRECISION_9"
};
var Mpeg2ParControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var Mpeg2QualityTuningLevel = {
  MULTI_PASS: "MULTI_PASS",
  SINGLE_PASS: "SINGLE_PASS"
};
var Mpeg2RateControlMode = {
  CBR: "CBR",
  VBR: "VBR"
};
var Mpeg2ScanTypeConversionMode = {
  INTERLACED: "INTERLACED",
  INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE"
};
var Mpeg2SceneChangeDetect = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Mpeg2SlowPal = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Mpeg2SpatialAdaptiveQuantization = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Mpeg2Syntax = {
  DEFAULT: "DEFAULT",
  D_10: "D_10"
};
var Mpeg2Telecine = {
  HARD: "HARD",
  NONE: "NONE",
  SOFT: "SOFT"
};
var Mpeg2TemporalAdaptiveQuantization = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var ProresChromaSampling = {
  PRESERVE_444_SAMPLING: "PRESERVE_444_SAMPLING",
  SUBSAMPLE_TO_422: "SUBSAMPLE_TO_422"
};
var ProresCodecProfile = {
  APPLE_PRORES_422: "APPLE_PRORES_422",
  APPLE_PRORES_422_HQ: "APPLE_PRORES_422_HQ",
  APPLE_PRORES_422_LT: "APPLE_PRORES_422_LT",
  APPLE_PRORES_422_PROXY: "APPLE_PRORES_422_PROXY",
  APPLE_PRORES_4444: "APPLE_PRORES_4444",
  APPLE_PRORES_4444_XQ: "APPLE_PRORES_4444_XQ"
};
var ProresFramerateControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var ProresFramerateConversionAlgorithm = {
  DUPLICATE_DROP: "DUPLICATE_DROP",
  FRAMEFORMER: "FRAMEFORMER",
  INTERPOLATE: "INTERPOLATE",
  MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT"
};
var ProresInterlaceMode = {
  BOTTOM_FIELD: "BOTTOM_FIELD",
  FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD",
  FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD",
  PROGRESSIVE: "PROGRESSIVE",
  TOP_FIELD: "TOP_FIELD"
};
var ProresParControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var ProresScanTypeConversionMode = {
  INTERLACED: "INTERLACED",
  INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE"
};
var ProresSlowPal = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var ProresTelecine = {
  HARD: "HARD",
  NONE: "NONE"
};
var UncompressedFourcc = {
  I420: "I420",
  I422: "I422",
  I444: "I444"
};
var UncompressedFramerateControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var UncompressedFramerateConversionAlgorithm = {
  DUPLICATE_DROP: "DUPLICATE_DROP",
  FRAMEFORMER: "FRAMEFORMER",
  INTERPOLATE: "INTERPOLATE",
  MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT"
};
var UncompressedInterlaceMode = {
  INTERLACED: "INTERLACED",
  PROGRESSIVE: "PROGRESSIVE"
};
var UncompressedScanTypeConversionMode = {
  INTERLACED: "INTERLACED",
  INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE"
};
var UncompressedSlowPal = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var UncompressedTelecine = {
  HARD: "HARD",
  NONE: "NONE"
};
var Vc3FramerateControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var Vc3FramerateConversionAlgorithm = {
  DUPLICATE_DROP: "DUPLICATE_DROP",
  FRAMEFORMER: "FRAMEFORMER",
  INTERPOLATE: "INTERPOLATE",
  MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT"
};
var Vc3InterlaceMode = {
  INTERLACED: "INTERLACED",
  PROGRESSIVE: "PROGRESSIVE"
};
var Vc3ScanTypeConversionMode = {
  INTERLACED: "INTERLACED",
  INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE"
};
var Vc3SlowPal = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Vc3Telecine = {
  HARD: "HARD",
  NONE: "NONE"
};
var Vc3Class = {
  CLASS_145_8BIT: "CLASS_145_8BIT",
  CLASS_220_10BIT: "CLASS_220_10BIT",
  CLASS_220_8BIT: "CLASS_220_8BIT"
};
var Vp8FramerateControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var Vp8FramerateConversionAlgorithm = {
  DUPLICATE_DROP: "DUPLICATE_DROP",
  FRAMEFORMER: "FRAMEFORMER",
  INTERPOLATE: "INTERPOLATE",
  MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT"
};
var Vp8ParControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var Vp8QualityTuningLevel = {
  MULTI_PASS: "MULTI_PASS",
  MULTI_PASS_HQ: "MULTI_PASS_HQ"
};
var Vp8RateControlMode = {
  VBR: "VBR"
};
var Vp9FramerateControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var Vp9FramerateConversionAlgorithm = {
  DUPLICATE_DROP: "DUPLICATE_DROP",
  FRAMEFORMER: "FRAMEFORMER",
  INTERPOLATE: "INTERPOLATE",
  MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT"
};
var Vp9ParControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var Vp9QualityTuningLevel = {
  MULTI_PASS: "MULTI_PASS",
  MULTI_PASS_HQ: "MULTI_PASS_HQ"
};
var Vp9RateControlMode = {
  VBR: "VBR"
};
var XavcAdaptiveQuantization = {
  AUTO: "AUTO",
  HIGH: "HIGH",
  HIGHER: "HIGHER",
  LOW: "LOW",
  MAX: "MAX",
  MEDIUM: "MEDIUM",
  OFF: "OFF"
};
var XavcEntropyEncoding = {
  AUTO: "AUTO",
  CABAC: "CABAC",
  CAVLC: "CAVLC"
};
var XavcFramerateControl = {
  INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE",
  SPECIFIED: "SPECIFIED"
};
var XavcFramerateConversionAlgorithm = {
  DUPLICATE_DROP: "DUPLICATE_DROP",
  FRAMEFORMER: "FRAMEFORMER",
  INTERPOLATE: "INTERPOLATE",
  MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT"
};
var XavcProfile = {
  XAVC_4K: "XAVC_4K",
  XAVC_4K_INTRA_CBG: "XAVC_4K_INTRA_CBG",
  XAVC_4K_INTRA_VBR: "XAVC_4K_INTRA_VBR",
  XAVC_HD: "XAVC_HD",
  XAVC_HD_INTRA_CBG: "XAVC_HD_INTRA_CBG"
};
var XavcSlowPal = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var XavcSpatialAdaptiveQuantization = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var XavcTemporalAdaptiveQuantization = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Xavc4kIntraCbgProfileClass = {
  CLASS_100: "CLASS_100",
  CLASS_300: "CLASS_300",
  CLASS_480: "CLASS_480"
};
var Xavc4kIntraVbrProfileClass = {
  CLASS_100: "CLASS_100",
  CLASS_300: "CLASS_300",
  CLASS_480: "CLASS_480"
};
var Xavc4kProfileBitrateClass = {
  BITRATE_CLASS_100: "BITRATE_CLASS_100",
  BITRATE_CLASS_140: "BITRATE_CLASS_140",
  BITRATE_CLASS_200: "BITRATE_CLASS_200"
};
var Xavc4kProfileCodecProfile = {
  HIGH: "HIGH",
  HIGH_422: "HIGH_422"
};
var XavcFlickerAdaptiveQuantization = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var XavcGopBReference = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var Xavc4kProfileQualityTuningLevel = {
  MULTI_PASS_HQ: "MULTI_PASS_HQ",
  SINGLE_PASS: "SINGLE_PASS",
  SINGLE_PASS_HQ: "SINGLE_PASS_HQ"
};
var XavcHdIntraCbgProfileClass = {
  CLASS_100: "CLASS_100",
  CLASS_200: "CLASS_200",
  CLASS_50: "CLASS_50"
};
var XavcHdProfileBitrateClass = {
  BITRATE_CLASS_25: "BITRATE_CLASS_25",
  BITRATE_CLASS_35: "BITRATE_CLASS_35",
  BITRATE_CLASS_50: "BITRATE_CLASS_50"
};
var XavcInterlaceMode = {
  BOTTOM_FIELD: "BOTTOM_FIELD",
  FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD",
  FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD",
  PROGRESSIVE: "PROGRESSIVE",
  TOP_FIELD: "TOP_FIELD"
};
var XavcHdProfileQualityTuningLevel = {
  MULTI_PASS_HQ: "MULTI_PASS_HQ",
  SINGLE_PASS: "SINGLE_PASS",
  SINGLE_PASS_HQ: "SINGLE_PASS_HQ"
};
var XavcHdProfileTelecine = {
  HARD: "HARD",
  NONE: "NONE"
};
var ColorMetadata = {
  IGNORE: "IGNORE",
  INSERT: "INSERT"
};
var DropFrameTimecode = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var RespondToAfd = {
  NONE: "NONE",
  PASSTHROUGH: "PASSTHROUGH",
  RESPOND: "RESPOND"
};
var ScalingBehavior = {
  DEFAULT: "DEFAULT",
  FILL: "FILL",
  FIT: "FIT",
  FIT_NO_UPSCALE: "FIT_NO_UPSCALE",
  STRETCH_TO_OUTPUT: "STRETCH_TO_OUTPUT"
};
var VideoTimecodeInsertion = {
  DISABLED: "DISABLED",
  PIC_TIMING_SEI: "PIC_TIMING_SEI"
};
var TimecodeTrack = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var ColorSpaceConversion = {
  FORCE_601: "FORCE_601",
  FORCE_709: "FORCE_709",
  FORCE_HDR10: "FORCE_HDR10",
  FORCE_HLG_2020: "FORCE_HLG_2020",
  FORCE_P3D65_HDR: "FORCE_P3D65_HDR",
  FORCE_P3D65_SDR: "FORCE_P3D65_SDR",
  FORCE_P3DCI: "FORCE_P3DCI",
  NONE: "NONE"
};
var HDRToSDRToneMapper = {
  PRESERVE_DETAILS: "PRESERVE_DETAILS",
  VIBRANT: "VIBRANT"
};
var SampleRangeConversion = {
  LIMITED_RANGE_CLIP: "LIMITED_RANGE_CLIP",
  LIMITED_RANGE_SQUEEZE: "LIMITED_RANGE_SQUEEZE",
  NONE: "NONE"
};
var DeinterlaceAlgorithm = {
  BLEND: "BLEND",
  BLEND_TICKER: "BLEND_TICKER",
  INTERPOLATE: "INTERPOLATE",
  INTERPOLATE_TICKER: "INTERPOLATE_TICKER",
  LINEAR_INTERPOLATION: "LINEAR_INTERPOLATION"
};
var DeinterlacerControl = {
  FORCE_ALL_FRAMES: "FORCE_ALL_FRAMES",
  NORMAL: "NORMAL"
};
var DeinterlacerMode = {
  ADAPTIVE: "ADAPTIVE",
  DEINTERLACE: "DEINTERLACE",
  INVERSE_TELECINE: "INVERSE_TELECINE"
};
var DolbyVisionLevel6Mode = {
  PASSTHROUGH: "PASSTHROUGH",
  RECALCULATE: "RECALCULATE",
  SPECIFY: "SPECIFY"
};
var DolbyVisionMapping = {
  HDR10_1000: "HDR10_1000",
  HDR10_NOMAP: "HDR10_NOMAP"
};
var DolbyVisionProfile = {
  PROFILE_5: "PROFILE_5",
  PROFILE_8_1: "PROFILE_8_1"
};
var NoiseReducerFilter = {
  BILATERAL: "BILATERAL",
  CONSERVE: "CONSERVE",
  GAUSSIAN: "GAUSSIAN",
  LANCZOS: "LANCZOS",
  MEAN: "MEAN",
  SHARPEN: "SHARPEN",
  SPATIAL: "SPATIAL",
  TEMPORAL: "TEMPORAL"
};
var NoiseFilterPostTemporalSharpening = {
  AUTO: "AUTO",
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var NoiseFilterPostTemporalSharpeningStrength = {
  HIGH: "HIGH",
  LOW: "LOW",
  MEDIUM: "MEDIUM"
};
var WatermarkingStrength = {
  DEFAULT: "DEFAULT",
  LIGHTER: "LIGHTER",
  LIGHTEST: "LIGHTEST",
  STRONGER: "STRONGER",
  STRONGEST: "STRONGEST"
};
var TimecodeBurninPosition = {
  BOTTOM_CENTER: "BOTTOM_CENTER",
  BOTTOM_LEFT: "BOTTOM_LEFT",
  BOTTOM_RIGHT: "BOTTOM_RIGHT",
  MIDDLE_CENTER: "MIDDLE_CENTER",
  MIDDLE_LEFT: "MIDDLE_LEFT",
  MIDDLE_RIGHT: "MIDDLE_RIGHT",
  TOP_CENTER: "TOP_CENTER",
  TOP_LEFT: "TOP_LEFT",
  TOP_RIGHT: "TOP_RIGHT"
};
var TimecodeSource = {
  EMBEDDED: "EMBEDDED",
  SPECIFIEDSTART: "SPECIFIEDSTART",
  ZEROBASED: "ZEROBASED"
};
var SimulateReservedQueue = {
  DISABLED: "DISABLED",
  ENABLED: "ENABLED"
};
var JobStatus = {
  CANCELED: "CANCELED",
  COMPLETE: "COMPLETE",
  ERROR: "ERROR",
  PROGRESSING: "PROGRESSING",
  SUBMITTED: "SUBMITTED"
};
var StatusUpdateInterval = {
  SECONDS_10: "SECONDS_10",
  SECONDS_12: "SECONDS_12",
  SECONDS_120: "SECONDS_120",
  SECONDS_15: "SECONDS_15",
  SECONDS_180: "SECONDS_180",
  SECONDS_20: "SECONDS_20",
  SECONDS_240: "SECONDS_240",
  SECONDS_30: "SECONDS_30",
  SECONDS_300: "SECONDS_300",
  SECONDS_360: "SECONDS_360",
  SECONDS_420: "SECONDS_420",
  SECONDS_480: "SECONDS_480",
  SECONDS_540: "SECONDS_540",
  SECONDS_60: "SECONDS_60",
  SECONDS_600: "SECONDS_600"
};
// Annotate the CommonJS export names for ESM import in node:

0 && (module.exports = {
  MediaConvertServiceException,
  __Client,
  MediaConvertClient,
  MediaConvert,
  $Command,
  AssociateCertificateCommand,
  CancelJobCommand,
  CreateJobCommand,
  CreateJobTemplateCommand,
  CreatePresetCommand,
  CreateQueueCommand,
  DeleteJobTemplateCommand,
  DeletePolicyCommand,
  DeletePresetCommand,
  DeleteQueueCommand,
  DescribeEndpointsCommand,
  DisassociateCertificateCommand,
  GetJobCommand,
  GetJobTemplateCommand,
  GetPolicyCommand,
  GetPresetCommand,
  GetQueueCommand,
  ListJobTemplatesCommand,
  ListJobsCommand,
  ListPresetsCommand,
  ListQueuesCommand,
  ListTagsForResourceCommand,
  ListVersionsCommand,
  ProbeCommand,
  PutPolicyCommand,
  SearchJobsCommand,
  TagResourceCommand,
  UntagResourceCommand,
  UpdateJobTemplateCommand,
  UpdatePresetCommand,
  UpdateQueueCommand,
  paginateDescribeEndpoints,
  paginateListJobTemplates,
  paginateListJobs,
  paginateListPresets,
  paginateListQueues,
  paginateListVersions,
  paginateSearchJobs,
  RequiredFlag,
  AudioChannelTag,
  AudioNormalizationAlgorithm,
  AudioNormalizationAlgorithmControl,
  AudioNormalizationLoudnessLogging,
  AudioNormalizationPeakCalculation,
  AudioTypeControl,
  AacAudioDescriptionBroadcasterMix,
  AacCodecProfile,
  AacCodingMode,
  AacRateControlMode,
  AacRawFormat,
  AacSpecification,
  AacVbrQuality,
  Ac3BitstreamMode,
  Ac3CodingMode,
  Ac3DynamicRangeCompressionLine,
  Ac3DynamicRangeCompressionProfile,
  Ac3DynamicRangeCompressionRf,
  Ac3LfeFilter,
  Ac3MetadataControl,
  AudioCodec,
  Eac3AtmosBitstreamMode,
  Eac3AtmosCodingMode,
  Eac3AtmosDialogueIntelligence,
  Eac3AtmosDownmixControl,
  Eac3AtmosDynamicRangeCompressionLine,
  Eac3AtmosDynamicRangeCompressionRf,
  Eac3AtmosDynamicRangeControl,
  Eac3AtmosMeteringMode,
  Eac3AtmosStereoDownmix,
  Eac3AtmosSurroundExMode,
  Eac3AttenuationControl,
  Eac3BitstreamMode,
  Eac3CodingMode,
  Eac3DcFilter,
  Eac3DynamicRangeCompressionLine,
  Eac3DynamicRangeCompressionRf,
  Eac3LfeControl,
  Eac3LfeFilter,
  Eac3MetadataControl,
  Eac3PassthroughControl,
  Eac3PhaseControl,
  Eac3StereoDownmix,
  Eac3SurroundExMode,
  Eac3SurroundMode,
  Mp3RateControlMode,
  WavFormat,
  LanguageCode,
  AudioLanguageCodeControl,
  RuleType,
  BurninSubtitleAlignment,
  BurninSubtitleApplyFontColor,
  BurninSubtitleBackgroundColor,
  BurninSubtitleFallbackFont,
  BurninSubtitleFontColor,
  FontScript,
  BurninSubtitleOutlineColor,
  RemoveRubyReserveAttributes,
  BurninSubtitleShadowColor,
  BurnInSubtitleStylePassthrough,
  BurninSubtitleTeletextSpacing,
  CaptionDestinationType,
  DvbSubtitleAlignment,
  DvbSubtitleApplyFontColor,
  DvbSubtitleBackgroundColor,
  DvbddsHandling,
  DvbSubSubtitleFallbackFont,
  DvbSubtitleFontColor,
  DvbSubtitleOutlineColor,
  DvbSubtitleShadowColor,
  DvbSubtitleStylePassthrough,
  DvbSubtitlingType,
  DvbSubtitleTeletextSpacing,
  ImscAccessibilitySubs,
  ImscStylePassthrough,
  SccDestinationFramerate,
  SrtStylePassthrough,
  TeletextPageType,
  TtmlStylePassthrough,
  WebvttAccessibilitySubs,
  WebvttStylePassthrough,
  ColorSpace,
  FrameMetricType,
  HlsAdMarkers,
  AdvancedInputFilter,
  AdvancedInputFilterAddTexture,
  AdvancedInputFilterSharpen,
  AudioDurationCorrection,
  AudioDefaultSelection,
  AudioSelectorType,
  AncillaryConvert608To708,
  AncillaryTerminateCaptions,
  EmbeddedConvert608To708,
  EmbeddedTerminateCaptions,
  CaptionSourceByteRateLimit,
  FileSourceConvert608To708,
  CaptionSourceConvertPaintOnToPopOn,
  FileSourceTimeDeltaUnits,
  CaptionSourceUpconvertSTLToTeletext,
  CaptionSourceType,
  InputDeblockFilter,
  DecryptionMode,
  InputDenoiseFilter,
  DynamicAudioSelectorType,
  InputFilterEnable,
  InputScanType,
  InputPsiControl,
  InputTimecodeSource,
  VideoOverlayUnit,
  VideoOverlayPlayBackMode,
  AlphaBehavior,
  ColorSpaceUsage,
  EmbeddedTimecodeOverride,
  PadVideo,
  InputRotate,
  InputSampleRange,
  AccelerationMode,
  AccelerationStatus,
  BillingTagsSource,
  JobPhase,
  CopyProtectionAction,
  VchipAction,
  MotionImageInsertionMode,
  MotionImagePlayback,
  NielsenActiveWatermarkProcessType,
  NielsenSourceWatermarkStatusType,
  NielsenUniqueTicPerAudioTrackType,
  CmafClientCache,
  CmafCodecSpecification,
  DashManifestStyle,
  S3ObjectCannedAcl,
  S3ServerSideEncryptionType,
  S3StorageClass,
  CmafEncryptionType,
  CmafInitializationVectorInManifest,
  PresetSpeke20Audio,
  PresetSpeke20Video,
  CmafKeyProviderType,
  CmafImageBasedTrickPlay,
  CmafIntervalCadence,
  CmafManifestCompression,
  CmafManifestDurationFormat,
  CmafMpdManifestBandwidthType,
  CmafMpdProfile,
  CmafPtsOffsetHandlingForBFrames,
  CmafSegmentControl,
  CmafSegmentLengthControl,
  CmafStreamInfResolution,
  CmafTargetDurationCompatibilityMode,
  CmafVideoCompositionOffsets,
  CmafWriteDASHManifest,
  CmafWriteHLSManifest,
  CmafWriteSegmentTimelineInRepresentation,
  DashIsoGroupAudioChannelConfigSchemeIdUri,
  DashIsoPlaybackDeviceCompatibility,
  DashIsoHbbtvCompliance,
  DashIsoImageBasedTrickPlay,
  DashIsoIntervalCadence,
  DashIsoMpdManifestBandwidthType,
  DashIsoMpdProfile,
  DashIsoPtsOffsetHandlingForBFrames,
  DashIsoSegmentControl,
  DashIsoSegmentLengthControl,
  DashIsoVideoCompositionOffsets,
  DashIsoWriteSegmentTimelineInRepresentation,
  HlsAudioOnlyHeader,
  HlsCaptionLanguageSetting,
  HlsCaptionSegmentLengthControl,
  HlsClientCache,
  HlsCodecSpecification,
  HlsDirectoryStructure,
  HlsEncryptionType,
  HlsInitializationVectorInManifest,
  HlsOfflineEncrypted,
  HlsKeyProviderType,
  HlsImageBasedTrickPlay,
  HlsIntervalCadence,
  HlsManifestCompression,
  HlsManifestDurationFormat,
  HlsOutputSelection,
  HlsProgramDateTime,
  HlsProgressiveWriteHlsManifest,
  HlsSegmentControl,
  HlsSegmentLengthControl,
  HlsStreamInfResolution,
  HlsTargetDurationCompatibilityMode,
  HlsTimedMetadataId3Frame,
  MsSmoothAudioDeduplication,
  MsSmoothFragmentLengthControl,
  MsSmoothManifestEncoding,
  OutputGroupType,
  CmfcAudioDuration,
  CmfcAudioTrackType,
  CmfcDescriptiveVideoServiceFlag,
  CmfcIFrameOnlyManifest,
  CmfcKlvMetadata,
  CmfcManifestMetadataSignaling,
  CmfcScte35Esam,
  CmfcScte35Source,
  CmfcTimedMetadata,
  CmfcTimedMetadataBoxVersion,
  ContainerType,
  F4vMoovPlacement,
  M2tsAudioBufferModel,
  M2tsAudioDuration,
  M2tsBufferModel,
  M2tsDataPtsControl,
  OutputSdt,
  M2tsEbpAudioInterval,
  M2tsEbpPlacement,
  M2tsEsRateInPes,
  M2tsForceTsVideoEbpOrder,
  M2tsKlvMetadata,
  M2tsNielsenId3,
  M2tsPcrControl,
  M2tsPreventBufferUnderflow,
  TsPtsOffset,
  M2tsRateMode,
  M2tsScte35Source,
  M2tsSegmentationMarkers,
  M2tsSegmentationStyle,
  M3u8AudioDuration,
  M3u8DataPtsControl,
  M3u8NielsenId3,
  M3u8PcrControl,
  M3u8Scte35Source,
  TimedMetadata,
  MovClapAtom,
  MovCslgAtom,
  MovMpeg2FourCCControl,
  MovPaddingControl,
  MovReference,
  Mp4CslgAtom,
  Mp4FreeSpaceBox,
  Mp4MoovPlacement,
  MpdAccessibilityCaptionHints,
  MpdAudioDuration,
  MpdCaptionContainerType,
  MpdKlvMetadata,
  MpdManifestMetadataSignaling,
  MpdScte35Esam,
  MpdScte35Source,
  MpdTimedMetadata,
  MpdTimedMetadataBoxVersion,
  MxfAfdSignaling,
  MxfProfile,
  MxfXavcDurationMode,
  HlsAudioOnlyContainer,
  HlsAudioTrackType,
  HlsDescriptiveVideoServiceFlag,
  HlsIFrameOnlyManifest,
  AfdSignaling,
  AntiAlias,
  ChromaPositionMode,
  Av1AdaptiveQuantization,
  Av1BitDepth,
  Av1FilmGrainSynthesis,
  Av1FramerateControl,
  Av1FramerateConversionAlgorithm,
  Av1RateControlMode,
  Av1SpatialAdaptiveQuantization,
  AvcIntraClass,
  AvcIntraUhdQualityTuningLevel,
  AvcIntraFramerateControl,
  AvcIntraFramerateConversionAlgorithm,
  AvcIntraInterlaceMode,
  AvcIntraScanTypeConversionMode,
  AvcIntraSlowPal,
  AvcIntraTelecine,
  VideoCodec,
  GifFramerateControl,
  GifFramerateConversionAlgorithm,
  H264AdaptiveQuantization,
  BandwidthReductionFilterSharpening,
  BandwidthReductionFilterStrength,
  H264CodecLevel,
  H264CodecProfile,
  H264DynamicSubGop,
  H264EndOfStreamMarkers,
  H264EntropyEncoding,
  H264FieldEncoding,
  H264FlickerAdaptiveQuantization,
  H264FramerateControl,
  H264FramerateConversionAlgorithm,
  H264GopBReference,
  H264GopSizeUnits,
  H264InterlaceMode,
  H264ParControl,
  H264QualityTuningLevel,
  H264RateControlMode,
  H264RepeatPps,
  H264SaliencyAwareEncoding,
  H264ScanTypeConversionMode,
  H264SceneChangeDetect,
  H264SlowPal,
  H264SpatialAdaptiveQuantization,
  H264Syntax,
  H264Telecine,
  H264TemporalAdaptiveQuantization,
  H264UnregisteredSeiTimecode,
  H264WriteMp4PackagingType,
  H265AdaptiveQuantization,
  H265AlternateTransferFunctionSei,
  H265CodecLevel,
  H265CodecProfile,
  H265Deblocking,
  H265DynamicSubGop,
  H265EndOfStreamMarkers,
  H265FlickerAdaptiveQuantization,
  H265FramerateControl,
  H265FramerateConversionAlgorithm,
  H265GopBReference,
  H265GopSizeUnits,
  H265InterlaceMode,
  H265ParControl,
  H265QualityTuningLevel,
  H265RateControlMode,
  H265SampleAdaptiveOffsetFilterMode,
  H265ScanTypeConversionMode,
  H265SceneChangeDetect,
  H265SlowPal,
  H265SpatialAdaptiveQuantization,
  H265Telecine,
  H265TemporalAdaptiveQuantization,
  H265TemporalIds,
  H265Tiles,
  H265UnregisteredSeiTimecode,
  H265WriteMp4PackagingType,
  Mpeg2AdaptiveQuantization,
  Mpeg2CodecLevel,
  Mpeg2CodecProfile,
  Mpeg2DynamicSubGop,
  Mpeg2FramerateControl,
  Mpeg2FramerateConversionAlgorithm,
  Mpeg2GopSizeUnits,
  Mpeg2InterlaceMode,
  Mpeg2IntraDcPrecision,
  Mpeg2ParControl,
  Mpeg2QualityTuningLevel,
  Mpeg2RateControlMode,
  Mpeg2ScanTypeConversionMode,
  Mpeg2SceneChangeDetect,
  Mpeg2SlowPal,
  Mpeg2SpatialAdaptiveQuantization,
  Mpeg2Syntax,
  Mpeg2Telecine,
  Mpeg2TemporalAdaptiveQuantization,
  ProresChromaSampling,
  ProresCodecProfile,
  ProresFramerateControl,
  ProresFramerateConversionAlgorithm,
  ProresInterlaceMode,
  ProresParControl,
  ProresScanTypeConversionMode,
  ProresSlowPal,
  ProresTelecine,
  UncompressedFourcc,
  UncompressedFramerateControl,
  UncompressedFramerateConversionAlgorithm,
  UncompressedInterlaceMode,
  UncompressedScanTypeConversionMode,
  UncompressedSlowPal,
  UncompressedTelecine,
  Vc3FramerateControl,
  Vc3FramerateConversionAlgorithm,
  Vc3InterlaceMode,
  Vc3ScanTypeConversionMode,
  Vc3SlowPal,
  Vc3Telecine,
  Vc3Class,
  Vp8FramerateControl,
  Vp8FramerateConversionAlgorithm,
  Vp8ParControl,
  Vp8QualityTuningLevel,
  Vp8RateControlMode,
  Vp9FramerateControl,
  Vp9FramerateConversionAlgorithm,
  Vp9ParControl,
  Vp9QualityTuningLevel,
  Vp9RateControlMode,
  XavcAdaptiveQuantization,
  XavcEntropyEncoding,
  XavcFramerateControl,
  XavcFramerateConversionAlgorithm,
  XavcProfile,
  XavcSlowPal,
  XavcSpatialAdaptiveQuantization,
  XavcTemporalAdaptiveQuantization,
  Xavc4kIntraCbgProfileClass,
  Xavc4kIntraVbrProfileClass,
  Xavc4kProfileBitrateClass,
  Xavc4kProfileCodecProfile,
  XavcFlickerAdaptiveQuantization,
  XavcGopBReference,
  Xavc4kProfileQualityTuningLevel,
  XavcHdIntraCbgProfileClass,
  XavcHdProfileBitrateClass,
  XavcInterlaceMode,
  XavcHdProfileQualityTuningLevel,
  XavcHdProfileTelecine,
  ColorMetadata,
  DropFrameTimecode,
  RespondToAfd,
  ScalingBehavior,
  VideoTimecodeInsertion,
  TimecodeTrack,
  ColorSpaceConversion,
  HDRToSDRToneMapper,
  SampleRangeConversion,
  DeinterlaceAlgorithm,
  DeinterlacerControl,
  DeinterlacerMode,
  DolbyVisionLevel6Mode,
  DolbyVisionMapping,
  DolbyVisionProfile,
  NoiseReducerFilter,
  NoiseFilterPostTemporalSharpening,
  NoiseFilterPostTemporalSharpeningStrength,
  WatermarkingStrength,
  TimecodeBurninPosition,
  TimecodeSource,
  SimulateReservedQueue,
  JobStatus,
  StatusUpdateInterval,
  Type,
  Format,
  Codec,
  TrackType,
  ColorPrimaries,
  MatrixCoefficients,
  TransferCharacteristics,
  PricingPlan,
  Commitment,
  RenewalType,
  ReservationPlanStatus,
  QueueStatus,
  BadRequestException,
  ConflictException,
  ForbiddenException,
  InternalServerErrorException,
  NotFoundException,
  TooManyRequestsException,
  DescribeEndpointsMode,
  InputPolicy,
  JobTemplateListBy,
  Order,
  PresetListBy,
  QueueListBy
});

