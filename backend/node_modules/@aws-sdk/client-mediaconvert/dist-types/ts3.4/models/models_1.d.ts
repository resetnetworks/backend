import {
  AudioDescription,
  AutomatedEncodingSettings,
  AvailBlanking,
  CaptionDescription,
  CmafGroupSettings,
  ColorConversion3DLUTSetting,
  DashIsoGroupSettings,
  DestinationSettings,
  EsamSettings,
  ExtendedDataServices,
  FileGroupSettings,
  FrameMetricType,
  Hdr10Metadata,
  HlsGroupSettings,
  Id3Insertion,
  ImageInserter,
  Input,
  KantarWatermarkSettings,
  MotionImageInserter,
  MsSmoothAdditionalManifest,
  NielsenConfiguration,
  NielsenNonLinearWatermarkSettings,
  Rectangle,
  SpekeKeyProvider,
} from "./models_0";
export declare const MsSmoothAudioDeduplication: {
  readonly COMBINE_DUPLICATE_STREAMS: "COMBINE_DUPLICATE_STREAMS";
  readonly NONE: "NONE";
};
export type MsSmoothAudioDeduplication =
  (typeof MsSmoothAudioDeduplication)[keyof typeof MsSmoothAudioDeduplication];
export interface MsSmoothEncryptionSettings {
  SpekeKeyProvider?: SpekeKeyProvider | undefined;
}
export declare const MsSmoothFragmentLengthControl: {
  readonly EXACT: "EXACT";
  readonly GOP_MULTIPLE: "GOP_MULTIPLE";
};
export type MsSmoothFragmentLengthControl =
  (typeof MsSmoothFragmentLengthControl)[keyof typeof MsSmoothFragmentLengthControl];
export declare const MsSmoothManifestEncoding: {
  readonly UTF16: "UTF16";
  readonly UTF8: "UTF8";
};
export type MsSmoothManifestEncoding =
  (typeof MsSmoothManifestEncoding)[keyof typeof MsSmoothManifestEncoding];
export interface MsSmoothGroupSettings {
  AdditionalManifests?: MsSmoothAdditionalManifest[] | undefined;
  AudioDeduplication?: MsSmoothAudioDeduplication | undefined;
  Destination?: string | undefined;
  DestinationSettings?: DestinationSettings | undefined;
  Encryption?: MsSmoothEncryptionSettings | undefined;
  FragmentLength?: number | undefined;
  FragmentLengthControl?: MsSmoothFragmentLengthControl | undefined;
  ManifestEncoding?: MsSmoothManifestEncoding | undefined;
}
export declare const OutputGroupType: {
  readonly CMAF_GROUP_SETTINGS: "CMAF_GROUP_SETTINGS";
  readonly DASH_ISO_GROUP_SETTINGS: "DASH_ISO_GROUP_SETTINGS";
  readonly FILE_GROUP_SETTINGS: "FILE_GROUP_SETTINGS";
  readonly HLS_GROUP_SETTINGS: "HLS_GROUP_SETTINGS";
  readonly MS_SMOOTH_GROUP_SETTINGS: "MS_SMOOTH_GROUP_SETTINGS";
};
export type OutputGroupType =
  (typeof OutputGroupType)[keyof typeof OutputGroupType];
export interface OutputGroupSettings {
  CmafGroupSettings?: CmafGroupSettings | undefined;
  DashIsoGroupSettings?: DashIsoGroupSettings | undefined;
  FileGroupSettings?: FileGroupSettings | undefined;
  HlsGroupSettings?: HlsGroupSettings | undefined;
  MsSmoothGroupSettings?: MsSmoothGroupSettings | undefined;
  PerFrameMetrics?: FrameMetricType[] | undefined;
  Type?: OutputGroupType | undefined;
}
export declare const CmfcAudioDuration: {
  readonly DEFAULT_CODEC_DURATION: "DEFAULT_CODEC_DURATION";
  readonly MATCH_VIDEO_DURATION: "MATCH_VIDEO_DURATION";
};
export type CmfcAudioDuration =
  (typeof CmfcAudioDuration)[keyof typeof CmfcAudioDuration];
export declare const CmfcAudioTrackType: {
  readonly ALTERNATE_AUDIO_AUTO_SELECT: "ALTERNATE_AUDIO_AUTO_SELECT";
  readonly ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT: "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT";
  readonly ALTERNATE_AUDIO_NOT_AUTO_SELECT: "ALTERNATE_AUDIO_NOT_AUTO_SELECT";
  readonly AUDIO_ONLY_VARIANT_STREAM: "AUDIO_ONLY_VARIANT_STREAM";
};
export type CmfcAudioTrackType =
  (typeof CmfcAudioTrackType)[keyof typeof CmfcAudioTrackType];
export declare const CmfcDescriptiveVideoServiceFlag: {
  readonly DONT_FLAG: "DONT_FLAG";
  readonly FLAG: "FLAG";
};
export type CmfcDescriptiveVideoServiceFlag =
  (typeof CmfcDescriptiveVideoServiceFlag)[keyof typeof CmfcDescriptiveVideoServiceFlag];
export declare const CmfcIFrameOnlyManifest: {
  readonly EXCLUDE: "EXCLUDE";
  readonly INCLUDE: "INCLUDE";
};
export type CmfcIFrameOnlyManifest =
  (typeof CmfcIFrameOnlyManifest)[keyof typeof CmfcIFrameOnlyManifest];
export declare const CmfcKlvMetadata: {
  readonly NONE: "NONE";
  readonly PASSTHROUGH: "PASSTHROUGH";
};
export type CmfcKlvMetadata =
  (typeof CmfcKlvMetadata)[keyof typeof CmfcKlvMetadata];
export declare const CmfcManifestMetadataSignaling: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type CmfcManifestMetadataSignaling =
  (typeof CmfcManifestMetadataSignaling)[keyof typeof CmfcManifestMetadataSignaling];
export declare const CmfcScte35Esam: {
  readonly INSERT: "INSERT";
  readonly NONE: "NONE";
};
export type CmfcScte35Esam =
  (typeof CmfcScte35Esam)[keyof typeof CmfcScte35Esam];
export declare const CmfcScte35Source: {
  readonly NONE: "NONE";
  readonly PASSTHROUGH: "PASSTHROUGH";
};
export type CmfcScte35Source =
  (typeof CmfcScte35Source)[keyof typeof CmfcScte35Source];
export declare const CmfcTimedMetadata: {
  readonly NONE: "NONE";
  readonly PASSTHROUGH: "PASSTHROUGH";
};
export type CmfcTimedMetadata =
  (typeof CmfcTimedMetadata)[keyof typeof CmfcTimedMetadata];
export declare const CmfcTimedMetadataBoxVersion: {
  readonly VERSION_0: "VERSION_0";
  readonly VERSION_1: "VERSION_1";
};
export type CmfcTimedMetadataBoxVersion =
  (typeof CmfcTimedMetadataBoxVersion)[keyof typeof CmfcTimedMetadataBoxVersion];
export interface CmfcSettings {
  AudioDuration?: CmfcAudioDuration | undefined;
  AudioGroupId?: string | undefined;
  AudioRenditionSets?: string | undefined;
  AudioTrackType?: CmfcAudioTrackType | undefined;
  DescriptiveVideoServiceFlag?: CmfcDescriptiveVideoServiceFlag | undefined;
  IFrameOnlyManifest?: CmfcIFrameOnlyManifest | undefined;
  KlvMetadata?: CmfcKlvMetadata | undefined;
  ManifestMetadataSignaling?: CmfcManifestMetadataSignaling | undefined;
  Scte35Esam?: CmfcScte35Esam | undefined;
  Scte35Source?: CmfcScte35Source | undefined;
  TimedMetadata?: CmfcTimedMetadata | undefined;
  TimedMetadataBoxVersion?: CmfcTimedMetadataBoxVersion | undefined;
  TimedMetadataSchemeIdUri?: string | undefined;
  TimedMetadataValue?: string | undefined;
}
export declare const ContainerType: {
  readonly CMFC: "CMFC";
  readonly F4V: "F4V";
  readonly GIF: "GIF";
  readonly ISMV: "ISMV";
  readonly M2TS: "M2TS";
  readonly M3U8: "M3U8";
  readonly MOV: "MOV";
  readonly MP4: "MP4";
  readonly MPD: "MPD";
  readonly MXF: "MXF";
  readonly OGG: "OGG";
  readonly RAW: "RAW";
  readonly WEBM: "WEBM";
  readonly Y4M: "Y4M";
};
export type ContainerType = (typeof ContainerType)[keyof typeof ContainerType];
export declare const F4vMoovPlacement: {
  readonly NORMAL: "NORMAL";
  readonly PROGRESSIVE_DOWNLOAD: "PROGRESSIVE_DOWNLOAD";
};
export type F4vMoovPlacement =
  (typeof F4vMoovPlacement)[keyof typeof F4vMoovPlacement];
export interface F4vSettings {
  MoovPlacement?: F4vMoovPlacement | undefined;
}
export declare const M2tsAudioBufferModel: {
  readonly ATSC: "ATSC";
  readonly DVB: "DVB";
};
export type M2tsAudioBufferModel =
  (typeof M2tsAudioBufferModel)[keyof typeof M2tsAudioBufferModel];
export declare const M2tsAudioDuration: {
  readonly DEFAULT_CODEC_DURATION: "DEFAULT_CODEC_DURATION";
  readonly MATCH_VIDEO_DURATION: "MATCH_VIDEO_DURATION";
};
export type M2tsAudioDuration =
  (typeof M2tsAudioDuration)[keyof typeof M2tsAudioDuration];
export declare const M2tsBufferModel: {
  readonly MULTIPLEX: "MULTIPLEX";
  readonly NONE: "NONE";
};
export type M2tsBufferModel =
  (typeof M2tsBufferModel)[keyof typeof M2tsBufferModel];
export declare const M2tsDataPtsControl: {
  readonly ALIGN_TO_VIDEO: "ALIGN_TO_VIDEO";
  readonly AUTO: "AUTO";
};
export type M2tsDataPtsControl =
  (typeof M2tsDataPtsControl)[keyof typeof M2tsDataPtsControl];
export interface DvbNitSettings {
  NetworkId?: number | undefined;
  NetworkName?: string | undefined;
  NitInterval?: number | undefined;
}
export declare const OutputSdt: {
  readonly SDT_FOLLOW: "SDT_FOLLOW";
  readonly SDT_FOLLOW_IF_PRESENT: "SDT_FOLLOW_IF_PRESENT";
  readonly SDT_MANUAL: "SDT_MANUAL";
  readonly SDT_NONE: "SDT_NONE";
};
export type OutputSdt = (typeof OutputSdt)[keyof typeof OutputSdt];
export interface DvbSdtSettings {
  OutputSdt?: OutputSdt | undefined;
  SdtInterval?: number | undefined;
  ServiceName?: string | undefined;
  ServiceProviderName?: string | undefined;
}
export interface DvbTdtSettings {
  TdtInterval?: number | undefined;
}
export declare const M2tsEbpAudioInterval: {
  readonly VIDEO_AND_FIXED_INTERVALS: "VIDEO_AND_FIXED_INTERVALS";
  readonly VIDEO_INTERVAL: "VIDEO_INTERVAL";
};
export type M2tsEbpAudioInterval =
  (typeof M2tsEbpAudioInterval)[keyof typeof M2tsEbpAudioInterval];
export declare const M2tsEbpPlacement: {
  readonly VIDEO_AND_AUDIO_PIDS: "VIDEO_AND_AUDIO_PIDS";
  readonly VIDEO_PID: "VIDEO_PID";
};
export type M2tsEbpPlacement =
  (typeof M2tsEbpPlacement)[keyof typeof M2tsEbpPlacement];
export declare const M2tsEsRateInPes: {
  readonly EXCLUDE: "EXCLUDE";
  readonly INCLUDE: "INCLUDE";
};
export type M2tsEsRateInPes =
  (typeof M2tsEsRateInPes)[keyof typeof M2tsEsRateInPes];
export declare const M2tsForceTsVideoEbpOrder: {
  readonly DEFAULT: "DEFAULT";
  readonly FORCE: "FORCE";
};
export type M2tsForceTsVideoEbpOrder =
  (typeof M2tsForceTsVideoEbpOrder)[keyof typeof M2tsForceTsVideoEbpOrder];
export declare const M2tsKlvMetadata: {
  readonly NONE: "NONE";
  readonly PASSTHROUGH: "PASSTHROUGH";
};
export type M2tsKlvMetadata =
  (typeof M2tsKlvMetadata)[keyof typeof M2tsKlvMetadata];
export declare const M2tsNielsenId3: {
  readonly INSERT: "INSERT";
  readonly NONE: "NONE";
};
export type M2tsNielsenId3 =
  (typeof M2tsNielsenId3)[keyof typeof M2tsNielsenId3];
export declare const M2tsPcrControl: {
  readonly CONFIGURED_PCR_PERIOD: "CONFIGURED_PCR_PERIOD";
  readonly PCR_EVERY_PES_PACKET: "PCR_EVERY_PES_PACKET";
};
export type M2tsPcrControl =
  (typeof M2tsPcrControl)[keyof typeof M2tsPcrControl];
export declare const M2tsPreventBufferUnderflow: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type M2tsPreventBufferUnderflow =
  (typeof M2tsPreventBufferUnderflow)[keyof typeof M2tsPreventBufferUnderflow];
export declare const TsPtsOffset: {
  readonly AUTO: "AUTO";
  readonly MILLISECONDS: "MILLISECONDS";
  readonly SECONDS: "SECONDS";
};
export type TsPtsOffset = (typeof TsPtsOffset)[keyof typeof TsPtsOffset];
export declare const M2tsRateMode: {
  readonly CBR: "CBR";
  readonly VBR: "VBR";
};
export type M2tsRateMode = (typeof M2tsRateMode)[keyof typeof M2tsRateMode];
export interface M2tsScte35Esam {
  Scte35EsamPid?: number | undefined;
}
export declare const M2tsScte35Source: {
  readonly NONE: "NONE";
  readonly PASSTHROUGH: "PASSTHROUGH";
};
export type M2tsScte35Source =
  (typeof M2tsScte35Source)[keyof typeof M2tsScte35Source];
export declare const M2tsSegmentationMarkers: {
  readonly EBP: "EBP";
  readonly EBP_LEGACY: "EBP_LEGACY";
  readonly NONE: "NONE";
  readonly PSI_SEGSTART: "PSI_SEGSTART";
  readonly RAI_ADAPT: "RAI_ADAPT";
  readonly RAI_SEGSTART: "RAI_SEGSTART";
};
export type M2tsSegmentationMarkers =
  (typeof M2tsSegmentationMarkers)[keyof typeof M2tsSegmentationMarkers];
export declare const M2tsSegmentationStyle: {
  readonly MAINTAIN_CADENCE: "MAINTAIN_CADENCE";
  readonly RESET_CADENCE: "RESET_CADENCE";
};
export type M2tsSegmentationStyle =
  (typeof M2tsSegmentationStyle)[keyof typeof M2tsSegmentationStyle];
export interface M2tsSettings {
  AudioBufferModel?: M2tsAudioBufferModel | undefined;
  AudioDuration?: M2tsAudioDuration | undefined;
  AudioFramesPerPes?: number | undefined;
  AudioPids?: number[] | undefined;
  AudioPtsOffsetDelta?: number | undefined;
  Bitrate?: number | undefined;
  BufferModel?: M2tsBufferModel | undefined;
  DataPTSControl?: M2tsDataPtsControl | undefined;
  DvbNitSettings?: DvbNitSettings | undefined;
  DvbSdtSettings?: DvbSdtSettings | undefined;
  DvbSubPids?: number[] | undefined;
  DvbTdtSettings?: DvbTdtSettings | undefined;
  DvbTeletextPid?: number | undefined;
  EbpAudioInterval?: M2tsEbpAudioInterval | undefined;
  EbpPlacement?: M2tsEbpPlacement | undefined;
  EsRateInPes?: M2tsEsRateInPes | undefined;
  ForceTsVideoEbpOrder?: M2tsForceTsVideoEbpOrder | undefined;
  FragmentTime?: number | undefined;
  KlvMetadata?: M2tsKlvMetadata | undefined;
  MaxPcrInterval?: number | undefined;
  MinEbpInterval?: number | undefined;
  NielsenId3?: M2tsNielsenId3 | undefined;
  NullPacketBitrate?: number | undefined;
  PatInterval?: number | undefined;
  PcrControl?: M2tsPcrControl | undefined;
  PcrPid?: number | undefined;
  PmtInterval?: number | undefined;
  PmtPid?: number | undefined;
  PreventBufferUnderflow?: M2tsPreventBufferUnderflow | undefined;
  PrivateMetadataPid?: number | undefined;
  ProgramNumber?: number | undefined;
  PtsOffset?: number | undefined;
  PtsOffsetMode?: TsPtsOffset | undefined;
  RateMode?: M2tsRateMode | undefined;
  Scte35Esam?: M2tsScte35Esam | undefined;
  Scte35Pid?: number | undefined;
  Scte35Source?: M2tsScte35Source | undefined;
  SegmentationMarkers?: M2tsSegmentationMarkers | undefined;
  SegmentationStyle?: M2tsSegmentationStyle | undefined;
  SegmentationTime?: number | undefined;
  TimedMetadataPid?: number | undefined;
  TransportStreamId?: number | undefined;
  VideoPid?: number | undefined;
}
export declare const M3u8AudioDuration: {
  readonly DEFAULT_CODEC_DURATION: "DEFAULT_CODEC_DURATION";
  readonly MATCH_VIDEO_DURATION: "MATCH_VIDEO_DURATION";
};
export type M3u8AudioDuration =
  (typeof M3u8AudioDuration)[keyof typeof M3u8AudioDuration];
export declare const M3u8DataPtsControl: {
  readonly ALIGN_TO_VIDEO: "ALIGN_TO_VIDEO";
  readonly AUTO: "AUTO";
};
export type M3u8DataPtsControl =
  (typeof M3u8DataPtsControl)[keyof typeof M3u8DataPtsControl];
export declare const M3u8NielsenId3: {
  readonly INSERT: "INSERT";
  readonly NONE: "NONE";
};
export type M3u8NielsenId3 =
  (typeof M3u8NielsenId3)[keyof typeof M3u8NielsenId3];
export declare const M3u8PcrControl: {
  readonly CONFIGURED_PCR_PERIOD: "CONFIGURED_PCR_PERIOD";
  readonly PCR_EVERY_PES_PACKET: "PCR_EVERY_PES_PACKET";
};
export type M3u8PcrControl =
  (typeof M3u8PcrControl)[keyof typeof M3u8PcrControl];
export declare const M3u8Scte35Source: {
  readonly NONE: "NONE";
  readonly PASSTHROUGH: "PASSTHROUGH";
};
export type M3u8Scte35Source =
  (typeof M3u8Scte35Source)[keyof typeof M3u8Scte35Source];
export declare const TimedMetadata: {
  readonly NONE: "NONE";
  readonly PASSTHROUGH: "PASSTHROUGH";
};
export type TimedMetadata = (typeof TimedMetadata)[keyof typeof TimedMetadata];
export interface M3u8Settings {
  AudioDuration?: M3u8AudioDuration | undefined;
  AudioFramesPerPes?: number | undefined;
  AudioPids?: number[] | undefined;
  AudioPtsOffsetDelta?: number | undefined;
  DataPTSControl?: M3u8DataPtsControl | undefined;
  MaxPcrInterval?: number | undefined;
  NielsenId3?: M3u8NielsenId3 | undefined;
  PatInterval?: number | undefined;
  PcrControl?: M3u8PcrControl | undefined;
  PcrPid?: number | undefined;
  PmtInterval?: number | undefined;
  PmtPid?: number | undefined;
  PrivateMetadataPid?: number | undefined;
  ProgramNumber?: number | undefined;
  PtsOffset?: number | undefined;
  PtsOffsetMode?: TsPtsOffset | undefined;
  Scte35Pid?: number | undefined;
  Scte35Source?: M3u8Scte35Source | undefined;
  TimedMetadata?: TimedMetadata | undefined;
  TimedMetadataPid?: number | undefined;
  TransportStreamId?: number | undefined;
  VideoPid?: number | undefined;
}
export declare const MovClapAtom: {
  readonly EXCLUDE: "EXCLUDE";
  readonly INCLUDE: "INCLUDE";
};
export type MovClapAtom = (typeof MovClapAtom)[keyof typeof MovClapAtom];
export declare const MovCslgAtom: {
  readonly EXCLUDE: "EXCLUDE";
  readonly INCLUDE: "INCLUDE";
};
export type MovCslgAtom = (typeof MovCslgAtom)[keyof typeof MovCslgAtom];
export declare const MovMpeg2FourCCControl: {
  readonly MPEG: "MPEG";
  readonly XDCAM: "XDCAM";
};
export type MovMpeg2FourCCControl =
  (typeof MovMpeg2FourCCControl)[keyof typeof MovMpeg2FourCCControl];
export declare const MovPaddingControl: {
  readonly NONE: "NONE";
  readonly OMNEON: "OMNEON";
};
export type MovPaddingControl =
  (typeof MovPaddingControl)[keyof typeof MovPaddingControl];
export declare const MovReference: {
  readonly EXTERNAL: "EXTERNAL";
  readonly SELF_CONTAINED: "SELF_CONTAINED";
};
export type MovReference = (typeof MovReference)[keyof typeof MovReference];
export interface MovSettings {
  ClapAtom?: MovClapAtom | undefined;
  CslgAtom?: MovCslgAtom | undefined;
  Mpeg2FourCCControl?: MovMpeg2FourCCControl | undefined;
  PaddingControl?: MovPaddingControl | undefined;
  Reference?: MovReference | undefined;
}
export declare const Mp4CslgAtom: {
  readonly EXCLUDE: "EXCLUDE";
  readonly INCLUDE: "INCLUDE";
};
export type Mp4CslgAtom = (typeof Mp4CslgAtom)[keyof typeof Mp4CslgAtom];
export declare const Mp4FreeSpaceBox: {
  readonly EXCLUDE: "EXCLUDE";
  readonly INCLUDE: "INCLUDE";
};
export type Mp4FreeSpaceBox =
  (typeof Mp4FreeSpaceBox)[keyof typeof Mp4FreeSpaceBox];
export declare const Mp4MoovPlacement: {
  readonly NORMAL: "NORMAL";
  readonly PROGRESSIVE_DOWNLOAD: "PROGRESSIVE_DOWNLOAD";
};
export type Mp4MoovPlacement =
  (typeof Mp4MoovPlacement)[keyof typeof Mp4MoovPlacement];
export interface Mp4Settings {
  AudioDuration?: CmfcAudioDuration | undefined;
  CslgAtom?: Mp4CslgAtom | undefined;
  CttsVersion?: number | undefined;
  FreeSpaceBox?: Mp4FreeSpaceBox | undefined;
  MoovPlacement?: Mp4MoovPlacement | undefined;
  Mp4MajorBrand?: string | undefined;
}
export declare const MpdAccessibilityCaptionHints: {
  readonly EXCLUDE: "EXCLUDE";
  readonly INCLUDE: "INCLUDE";
};
export type MpdAccessibilityCaptionHints =
  (typeof MpdAccessibilityCaptionHints)[keyof typeof MpdAccessibilityCaptionHints];
export declare const MpdAudioDuration: {
  readonly DEFAULT_CODEC_DURATION: "DEFAULT_CODEC_DURATION";
  readonly MATCH_VIDEO_DURATION: "MATCH_VIDEO_DURATION";
};
export type MpdAudioDuration =
  (typeof MpdAudioDuration)[keyof typeof MpdAudioDuration];
export declare const MpdCaptionContainerType: {
  readonly FRAGMENTED_MP4: "FRAGMENTED_MP4";
  readonly RAW: "RAW";
};
export type MpdCaptionContainerType =
  (typeof MpdCaptionContainerType)[keyof typeof MpdCaptionContainerType];
export declare const MpdKlvMetadata: {
  readonly NONE: "NONE";
  readonly PASSTHROUGH: "PASSTHROUGH";
};
export type MpdKlvMetadata =
  (typeof MpdKlvMetadata)[keyof typeof MpdKlvMetadata];
export declare const MpdManifestMetadataSignaling: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type MpdManifestMetadataSignaling =
  (typeof MpdManifestMetadataSignaling)[keyof typeof MpdManifestMetadataSignaling];
export declare const MpdScte35Esam: {
  readonly INSERT: "INSERT";
  readonly NONE: "NONE";
};
export type MpdScte35Esam = (typeof MpdScte35Esam)[keyof typeof MpdScte35Esam];
export declare const MpdScte35Source: {
  readonly NONE: "NONE";
  readonly PASSTHROUGH: "PASSTHROUGH";
};
export type MpdScte35Source =
  (typeof MpdScte35Source)[keyof typeof MpdScte35Source];
export declare const MpdTimedMetadata: {
  readonly NONE: "NONE";
  readonly PASSTHROUGH: "PASSTHROUGH";
};
export type MpdTimedMetadata =
  (typeof MpdTimedMetadata)[keyof typeof MpdTimedMetadata];
export declare const MpdTimedMetadataBoxVersion: {
  readonly VERSION_0: "VERSION_0";
  readonly VERSION_1: "VERSION_1";
};
export type MpdTimedMetadataBoxVersion =
  (typeof MpdTimedMetadataBoxVersion)[keyof typeof MpdTimedMetadataBoxVersion];
export interface MpdSettings {
  AccessibilityCaptionHints?: MpdAccessibilityCaptionHints | undefined;
  AudioDuration?: MpdAudioDuration | undefined;
  CaptionContainerType?: MpdCaptionContainerType | undefined;
  KlvMetadata?: MpdKlvMetadata | undefined;
  ManifestMetadataSignaling?: MpdManifestMetadataSignaling | undefined;
  Scte35Esam?: MpdScte35Esam | undefined;
  Scte35Source?: MpdScte35Source | undefined;
  TimedMetadata?: MpdTimedMetadata | undefined;
  TimedMetadataBoxVersion?: MpdTimedMetadataBoxVersion | undefined;
  TimedMetadataSchemeIdUri?: string | undefined;
  TimedMetadataValue?: string | undefined;
}
export declare const MxfAfdSignaling: {
  readonly COPY_FROM_VIDEO: "COPY_FROM_VIDEO";
  readonly NO_COPY: "NO_COPY";
};
export type MxfAfdSignaling =
  (typeof MxfAfdSignaling)[keyof typeof MxfAfdSignaling];
export declare const MxfProfile: {
  readonly D_10: "D_10";
  readonly OP1A: "OP1A";
  readonly XAVC: "XAVC";
  readonly XDCAM: "XDCAM";
  readonly XDCAM_RDD9: "XDCAM_RDD9";
};
export type MxfProfile = (typeof MxfProfile)[keyof typeof MxfProfile];
export declare const MxfXavcDurationMode: {
  readonly ALLOW_ANY_DURATION: "ALLOW_ANY_DURATION";
  readonly DROP_FRAMES_FOR_COMPLIANCE: "DROP_FRAMES_FOR_COMPLIANCE";
};
export type MxfXavcDurationMode =
  (typeof MxfXavcDurationMode)[keyof typeof MxfXavcDurationMode];
export interface MxfXavcProfileSettings {
  DurationMode?: MxfXavcDurationMode | undefined;
  MaxAncDataSize?: number | undefined;
}
export interface MxfSettings {
  AfdSignaling?: MxfAfdSignaling | undefined;
  Profile?: MxfProfile | undefined;
  XavcProfileSettings?: MxfXavcProfileSettings | undefined;
}
export interface ContainerSettings {
  CmfcSettings?: CmfcSettings | undefined;
  Container?: ContainerType | undefined;
  F4vSettings?: F4vSettings | undefined;
  M2tsSettings?: M2tsSettings | undefined;
  M3u8Settings?: M3u8Settings | undefined;
  MovSettings?: MovSettings | undefined;
  Mp4Settings?: Mp4Settings | undefined;
  MpdSettings?: MpdSettings | undefined;
  MxfSettings?: MxfSettings | undefined;
}
export declare const HlsAudioOnlyContainer: {
  readonly AUTOMATIC: "AUTOMATIC";
  readonly M2TS: "M2TS";
};
export type HlsAudioOnlyContainer =
  (typeof HlsAudioOnlyContainer)[keyof typeof HlsAudioOnlyContainer];
export declare const HlsAudioTrackType: {
  readonly ALTERNATE_AUDIO_AUTO_SELECT: "ALTERNATE_AUDIO_AUTO_SELECT";
  readonly ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT: "ALTERNATE_AUDIO_AUTO_SELECT_DEFAULT";
  readonly ALTERNATE_AUDIO_NOT_AUTO_SELECT: "ALTERNATE_AUDIO_NOT_AUTO_SELECT";
  readonly AUDIO_ONLY_VARIANT_STREAM: "AUDIO_ONLY_VARIANT_STREAM";
};
export type HlsAudioTrackType =
  (typeof HlsAudioTrackType)[keyof typeof HlsAudioTrackType];
export declare const HlsDescriptiveVideoServiceFlag: {
  readonly DONT_FLAG: "DONT_FLAG";
  readonly FLAG: "FLAG";
};
export type HlsDescriptiveVideoServiceFlag =
  (typeof HlsDescriptiveVideoServiceFlag)[keyof typeof HlsDescriptiveVideoServiceFlag];
export declare const HlsIFrameOnlyManifest: {
  readonly EXCLUDE: "EXCLUDE";
  readonly INCLUDE: "INCLUDE";
};
export type HlsIFrameOnlyManifest =
  (typeof HlsIFrameOnlyManifest)[keyof typeof HlsIFrameOnlyManifest];
export interface HlsSettings {
  AudioGroupId?: string | undefined;
  AudioOnlyContainer?: HlsAudioOnlyContainer | undefined;
  AudioRenditionSets?: string | undefined;
  AudioTrackType?: HlsAudioTrackType | undefined;
  DescriptiveVideoServiceFlag?: HlsDescriptiveVideoServiceFlag | undefined;
  IFrameOnlyManifest?: HlsIFrameOnlyManifest | undefined;
  SegmentModifier?: string | undefined;
}
export interface OutputSettings {
  HlsSettings?: HlsSettings | undefined;
}
export declare const AfdSignaling: {
  readonly AUTO: "AUTO";
  readonly FIXED: "FIXED";
  readonly NONE: "NONE";
};
export type AfdSignaling = (typeof AfdSignaling)[keyof typeof AfdSignaling];
export declare const AntiAlias: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type AntiAlias = (typeof AntiAlias)[keyof typeof AntiAlias];
export declare const ChromaPositionMode: {
  readonly AUTO: "AUTO";
  readonly FORCE_CENTER: "FORCE_CENTER";
  readonly FORCE_TOP_LEFT: "FORCE_TOP_LEFT";
};
export type ChromaPositionMode =
  (typeof ChromaPositionMode)[keyof typeof ChromaPositionMode];
export declare const Av1AdaptiveQuantization: {
  readonly HIGH: "HIGH";
  readonly HIGHER: "HIGHER";
  readonly LOW: "LOW";
  readonly MAX: "MAX";
  readonly MEDIUM: "MEDIUM";
  readonly OFF: "OFF";
};
export type Av1AdaptiveQuantization =
  (typeof Av1AdaptiveQuantization)[keyof typeof Av1AdaptiveQuantization];
export declare const Av1BitDepth: {
  readonly BIT_10: "BIT_10";
  readonly BIT_8: "BIT_8";
};
export type Av1BitDepth = (typeof Av1BitDepth)[keyof typeof Av1BitDepth];
export declare const Av1FilmGrainSynthesis: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type Av1FilmGrainSynthesis =
  (typeof Av1FilmGrainSynthesis)[keyof typeof Av1FilmGrainSynthesis];
export declare const Av1FramerateControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type Av1FramerateControl =
  (typeof Av1FramerateControl)[keyof typeof Av1FramerateControl];
export declare const Av1FramerateConversionAlgorithm: {
  readonly DUPLICATE_DROP: "DUPLICATE_DROP";
  readonly FRAMEFORMER: "FRAMEFORMER";
  readonly INTERPOLATE: "INTERPOLATE";
  readonly MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT";
};
export type Av1FramerateConversionAlgorithm =
  (typeof Av1FramerateConversionAlgorithm)[keyof typeof Av1FramerateConversionAlgorithm];
export interface Av1QvbrSettings {
  QvbrQualityLevel?: number | undefined;
  QvbrQualityLevelFineTune?: number | undefined;
}
export declare const Av1RateControlMode: {
  readonly QVBR: "QVBR";
};
export type Av1RateControlMode =
  (typeof Av1RateControlMode)[keyof typeof Av1RateControlMode];
export declare const Av1SpatialAdaptiveQuantization: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type Av1SpatialAdaptiveQuantization =
  (typeof Av1SpatialAdaptiveQuantization)[keyof typeof Av1SpatialAdaptiveQuantization];
export interface Av1Settings {
  AdaptiveQuantization?: Av1AdaptiveQuantization | undefined;
  BitDepth?: Av1BitDepth | undefined;
  FilmGrainSynthesis?: Av1FilmGrainSynthesis | undefined;
  FramerateControl?: Av1FramerateControl | undefined;
  FramerateConversionAlgorithm?: Av1FramerateConversionAlgorithm | undefined;
  FramerateDenominator?: number | undefined;
  FramerateNumerator?: number | undefined;
  GopSize?: number | undefined;
  MaxBitrate?: number | undefined;
  NumberBFramesBetweenReferenceFrames?: number | undefined;
  PerFrameMetrics?: FrameMetricType[] | undefined;
  QvbrSettings?: Av1QvbrSettings | undefined;
  RateControlMode?: Av1RateControlMode | undefined;
  Slices?: number | undefined;
  SpatialAdaptiveQuantization?: Av1SpatialAdaptiveQuantization | undefined;
}
export declare const AvcIntraClass: {
  readonly CLASS_100: "CLASS_100";
  readonly CLASS_200: "CLASS_200";
  readonly CLASS_4K_2K: "CLASS_4K_2K";
  readonly CLASS_50: "CLASS_50";
};
export type AvcIntraClass = (typeof AvcIntraClass)[keyof typeof AvcIntraClass];
export declare const AvcIntraUhdQualityTuningLevel: {
  readonly MULTI_PASS: "MULTI_PASS";
  readonly SINGLE_PASS: "SINGLE_PASS";
};
export type AvcIntraUhdQualityTuningLevel =
  (typeof AvcIntraUhdQualityTuningLevel)[keyof typeof AvcIntraUhdQualityTuningLevel];
export interface AvcIntraUhdSettings {
  QualityTuningLevel?: AvcIntraUhdQualityTuningLevel | undefined;
}
export declare const AvcIntraFramerateControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type AvcIntraFramerateControl =
  (typeof AvcIntraFramerateControl)[keyof typeof AvcIntraFramerateControl];
export declare const AvcIntraFramerateConversionAlgorithm: {
  readonly DUPLICATE_DROP: "DUPLICATE_DROP";
  readonly FRAMEFORMER: "FRAMEFORMER";
  readonly INTERPOLATE: "INTERPOLATE";
  readonly MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT";
};
export type AvcIntraFramerateConversionAlgorithm =
  (typeof AvcIntraFramerateConversionAlgorithm)[keyof typeof AvcIntraFramerateConversionAlgorithm];
export declare const AvcIntraInterlaceMode: {
  readonly BOTTOM_FIELD: "BOTTOM_FIELD";
  readonly FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD";
  readonly FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD";
  readonly PROGRESSIVE: "PROGRESSIVE";
  readonly TOP_FIELD: "TOP_FIELD";
};
export type AvcIntraInterlaceMode =
  (typeof AvcIntraInterlaceMode)[keyof typeof AvcIntraInterlaceMode];
export declare const AvcIntraScanTypeConversionMode: {
  readonly INTERLACED: "INTERLACED";
  readonly INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE";
};
export type AvcIntraScanTypeConversionMode =
  (typeof AvcIntraScanTypeConversionMode)[keyof typeof AvcIntraScanTypeConversionMode];
export declare const AvcIntraSlowPal: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type AvcIntraSlowPal =
  (typeof AvcIntraSlowPal)[keyof typeof AvcIntraSlowPal];
export declare const AvcIntraTelecine: {
  readonly HARD: "HARD";
  readonly NONE: "NONE";
};
export type AvcIntraTelecine =
  (typeof AvcIntraTelecine)[keyof typeof AvcIntraTelecine];
export interface AvcIntraSettings {
  AvcIntraClass?: AvcIntraClass | undefined;
  AvcIntraUhdSettings?: AvcIntraUhdSettings | undefined;
  FramerateControl?: AvcIntraFramerateControl | undefined;
  FramerateConversionAlgorithm?:
    | AvcIntraFramerateConversionAlgorithm
    | undefined;
  FramerateDenominator?: number | undefined;
  FramerateNumerator?: number | undefined;
  InterlaceMode?: AvcIntraInterlaceMode | undefined;
  PerFrameMetrics?: FrameMetricType[] | undefined;
  ScanTypeConversionMode?: AvcIntraScanTypeConversionMode | undefined;
  SlowPal?: AvcIntraSlowPal | undefined;
  Telecine?: AvcIntraTelecine | undefined;
}
export declare const VideoCodec: {
  readonly AV1: "AV1";
  readonly AVC_INTRA: "AVC_INTRA";
  readonly FRAME_CAPTURE: "FRAME_CAPTURE";
  readonly GIF: "GIF";
  readonly H_264: "H_264";
  readonly H_265: "H_265";
  readonly MPEG2: "MPEG2";
  readonly PASSTHROUGH: "PASSTHROUGH";
  readonly PRORES: "PRORES";
  readonly UNCOMPRESSED: "UNCOMPRESSED";
  readonly VC3: "VC3";
  readonly VP8: "VP8";
  readonly VP9: "VP9";
  readonly XAVC: "XAVC";
};
export type VideoCodec = (typeof VideoCodec)[keyof typeof VideoCodec];
export interface FrameCaptureSettings {
  FramerateDenominator?: number | undefined;
  FramerateNumerator?: number | undefined;
  MaxCaptures?: number | undefined;
  Quality?: number | undefined;
}
export declare const GifFramerateControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type GifFramerateControl =
  (typeof GifFramerateControl)[keyof typeof GifFramerateControl];
export declare const GifFramerateConversionAlgorithm: {
  readonly DUPLICATE_DROP: "DUPLICATE_DROP";
  readonly INTERPOLATE: "INTERPOLATE";
};
export type GifFramerateConversionAlgorithm =
  (typeof GifFramerateConversionAlgorithm)[keyof typeof GifFramerateConversionAlgorithm];
export interface GifSettings {
  FramerateControl?: GifFramerateControl | undefined;
  FramerateConversionAlgorithm?: GifFramerateConversionAlgorithm | undefined;
  FramerateDenominator?: number | undefined;
  FramerateNumerator?: number | undefined;
}
export declare const H264AdaptiveQuantization: {
  readonly AUTO: "AUTO";
  readonly HIGH: "HIGH";
  readonly HIGHER: "HIGHER";
  readonly LOW: "LOW";
  readonly MAX: "MAX";
  readonly MEDIUM: "MEDIUM";
  readonly OFF: "OFF";
};
export type H264AdaptiveQuantization =
  (typeof H264AdaptiveQuantization)[keyof typeof H264AdaptiveQuantization];
export declare const BandwidthReductionFilterSharpening: {
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
  readonly OFF: "OFF";
};
export type BandwidthReductionFilterSharpening =
  (typeof BandwidthReductionFilterSharpening)[keyof typeof BandwidthReductionFilterSharpening];
export declare const BandwidthReductionFilterStrength: {
  readonly AUTO: "AUTO";
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
  readonly OFF: "OFF";
};
export type BandwidthReductionFilterStrength =
  (typeof BandwidthReductionFilterStrength)[keyof typeof BandwidthReductionFilterStrength];
export interface BandwidthReductionFilter {
  Sharpening?: BandwidthReductionFilterSharpening | undefined;
  Strength?: BandwidthReductionFilterStrength | undefined;
}
export declare const H264CodecLevel: {
  readonly AUTO: "AUTO";
  readonly LEVEL_1: "LEVEL_1";
  readonly LEVEL_1_1: "LEVEL_1_1";
  readonly LEVEL_1_2: "LEVEL_1_2";
  readonly LEVEL_1_3: "LEVEL_1_3";
  readonly LEVEL_2: "LEVEL_2";
  readonly LEVEL_2_1: "LEVEL_2_1";
  readonly LEVEL_2_2: "LEVEL_2_2";
  readonly LEVEL_3: "LEVEL_3";
  readonly LEVEL_3_1: "LEVEL_3_1";
  readonly LEVEL_3_2: "LEVEL_3_2";
  readonly LEVEL_4: "LEVEL_4";
  readonly LEVEL_4_1: "LEVEL_4_1";
  readonly LEVEL_4_2: "LEVEL_4_2";
  readonly LEVEL_5: "LEVEL_5";
  readonly LEVEL_5_1: "LEVEL_5_1";
  readonly LEVEL_5_2: "LEVEL_5_2";
};
export type H264CodecLevel =
  (typeof H264CodecLevel)[keyof typeof H264CodecLevel];
export declare const H264CodecProfile: {
  readonly BASELINE: "BASELINE";
  readonly HIGH: "HIGH";
  readonly HIGH_10BIT: "HIGH_10BIT";
  readonly HIGH_422: "HIGH_422";
  readonly HIGH_422_10BIT: "HIGH_422_10BIT";
  readonly MAIN: "MAIN";
};
export type H264CodecProfile =
  (typeof H264CodecProfile)[keyof typeof H264CodecProfile];
export declare const H264DynamicSubGop: {
  readonly ADAPTIVE: "ADAPTIVE";
  readonly STATIC: "STATIC";
};
export type H264DynamicSubGop =
  (typeof H264DynamicSubGop)[keyof typeof H264DynamicSubGop];
export declare const H264EndOfStreamMarkers: {
  readonly INCLUDE: "INCLUDE";
  readonly SUPPRESS: "SUPPRESS";
};
export type H264EndOfStreamMarkers =
  (typeof H264EndOfStreamMarkers)[keyof typeof H264EndOfStreamMarkers];
export declare const H264EntropyEncoding: {
  readonly CABAC: "CABAC";
  readonly CAVLC: "CAVLC";
};
export type H264EntropyEncoding =
  (typeof H264EntropyEncoding)[keyof typeof H264EntropyEncoding];
export declare const H264FieldEncoding: {
  readonly FORCE_FIELD: "FORCE_FIELD";
  readonly MBAFF: "MBAFF";
  readonly PAFF: "PAFF";
};
export type H264FieldEncoding =
  (typeof H264FieldEncoding)[keyof typeof H264FieldEncoding];
export declare const H264FlickerAdaptiveQuantization: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H264FlickerAdaptiveQuantization =
  (typeof H264FlickerAdaptiveQuantization)[keyof typeof H264FlickerAdaptiveQuantization];
export declare const H264FramerateControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type H264FramerateControl =
  (typeof H264FramerateControl)[keyof typeof H264FramerateControl];
export declare const H264FramerateConversionAlgorithm: {
  readonly DUPLICATE_DROP: "DUPLICATE_DROP";
  readonly FRAMEFORMER: "FRAMEFORMER";
  readonly INTERPOLATE: "INTERPOLATE";
  readonly MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT";
};
export type H264FramerateConversionAlgorithm =
  (typeof H264FramerateConversionAlgorithm)[keyof typeof H264FramerateConversionAlgorithm];
export declare const H264GopBReference: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H264GopBReference =
  (typeof H264GopBReference)[keyof typeof H264GopBReference];
export declare const H264GopSizeUnits: {
  readonly AUTO: "AUTO";
  readonly FRAMES: "FRAMES";
  readonly SECONDS: "SECONDS";
};
export type H264GopSizeUnits =
  (typeof H264GopSizeUnits)[keyof typeof H264GopSizeUnits];
export declare const H264InterlaceMode: {
  readonly BOTTOM_FIELD: "BOTTOM_FIELD";
  readonly FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD";
  readonly FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD";
  readonly PROGRESSIVE: "PROGRESSIVE";
  readonly TOP_FIELD: "TOP_FIELD";
};
export type H264InterlaceMode =
  (typeof H264InterlaceMode)[keyof typeof H264InterlaceMode];
export declare const H264ParControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type H264ParControl =
  (typeof H264ParControl)[keyof typeof H264ParControl];
export declare const H264QualityTuningLevel: {
  readonly MULTI_PASS_HQ: "MULTI_PASS_HQ";
  readonly SINGLE_PASS: "SINGLE_PASS";
  readonly SINGLE_PASS_HQ: "SINGLE_PASS_HQ";
};
export type H264QualityTuningLevel =
  (typeof H264QualityTuningLevel)[keyof typeof H264QualityTuningLevel];
export interface H264QvbrSettings {
  MaxAverageBitrate?: number | undefined;
  QvbrQualityLevel?: number | undefined;
  QvbrQualityLevelFineTune?: number | undefined;
}
export declare const H264RateControlMode: {
  readonly CBR: "CBR";
  readonly QVBR: "QVBR";
  readonly VBR: "VBR";
};
export type H264RateControlMode =
  (typeof H264RateControlMode)[keyof typeof H264RateControlMode];
export declare const H264RepeatPps: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H264RepeatPps = (typeof H264RepeatPps)[keyof typeof H264RepeatPps];
export declare const H264SaliencyAwareEncoding: {
  readonly DISABLED: "DISABLED";
  readonly PREFERRED: "PREFERRED";
};
export type H264SaliencyAwareEncoding =
  (typeof H264SaliencyAwareEncoding)[keyof typeof H264SaliencyAwareEncoding];
export declare const H264ScanTypeConversionMode: {
  readonly INTERLACED: "INTERLACED";
  readonly INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE";
};
export type H264ScanTypeConversionMode =
  (typeof H264ScanTypeConversionMode)[keyof typeof H264ScanTypeConversionMode];
export declare const H264SceneChangeDetect: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
  readonly TRANSITION_DETECTION: "TRANSITION_DETECTION";
};
export type H264SceneChangeDetect =
  (typeof H264SceneChangeDetect)[keyof typeof H264SceneChangeDetect];
export declare const H264SlowPal: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H264SlowPal = (typeof H264SlowPal)[keyof typeof H264SlowPal];
export declare const H264SpatialAdaptiveQuantization: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H264SpatialAdaptiveQuantization =
  (typeof H264SpatialAdaptiveQuantization)[keyof typeof H264SpatialAdaptiveQuantization];
export declare const H264Syntax: {
  readonly DEFAULT: "DEFAULT";
  readonly RP2027: "RP2027";
};
export type H264Syntax = (typeof H264Syntax)[keyof typeof H264Syntax];
export declare const H264Telecine: {
  readonly HARD: "HARD";
  readonly NONE: "NONE";
  readonly SOFT: "SOFT";
};
export type H264Telecine = (typeof H264Telecine)[keyof typeof H264Telecine];
export declare const H264TemporalAdaptiveQuantization: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H264TemporalAdaptiveQuantization =
  (typeof H264TemporalAdaptiveQuantization)[keyof typeof H264TemporalAdaptiveQuantization];
export declare const H264UnregisteredSeiTimecode: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H264UnregisteredSeiTimecode =
  (typeof H264UnregisteredSeiTimecode)[keyof typeof H264UnregisteredSeiTimecode];
export declare const H264WriteMp4PackagingType: {
  readonly AVC1: "AVC1";
  readonly AVC3: "AVC3";
};
export type H264WriteMp4PackagingType =
  (typeof H264WriteMp4PackagingType)[keyof typeof H264WriteMp4PackagingType];
export interface H264Settings {
  AdaptiveQuantization?: H264AdaptiveQuantization | undefined;
  BandwidthReductionFilter?: BandwidthReductionFilter | undefined;
  Bitrate?: number | undefined;
  CodecLevel?: H264CodecLevel | undefined;
  CodecProfile?: H264CodecProfile | undefined;
  DynamicSubGop?: H264DynamicSubGop | undefined;
  EndOfStreamMarkers?: H264EndOfStreamMarkers | undefined;
  EntropyEncoding?: H264EntropyEncoding | undefined;
  FieldEncoding?: H264FieldEncoding | undefined;
  FlickerAdaptiveQuantization?: H264FlickerAdaptiveQuantization | undefined;
  FramerateControl?: H264FramerateControl | undefined;
  FramerateConversionAlgorithm?: H264FramerateConversionAlgorithm | undefined;
  FramerateDenominator?: number | undefined;
  FramerateNumerator?: number | undefined;
  GopBReference?: H264GopBReference | undefined;
  GopClosedCadence?: number | undefined;
  GopSize?: number | undefined;
  GopSizeUnits?: H264GopSizeUnits | undefined;
  HrdBufferFinalFillPercentage?: number | undefined;
  HrdBufferInitialFillPercentage?: number | undefined;
  HrdBufferSize?: number | undefined;
  InterlaceMode?: H264InterlaceMode | undefined;
  MaxBitrate?: number | undefined;
  MinIInterval?: number | undefined;
  NumberBFramesBetweenReferenceFrames?: number | undefined;
  NumberReferenceFrames?: number | undefined;
  ParControl?: H264ParControl | undefined;
  ParDenominator?: number | undefined;
  ParNumerator?: number | undefined;
  PerFrameMetrics?: FrameMetricType[] | undefined;
  QualityTuningLevel?: H264QualityTuningLevel | undefined;
  QvbrSettings?: H264QvbrSettings | undefined;
  RateControlMode?: H264RateControlMode | undefined;
  RepeatPps?: H264RepeatPps | undefined;
  SaliencyAwareEncoding?: H264SaliencyAwareEncoding | undefined;
  ScanTypeConversionMode?: H264ScanTypeConversionMode | undefined;
  SceneChangeDetect?: H264SceneChangeDetect | undefined;
  Slices?: number | undefined;
  SlowPal?: H264SlowPal | undefined;
  Softness?: number | undefined;
  SpatialAdaptiveQuantization?: H264SpatialAdaptiveQuantization | undefined;
  Syntax?: H264Syntax | undefined;
  Telecine?: H264Telecine | undefined;
  TemporalAdaptiveQuantization?: H264TemporalAdaptiveQuantization | undefined;
  UnregisteredSeiTimecode?: H264UnregisteredSeiTimecode | undefined;
  WriteMp4PackagingType?: H264WriteMp4PackagingType | undefined;
}
export declare const H265AdaptiveQuantization: {
  readonly AUTO: "AUTO";
  readonly HIGH: "HIGH";
  readonly HIGHER: "HIGHER";
  readonly LOW: "LOW";
  readonly MAX: "MAX";
  readonly MEDIUM: "MEDIUM";
  readonly OFF: "OFF";
};
export type H265AdaptiveQuantization =
  (typeof H265AdaptiveQuantization)[keyof typeof H265AdaptiveQuantization];
export declare const H265AlternateTransferFunctionSei: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H265AlternateTransferFunctionSei =
  (typeof H265AlternateTransferFunctionSei)[keyof typeof H265AlternateTransferFunctionSei];
export declare const H265CodecLevel: {
  readonly AUTO: "AUTO";
  readonly LEVEL_1: "LEVEL_1";
  readonly LEVEL_2: "LEVEL_2";
  readonly LEVEL_2_1: "LEVEL_2_1";
  readonly LEVEL_3: "LEVEL_3";
  readonly LEVEL_3_1: "LEVEL_3_1";
  readonly LEVEL_4: "LEVEL_4";
  readonly LEVEL_4_1: "LEVEL_4_1";
  readonly LEVEL_5: "LEVEL_5";
  readonly LEVEL_5_1: "LEVEL_5_1";
  readonly LEVEL_5_2: "LEVEL_5_2";
  readonly LEVEL_6: "LEVEL_6";
  readonly LEVEL_6_1: "LEVEL_6_1";
  readonly LEVEL_6_2: "LEVEL_6_2";
};
export type H265CodecLevel =
  (typeof H265CodecLevel)[keyof typeof H265CodecLevel];
export declare const H265CodecProfile: {
  readonly MAIN10_HIGH: "MAIN10_HIGH";
  readonly MAIN10_MAIN: "MAIN10_MAIN";
  readonly MAIN_422_10BIT_HIGH: "MAIN_422_10BIT_HIGH";
  readonly MAIN_422_10BIT_MAIN: "MAIN_422_10BIT_MAIN";
  readonly MAIN_422_8BIT_HIGH: "MAIN_422_8BIT_HIGH";
  readonly MAIN_422_8BIT_MAIN: "MAIN_422_8BIT_MAIN";
  readonly MAIN_HIGH: "MAIN_HIGH";
  readonly MAIN_MAIN: "MAIN_MAIN";
};
export type H265CodecProfile =
  (typeof H265CodecProfile)[keyof typeof H265CodecProfile];
export declare const H265Deblocking: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H265Deblocking =
  (typeof H265Deblocking)[keyof typeof H265Deblocking];
export declare const H265DynamicSubGop: {
  readonly ADAPTIVE: "ADAPTIVE";
  readonly STATIC: "STATIC";
};
export type H265DynamicSubGop =
  (typeof H265DynamicSubGop)[keyof typeof H265DynamicSubGop];
export declare const H265EndOfStreamMarkers: {
  readonly INCLUDE: "INCLUDE";
  readonly SUPPRESS: "SUPPRESS";
};
export type H265EndOfStreamMarkers =
  (typeof H265EndOfStreamMarkers)[keyof typeof H265EndOfStreamMarkers];
export declare const H265FlickerAdaptiveQuantization: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H265FlickerAdaptiveQuantization =
  (typeof H265FlickerAdaptiveQuantization)[keyof typeof H265FlickerAdaptiveQuantization];
export declare const H265FramerateControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type H265FramerateControl =
  (typeof H265FramerateControl)[keyof typeof H265FramerateControl];
export declare const H265FramerateConversionAlgorithm: {
  readonly DUPLICATE_DROP: "DUPLICATE_DROP";
  readonly FRAMEFORMER: "FRAMEFORMER";
  readonly INTERPOLATE: "INTERPOLATE";
  readonly MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT";
};
export type H265FramerateConversionAlgorithm =
  (typeof H265FramerateConversionAlgorithm)[keyof typeof H265FramerateConversionAlgorithm];
export declare const H265GopBReference: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H265GopBReference =
  (typeof H265GopBReference)[keyof typeof H265GopBReference];
export declare const H265GopSizeUnits: {
  readonly AUTO: "AUTO";
  readonly FRAMES: "FRAMES";
  readonly SECONDS: "SECONDS";
};
export type H265GopSizeUnits =
  (typeof H265GopSizeUnits)[keyof typeof H265GopSizeUnits];
export declare const H265InterlaceMode: {
  readonly BOTTOM_FIELD: "BOTTOM_FIELD";
  readonly FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD";
  readonly FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD";
  readonly PROGRESSIVE: "PROGRESSIVE";
  readonly TOP_FIELD: "TOP_FIELD";
};
export type H265InterlaceMode =
  (typeof H265InterlaceMode)[keyof typeof H265InterlaceMode];
export declare const H265ParControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type H265ParControl =
  (typeof H265ParControl)[keyof typeof H265ParControl];
export declare const H265QualityTuningLevel: {
  readonly MULTI_PASS_HQ: "MULTI_PASS_HQ";
  readonly SINGLE_PASS: "SINGLE_PASS";
  readonly SINGLE_PASS_HQ: "SINGLE_PASS_HQ";
};
export type H265QualityTuningLevel =
  (typeof H265QualityTuningLevel)[keyof typeof H265QualityTuningLevel];
export interface H265QvbrSettings {
  MaxAverageBitrate?: number | undefined;
  QvbrQualityLevel?: number | undefined;
  QvbrQualityLevelFineTune?: number | undefined;
}
export declare const H265RateControlMode: {
  readonly CBR: "CBR";
  readonly QVBR: "QVBR";
  readonly VBR: "VBR";
};
export type H265RateControlMode =
  (typeof H265RateControlMode)[keyof typeof H265RateControlMode];
export declare const H265SampleAdaptiveOffsetFilterMode: {
  readonly ADAPTIVE: "ADAPTIVE";
  readonly DEFAULT: "DEFAULT";
  readonly OFF: "OFF";
};
export type H265SampleAdaptiveOffsetFilterMode =
  (typeof H265SampleAdaptiveOffsetFilterMode)[keyof typeof H265SampleAdaptiveOffsetFilterMode];
export declare const H265ScanTypeConversionMode: {
  readonly INTERLACED: "INTERLACED";
  readonly INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE";
};
export type H265ScanTypeConversionMode =
  (typeof H265ScanTypeConversionMode)[keyof typeof H265ScanTypeConversionMode];
export declare const H265SceneChangeDetect: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
  readonly TRANSITION_DETECTION: "TRANSITION_DETECTION";
};
export type H265SceneChangeDetect =
  (typeof H265SceneChangeDetect)[keyof typeof H265SceneChangeDetect];
export declare const H265SlowPal: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H265SlowPal = (typeof H265SlowPal)[keyof typeof H265SlowPal];
export declare const H265SpatialAdaptiveQuantization: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H265SpatialAdaptiveQuantization =
  (typeof H265SpatialAdaptiveQuantization)[keyof typeof H265SpatialAdaptiveQuantization];
export declare const H265Telecine: {
  readonly HARD: "HARD";
  readonly NONE: "NONE";
  readonly SOFT: "SOFT";
};
export type H265Telecine = (typeof H265Telecine)[keyof typeof H265Telecine];
export declare const H265TemporalAdaptiveQuantization: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H265TemporalAdaptiveQuantization =
  (typeof H265TemporalAdaptiveQuantization)[keyof typeof H265TemporalAdaptiveQuantization];
export declare const H265TemporalIds: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H265TemporalIds =
  (typeof H265TemporalIds)[keyof typeof H265TemporalIds];
export declare const H265Tiles: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H265Tiles = (typeof H265Tiles)[keyof typeof H265Tiles];
export declare const H265UnregisteredSeiTimecode: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type H265UnregisteredSeiTimecode =
  (typeof H265UnregisteredSeiTimecode)[keyof typeof H265UnregisteredSeiTimecode];
export declare const H265WriteMp4PackagingType: {
  readonly HEV1: "HEV1";
  readonly HVC1: "HVC1";
};
export type H265WriteMp4PackagingType =
  (typeof H265WriteMp4PackagingType)[keyof typeof H265WriteMp4PackagingType];
export interface H265Settings {
  AdaptiveQuantization?: H265AdaptiveQuantization | undefined;
  AlternateTransferFunctionSei?: H265AlternateTransferFunctionSei | undefined;
  BandwidthReductionFilter?: BandwidthReductionFilter | undefined;
  Bitrate?: number | undefined;
  CodecLevel?: H265CodecLevel | undefined;
  CodecProfile?: H265CodecProfile | undefined;
  Deblocking?: H265Deblocking | undefined;
  DynamicSubGop?: H265DynamicSubGop | undefined;
  EndOfStreamMarkers?: H265EndOfStreamMarkers | undefined;
  FlickerAdaptiveQuantization?: H265FlickerAdaptiveQuantization | undefined;
  FramerateControl?: H265FramerateControl | undefined;
  FramerateConversionAlgorithm?: H265FramerateConversionAlgorithm | undefined;
  FramerateDenominator?: number | undefined;
  FramerateNumerator?: number | undefined;
  GopBReference?: H265GopBReference | undefined;
  GopClosedCadence?: number | undefined;
  GopSize?: number | undefined;
  GopSizeUnits?: H265GopSizeUnits | undefined;
  HrdBufferFinalFillPercentage?: number | undefined;
  HrdBufferInitialFillPercentage?: number | undefined;
  HrdBufferSize?: number | undefined;
  InterlaceMode?: H265InterlaceMode | undefined;
  MaxBitrate?: number | undefined;
  MinIInterval?: number | undefined;
  NumberBFramesBetweenReferenceFrames?: number | undefined;
  NumberReferenceFrames?: number | undefined;
  ParControl?: H265ParControl | undefined;
  ParDenominator?: number | undefined;
  ParNumerator?: number | undefined;
  PerFrameMetrics?: FrameMetricType[] | undefined;
  QualityTuningLevel?: H265QualityTuningLevel | undefined;
  QvbrSettings?: H265QvbrSettings | undefined;
  RateControlMode?: H265RateControlMode | undefined;
  SampleAdaptiveOffsetFilterMode?:
    | H265SampleAdaptiveOffsetFilterMode
    | undefined;
  ScanTypeConversionMode?: H265ScanTypeConversionMode | undefined;
  SceneChangeDetect?: H265SceneChangeDetect | undefined;
  Slices?: number | undefined;
  SlowPal?: H265SlowPal | undefined;
  SpatialAdaptiveQuantization?: H265SpatialAdaptiveQuantization | undefined;
  Telecine?: H265Telecine | undefined;
  TemporalAdaptiveQuantization?: H265TemporalAdaptiveQuantization | undefined;
  TemporalIds?: H265TemporalIds | undefined;
  Tiles?: H265Tiles | undefined;
  UnregisteredSeiTimecode?: H265UnregisteredSeiTimecode | undefined;
  WriteMp4PackagingType?: H265WriteMp4PackagingType | undefined;
}
export declare const Mpeg2AdaptiveQuantization: {
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
  readonly OFF: "OFF";
};
export type Mpeg2AdaptiveQuantization =
  (typeof Mpeg2AdaptiveQuantization)[keyof typeof Mpeg2AdaptiveQuantization];
export declare const Mpeg2CodecLevel: {
  readonly AUTO: "AUTO";
  readonly HIGH: "HIGH";
  readonly HIGH1440: "HIGH1440";
  readonly LOW: "LOW";
  readonly MAIN: "MAIN";
};
export type Mpeg2CodecLevel =
  (typeof Mpeg2CodecLevel)[keyof typeof Mpeg2CodecLevel];
export declare const Mpeg2CodecProfile: {
  readonly MAIN: "MAIN";
  readonly PROFILE_422: "PROFILE_422";
};
export type Mpeg2CodecProfile =
  (typeof Mpeg2CodecProfile)[keyof typeof Mpeg2CodecProfile];
export declare const Mpeg2DynamicSubGop: {
  readonly ADAPTIVE: "ADAPTIVE";
  readonly STATIC: "STATIC";
};
export type Mpeg2DynamicSubGop =
  (typeof Mpeg2DynamicSubGop)[keyof typeof Mpeg2DynamicSubGop];
export declare const Mpeg2FramerateControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type Mpeg2FramerateControl =
  (typeof Mpeg2FramerateControl)[keyof typeof Mpeg2FramerateControl];
export declare const Mpeg2FramerateConversionAlgorithm: {
  readonly DUPLICATE_DROP: "DUPLICATE_DROP";
  readonly FRAMEFORMER: "FRAMEFORMER";
  readonly INTERPOLATE: "INTERPOLATE";
  readonly MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT";
};
export type Mpeg2FramerateConversionAlgorithm =
  (typeof Mpeg2FramerateConversionAlgorithm)[keyof typeof Mpeg2FramerateConversionAlgorithm];
export declare const Mpeg2GopSizeUnits: {
  readonly FRAMES: "FRAMES";
  readonly SECONDS: "SECONDS";
};
export type Mpeg2GopSizeUnits =
  (typeof Mpeg2GopSizeUnits)[keyof typeof Mpeg2GopSizeUnits];
export declare const Mpeg2InterlaceMode: {
  readonly BOTTOM_FIELD: "BOTTOM_FIELD";
  readonly FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD";
  readonly FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD";
  readonly PROGRESSIVE: "PROGRESSIVE";
  readonly TOP_FIELD: "TOP_FIELD";
};
export type Mpeg2InterlaceMode =
  (typeof Mpeg2InterlaceMode)[keyof typeof Mpeg2InterlaceMode];
export declare const Mpeg2IntraDcPrecision: {
  readonly AUTO: "AUTO";
  readonly INTRA_DC_PRECISION_10: "INTRA_DC_PRECISION_10";
  readonly INTRA_DC_PRECISION_11: "INTRA_DC_PRECISION_11";
  readonly INTRA_DC_PRECISION_8: "INTRA_DC_PRECISION_8";
  readonly INTRA_DC_PRECISION_9: "INTRA_DC_PRECISION_9";
};
export type Mpeg2IntraDcPrecision =
  (typeof Mpeg2IntraDcPrecision)[keyof typeof Mpeg2IntraDcPrecision];
export declare const Mpeg2ParControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type Mpeg2ParControl =
  (typeof Mpeg2ParControl)[keyof typeof Mpeg2ParControl];
export declare const Mpeg2QualityTuningLevel: {
  readonly MULTI_PASS: "MULTI_PASS";
  readonly SINGLE_PASS: "SINGLE_PASS";
};
export type Mpeg2QualityTuningLevel =
  (typeof Mpeg2QualityTuningLevel)[keyof typeof Mpeg2QualityTuningLevel];
export declare const Mpeg2RateControlMode: {
  readonly CBR: "CBR";
  readonly VBR: "VBR";
};
export type Mpeg2RateControlMode =
  (typeof Mpeg2RateControlMode)[keyof typeof Mpeg2RateControlMode];
export declare const Mpeg2ScanTypeConversionMode: {
  readonly INTERLACED: "INTERLACED";
  readonly INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE";
};
export type Mpeg2ScanTypeConversionMode =
  (typeof Mpeg2ScanTypeConversionMode)[keyof typeof Mpeg2ScanTypeConversionMode];
export declare const Mpeg2SceneChangeDetect: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type Mpeg2SceneChangeDetect =
  (typeof Mpeg2SceneChangeDetect)[keyof typeof Mpeg2SceneChangeDetect];
export declare const Mpeg2SlowPal: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type Mpeg2SlowPal = (typeof Mpeg2SlowPal)[keyof typeof Mpeg2SlowPal];
export declare const Mpeg2SpatialAdaptiveQuantization: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type Mpeg2SpatialAdaptiveQuantization =
  (typeof Mpeg2SpatialAdaptiveQuantization)[keyof typeof Mpeg2SpatialAdaptiveQuantization];
export declare const Mpeg2Syntax: {
  readonly DEFAULT: "DEFAULT";
  readonly D_10: "D_10";
};
export type Mpeg2Syntax = (typeof Mpeg2Syntax)[keyof typeof Mpeg2Syntax];
export declare const Mpeg2Telecine: {
  readonly HARD: "HARD";
  readonly NONE: "NONE";
  readonly SOFT: "SOFT";
};
export type Mpeg2Telecine = (typeof Mpeg2Telecine)[keyof typeof Mpeg2Telecine];
export declare const Mpeg2TemporalAdaptiveQuantization: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type Mpeg2TemporalAdaptiveQuantization =
  (typeof Mpeg2TemporalAdaptiveQuantization)[keyof typeof Mpeg2TemporalAdaptiveQuantization];
export interface Mpeg2Settings {
  AdaptiveQuantization?: Mpeg2AdaptiveQuantization | undefined;
  Bitrate?: number | undefined;
  CodecLevel?: Mpeg2CodecLevel | undefined;
  CodecProfile?: Mpeg2CodecProfile | undefined;
  DynamicSubGop?: Mpeg2DynamicSubGop | undefined;
  FramerateControl?: Mpeg2FramerateControl | undefined;
  FramerateConversionAlgorithm?: Mpeg2FramerateConversionAlgorithm | undefined;
  FramerateDenominator?: number | undefined;
  FramerateNumerator?: number | undefined;
  GopClosedCadence?: number | undefined;
  GopSize?: number | undefined;
  GopSizeUnits?: Mpeg2GopSizeUnits | undefined;
  HrdBufferFinalFillPercentage?: number | undefined;
  HrdBufferInitialFillPercentage?: number | undefined;
  HrdBufferSize?: number | undefined;
  InterlaceMode?: Mpeg2InterlaceMode | undefined;
  IntraDcPrecision?: Mpeg2IntraDcPrecision | undefined;
  MaxBitrate?: number | undefined;
  MinIInterval?: number | undefined;
  NumberBFramesBetweenReferenceFrames?: number | undefined;
  ParControl?: Mpeg2ParControl | undefined;
  ParDenominator?: number | undefined;
  ParNumerator?: number | undefined;
  PerFrameMetrics?: FrameMetricType[] | undefined;
  QualityTuningLevel?: Mpeg2QualityTuningLevel | undefined;
  RateControlMode?: Mpeg2RateControlMode | undefined;
  ScanTypeConversionMode?: Mpeg2ScanTypeConversionMode | undefined;
  SceneChangeDetect?: Mpeg2SceneChangeDetect | undefined;
  SlowPal?: Mpeg2SlowPal | undefined;
  Softness?: number | undefined;
  SpatialAdaptiveQuantization?: Mpeg2SpatialAdaptiveQuantization | undefined;
  Syntax?: Mpeg2Syntax | undefined;
  Telecine?: Mpeg2Telecine | undefined;
  TemporalAdaptiveQuantization?: Mpeg2TemporalAdaptiveQuantization | undefined;
}
export declare const ProresChromaSampling: {
  readonly PRESERVE_444_SAMPLING: "PRESERVE_444_SAMPLING";
  readonly SUBSAMPLE_TO_422: "SUBSAMPLE_TO_422";
};
export type ProresChromaSampling =
  (typeof ProresChromaSampling)[keyof typeof ProresChromaSampling];
export declare const ProresCodecProfile: {
  readonly APPLE_PRORES_422: "APPLE_PRORES_422";
  readonly APPLE_PRORES_422_HQ: "APPLE_PRORES_422_HQ";
  readonly APPLE_PRORES_422_LT: "APPLE_PRORES_422_LT";
  readonly APPLE_PRORES_422_PROXY: "APPLE_PRORES_422_PROXY";
  readonly APPLE_PRORES_4444: "APPLE_PRORES_4444";
  readonly APPLE_PRORES_4444_XQ: "APPLE_PRORES_4444_XQ";
};
export type ProresCodecProfile =
  (typeof ProresCodecProfile)[keyof typeof ProresCodecProfile];
export declare const ProresFramerateControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type ProresFramerateControl =
  (typeof ProresFramerateControl)[keyof typeof ProresFramerateControl];
export declare const ProresFramerateConversionAlgorithm: {
  readonly DUPLICATE_DROP: "DUPLICATE_DROP";
  readonly FRAMEFORMER: "FRAMEFORMER";
  readonly INTERPOLATE: "INTERPOLATE";
  readonly MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT";
};
export type ProresFramerateConversionAlgorithm =
  (typeof ProresFramerateConversionAlgorithm)[keyof typeof ProresFramerateConversionAlgorithm];
export declare const ProresInterlaceMode: {
  readonly BOTTOM_FIELD: "BOTTOM_FIELD";
  readonly FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD";
  readonly FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD";
  readonly PROGRESSIVE: "PROGRESSIVE";
  readonly TOP_FIELD: "TOP_FIELD";
};
export type ProresInterlaceMode =
  (typeof ProresInterlaceMode)[keyof typeof ProresInterlaceMode];
export declare const ProresParControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type ProresParControl =
  (typeof ProresParControl)[keyof typeof ProresParControl];
export declare const ProresScanTypeConversionMode: {
  readonly INTERLACED: "INTERLACED";
  readonly INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE";
};
export type ProresScanTypeConversionMode =
  (typeof ProresScanTypeConversionMode)[keyof typeof ProresScanTypeConversionMode];
export declare const ProresSlowPal: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type ProresSlowPal = (typeof ProresSlowPal)[keyof typeof ProresSlowPal];
export declare const ProresTelecine: {
  readonly HARD: "HARD";
  readonly NONE: "NONE";
};
export type ProresTelecine =
  (typeof ProresTelecine)[keyof typeof ProresTelecine];
export interface ProresSettings {
  ChromaSampling?: ProresChromaSampling | undefined;
  CodecProfile?: ProresCodecProfile | undefined;
  FramerateControl?: ProresFramerateControl | undefined;
  FramerateConversionAlgorithm?: ProresFramerateConversionAlgorithm | undefined;
  FramerateDenominator?: number | undefined;
  FramerateNumerator?: number | undefined;
  InterlaceMode?: ProresInterlaceMode | undefined;
  ParControl?: ProresParControl | undefined;
  ParDenominator?: number | undefined;
  ParNumerator?: number | undefined;
  PerFrameMetrics?: FrameMetricType[] | undefined;
  ScanTypeConversionMode?: ProresScanTypeConversionMode | undefined;
  SlowPal?: ProresSlowPal | undefined;
  Telecine?: ProresTelecine | undefined;
}
export declare const UncompressedFourcc: {
  readonly I420: "I420";
  readonly I422: "I422";
  readonly I444: "I444";
};
export type UncompressedFourcc =
  (typeof UncompressedFourcc)[keyof typeof UncompressedFourcc];
export declare const UncompressedFramerateControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type UncompressedFramerateControl =
  (typeof UncompressedFramerateControl)[keyof typeof UncompressedFramerateControl];
export declare const UncompressedFramerateConversionAlgorithm: {
  readonly DUPLICATE_DROP: "DUPLICATE_DROP";
  readonly FRAMEFORMER: "FRAMEFORMER";
  readonly INTERPOLATE: "INTERPOLATE";
  readonly MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT";
};
export type UncompressedFramerateConversionAlgorithm =
  (typeof UncompressedFramerateConversionAlgorithm)[keyof typeof UncompressedFramerateConversionAlgorithm];
export declare const UncompressedInterlaceMode: {
  readonly INTERLACED: "INTERLACED";
  readonly PROGRESSIVE: "PROGRESSIVE";
};
export type UncompressedInterlaceMode =
  (typeof UncompressedInterlaceMode)[keyof typeof UncompressedInterlaceMode];
export declare const UncompressedScanTypeConversionMode: {
  readonly INTERLACED: "INTERLACED";
  readonly INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE";
};
export type UncompressedScanTypeConversionMode =
  (typeof UncompressedScanTypeConversionMode)[keyof typeof UncompressedScanTypeConversionMode];
export declare const UncompressedSlowPal: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type UncompressedSlowPal =
  (typeof UncompressedSlowPal)[keyof typeof UncompressedSlowPal];
export declare const UncompressedTelecine: {
  readonly HARD: "HARD";
  readonly NONE: "NONE";
};
export type UncompressedTelecine =
  (typeof UncompressedTelecine)[keyof typeof UncompressedTelecine];
export interface UncompressedSettings {
  Fourcc?: UncompressedFourcc | undefined;
  FramerateControl?: UncompressedFramerateControl | undefined;
  FramerateConversionAlgorithm?:
    | UncompressedFramerateConversionAlgorithm
    | undefined;
  FramerateDenominator?: number | undefined;
  FramerateNumerator?: number | undefined;
  InterlaceMode?: UncompressedInterlaceMode | undefined;
  ScanTypeConversionMode?: UncompressedScanTypeConversionMode | undefined;
  SlowPal?: UncompressedSlowPal | undefined;
  Telecine?: UncompressedTelecine | undefined;
}
export declare const Vc3FramerateControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type Vc3FramerateControl =
  (typeof Vc3FramerateControl)[keyof typeof Vc3FramerateControl];
export declare const Vc3FramerateConversionAlgorithm: {
  readonly DUPLICATE_DROP: "DUPLICATE_DROP";
  readonly FRAMEFORMER: "FRAMEFORMER";
  readonly INTERPOLATE: "INTERPOLATE";
  readonly MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT";
};
export type Vc3FramerateConversionAlgorithm =
  (typeof Vc3FramerateConversionAlgorithm)[keyof typeof Vc3FramerateConversionAlgorithm];
export declare const Vc3InterlaceMode: {
  readonly INTERLACED: "INTERLACED";
  readonly PROGRESSIVE: "PROGRESSIVE";
};
export type Vc3InterlaceMode =
  (typeof Vc3InterlaceMode)[keyof typeof Vc3InterlaceMode];
export declare const Vc3ScanTypeConversionMode: {
  readonly INTERLACED: "INTERLACED";
  readonly INTERLACED_OPTIMIZE: "INTERLACED_OPTIMIZE";
};
export type Vc3ScanTypeConversionMode =
  (typeof Vc3ScanTypeConversionMode)[keyof typeof Vc3ScanTypeConversionMode];
export declare const Vc3SlowPal: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type Vc3SlowPal = (typeof Vc3SlowPal)[keyof typeof Vc3SlowPal];
export declare const Vc3Telecine: {
  readonly HARD: "HARD";
  readonly NONE: "NONE";
};
export type Vc3Telecine = (typeof Vc3Telecine)[keyof typeof Vc3Telecine];
export declare const Vc3Class: {
  readonly CLASS_145_8BIT: "CLASS_145_8BIT";
  readonly CLASS_220_10BIT: "CLASS_220_10BIT";
  readonly CLASS_220_8BIT: "CLASS_220_8BIT";
};
export type Vc3Class = (typeof Vc3Class)[keyof typeof Vc3Class];
export interface Vc3Settings {
  FramerateControl?: Vc3FramerateControl | undefined;
  FramerateConversionAlgorithm?: Vc3FramerateConversionAlgorithm | undefined;
  FramerateDenominator?: number | undefined;
  FramerateNumerator?: number | undefined;
  InterlaceMode?: Vc3InterlaceMode | undefined;
  ScanTypeConversionMode?: Vc3ScanTypeConversionMode | undefined;
  SlowPal?: Vc3SlowPal | undefined;
  Telecine?: Vc3Telecine | undefined;
  Vc3Class?: Vc3Class | undefined;
}
export declare const Vp8FramerateControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type Vp8FramerateControl =
  (typeof Vp8FramerateControl)[keyof typeof Vp8FramerateControl];
export declare const Vp8FramerateConversionAlgorithm: {
  readonly DUPLICATE_DROP: "DUPLICATE_DROP";
  readonly FRAMEFORMER: "FRAMEFORMER";
  readonly INTERPOLATE: "INTERPOLATE";
  readonly MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT";
};
export type Vp8FramerateConversionAlgorithm =
  (typeof Vp8FramerateConversionAlgorithm)[keyof typeof Vp8FramerateConversionAlgorithm];
export declare const Vp8ParControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type Vp8ParControl = (typeof Vp8ParControl)[keyof typeof Vp8ParControl];
export declare const Vp8QualityTuningLevel: {
  readonly MULTI_PASS: "MULTI_PASS";
  readonly MULTI_PASS_HQ: "MULTI_PASS_HQ";
};
export type Vp8QualityTuningLevel =
  (typeof Vp8QualityTuningLevel)[keyof typeof Vp8QualityTuningLevel];
export declare const Vp8RateControlMode: {
  readonly VBR: "VBR";
};
export type Vp8RateControlMode =
  (typeof Vp8RateControlMode)[keyof typeof Vp8RateControlMode];
export interface Vp8Settings {
  Bitrate?: number | undefined;
  FramerateControl?: Vp8FramerateControl | undefined;
  FramerateConversionAlgorithm?: Vp8FramerateConversionAlgorithm | undefined;
  FramerateDenominator?: number | undefined;
  FramerateNumerator?: number | undefined;
  GopSize?: number | undefined;
  HrdBufferSize?: number | undefined;
  MaxBitrate?: number | undefined;
  ParControl?: Vp8ParControl | undefined;
  ParDenominator?: number | undefined;
  ParNumerator?: number | undefined;
  QualityTuningLevel?: Vp8QualityTuningLevel | undefined;
  RateControlMode?: Vp8RateControlMode | undefined;
}
export declare const Vp9FramerateControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type Vp9FramerateControl =
  (typeof Vp9FramerateControl)[keyof typeof Vp9FramerateControl];
export declare const Vp9FramerateConversionAlgorithm: {
  readonly DUPLICATE_DROP: "DUPLICATE_DROP";
  readonly FRAMEFORMER: "FRAMEFORMER";
  readonly INTERPOLATE: "INTERPOLATE";
  readonly MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT";
};
export type Vp9FramerateConversionAlgorithm =
  (typeof Vp9FramerateConversionAlgorithm)[keyof typeof Vp9FramerateConversionAlgorithm];
export declare const Vp9ParControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type Vp9ParControl = (typeof Vp9ParControl)[keyof typeof Vp9ParControl];
export declare const Vp9QualityTuningLevel: {
  readonly MULTI_PASS: "MULTI_PASS";
  readonly MULTI_PASS_HQ: "MULTI_PASS_HQ";
};
export type Vp9QualityTuningLevel =
  (typeof Vp9QualityTuningLevel)[keyof typeof Vp9QualityTuningLevel];
export declare const Vp9RateControlMode: {
  readonly VBR: "VBR";
};
export type Vp9RateControlMode =
  (typeof Vp9RateControlMode)[keyof typeof Vp9RateControlMode];
export interface Vp9Settings {
  Bitrate?: number | undefined;
  FramerateControl?: Vp9FramerateControl | undefined;
  FramerateConversionAlgorithm?: Vp9FramerateConversionAlgorithm | undefined;
  FramerateDenominator?: number | undefined;
  FramerateNumerator?: number | undefined;
  GopSize?: number | undefined;
  HrdBufferSize?: number | undefined;
  MaxBitrate?: number | undefined;
  ParControl?: Vp9ParControl | undefined;
  ParDenominator?: number | undefined;
  ParNumerator?: number | undefined;
  QualityTuningLevel?: Vp9QualityTuningLevel | undefined;
  RateControlMode?: Vp9RateControlMode | undefined;
}
export declare const XavcAdaptiveQuantization: {
  readonly AUTO: "AUTO";
  readonly HIGH: "HIGH";
  readonly HIGHER: "HIGHER";
  readonly LOW: "LOW";
  readonly MAX: "MAX";
  readonly MEDIUM: "MEDIUM";
  readonly OFF: "OFF";
};
export type XavcAdaptiveQuantization =
  (typeof XavcAdaptiveQuantization)[keyof typeof XavcAdaptiveQuantization];
export declare const XavcEntropyEncoding: {
  readonly AUTO: "AUTO";
  readonly CABAC: "CABAC";
  readonly CAVLC: "CAVLC";
};
export type XavcEntropyEncoding =
  (typeof XavcEntropyEncoding)[keyof typeof XavcEntropyEncoding];
export declare const XavcFramerateControl: {
  readonly INITIALIZE_FROM_SOURCE: "INITIALIZE_FROM_SOURCE";
  readonly SPECIFIED: "SPECIFIED";
};
export type XavcFramerateControl =
  (typeof XavcFramerateControl)[keyof typeof XavcFramerateControl];
export declare const XavcFramerateConversionAlgorithm: {
  readonly DUPLICATE_DROP: "DUPLICATE_DROP";
  readonly FRAMEFORMER: "FRAMEFORMER";
  readonly INTERPOLATE: "INTERPOLATE";
  readonly MAINTAIN_FRAME_COUNT: "MAINTAIN_FRAME_COUNT";
};
export type XavcFramerateConversionAlgorithm =
  (typeof XavcFramerateConversionAlgorithm)[keyof typeof XavcFramerateConversionAlgorithm];
export declare const XavcProfile: {
  readonly XAVC_4K: "XAVC_4K";
  readonly XAVC_4K_INTRA_CBG: "XAVC_4K_INTRA_CBG";
  readonly XAVC_4K_INTRA_VBR: "XAVC_4K_INTRA_VBR";
  readonly XAVC_HD: "XAVC_HD";
  readonly XAVC_HD_INTRA_CBG: "XAVC_HD_INTRA_CBG";
};
export type XavcProfile = (typeof XavcProfile)[keyof typeof XavcProfile];
export declare const XavcSlowPal: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type XavcSlowPal = (typeof XavcSlowPal)[keyof typeof XavcSlowPal];
export declare const XavcSpatialAdaptiveQuantization: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type XavcSpatialAdaptiveQuantization =
  (typeof XavcSpatialAdaptiveQuantization)[keyof typeof XavcSpatialAdaptiveQuantization];
export declare const XavcTemporalAdaptiveQuantization: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type XavcTemporalAdaptiveQuantization =
  (typeof XavcTemporalAdaptiveQuantization)[keyof typeof XavcTemporalAdaptiveQuantization];
export declare const Xavc4kIntraCbgProfileClass: {
  readonly CLASS_100: "CLASS_100";
  readonly CLASS_300: "CLASS_300";
  readonly CLASS_480: "CLASS_480";
};
export type Xavc4kIntraCbgProfileClass =
  (typeof Xavc4kIntraCbgProfileClass)[keyof typeof Xavc4kIntraCbgProfileClass];
export interface Xavc4kIntraCbgProfileSettings {
  XavcClass?: Xavc4kIntraCbgProfileClass | undefined;
}
export declare const Xavc4kIntraVbrProfileClass: {
  readonly CLASS_100: "CLASS_100";
  readonly CLASS_300: "CLASS_300";
  readonly CLASS_480: "CLASS_480";
};
export type Xavc4kIntraVbrProfileClass =
  (typeof Xavc4kIntraVbrProfileClass)[keyof typeof Xavc4kIntraVbrProfileClass];
export interface Xavc4kIntraVbrProfileSettings {
  XavcClass?: Xavc4kIntraVbrProfileClass | undefined;
}
export declare const Xavc4kProfileBitrateClass: {
  readonly BITRATE_CLASS_100: "BITRATE_CLASS_100";
  readonly BITRATE_CLASS_140: "BITRATE_CLASS_140";
  readonly BITRATE_CLASS_200: "BITRATE_CLASS_200";
};
export type Xavc4kProfileBitrateClass =
  (typeof Xavc4kProfileBitrateClass)[keyof typeof Xavc4kProfileBitrateClass];
export declare const Xavc4kProfileCodecProfile: {
  readonly HIGH: "HIGH";
  readonly HIGH_422: "HIGH_422";
};
export type Xavc4kProfileCodecProfile =
  (typeof Xavc4kProfileCodecProfile)[keyof typeof Xavc4kProfileCodecProfile];
export declare const XavcFlickerAdaptiveQuantization: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type XavcFlickerAdaptiveQuantization =
  (typeof XavcFlickerAdaptiveQuantization)[keyof typeof XavcFlickerAdaptiveQuantization];
export declare const XavcGopBReference: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type XavcGopBReference =
  (typeof XavcGopBReference)[keyof typeof XavcGopBReference];
export declare const Xavc4kProfileQualityTuningLevel: {
  readonly MULTI_PASS_HQ: "MULTI_PASS_HQ";
  readonly SINGLE_PASS: "SINGLE_PASS";
  readonly SINGLE_PASS_HQ: "SINGLE_PASS_HQ";
};
export type Xavc4kProfileQualityTuningLevel =
  (typeof Xavc4kProfileQualityTuningLevel)[keyof typeof Xavc4kProfileQualityTuningLevel];
export interface Xavc4kProfileSettings {
  BitrateClass?: Xavc4kProfileBitrateClass | undefined;
  CodecProfile?: Xavc4kProfileCodecProfile | undefined;
  FlickerAdaptiveQuantization?: XavcFlickerAdaptiveQuantization | undefined;
  GopBReference?: XavcGopBReference | undefined;
  GopClosedCadence?: number | undefined;
  HrdBufferSize?: number | undefined;
  QualityTuningLevel?: Xavc4kProfileQualityTuningLevel | undefined;
  Slices?: number | undefined;
}
export declare const XavcHdIntraCbgProfileClass: {
  readonly CLASS_100: "CLASS_100";
  readonly CLASS_200: "CLASS_200";
  readonly CLASS_50: "CLASS_50";
};
export type XavcHdIntraCbgProfileClass =
  (typeof XavcHdIntraCbgProfileClass)[keyof typeof XavcHdIntraCbgProfileClass];
export interface XavcHdIntraCbgProfileSettings {
  XavcClass?: XavcHdIntraCbgProfileClass | undefined;
}
export declare const XavcHdProfileBitrateClass: {
  readonly BITRATE_CLASS_25: "BITRATE_CLASS_25";
  readonly BITRATE_CLASS_35: "BITRATE_CLASS_35";
  readonly BITRATE_CLASS_50: "BITRATE_CLASS_50";
};
export type XavcHdProfileBitrateClass =
  (typeof XavcHdProfileBitrateClass)[keyof typeof XavcHdProfileBitrateClass];
export declare const XavcInterlaceMode: {
  readonly BOTTOM_FIELD: "BOTTOM_FIELD";
  readonly FOLLOW_BOTTOM_FIELD: "FOLLOW_BOTTOM_FIELD";
  readonly FOLLOW_TOP_FIELD: "FOLLOW_TOP_FIELD";
  readonly PROGRESSIVE: "PROGRESSIVE";
  readonly TOP_FIELD: "TOP_FIELD";
};
export type XavcInterlaceMode =
  (typeof XavcInterlaceMode)[keyof typeof XavcInterlaceMode];
export declare const XavcHdProfileQualityTuningLevel: {
  readonly MULTI_PASS_HQ: "MULTI_PASS_HQ";
  readonly SINGLE_PASS: "SINGLE_PASS";
  readonly SINGLE_PASS_HQ: "SINGLE_PASS_HQ";
};
export type XavcHdProfileQualityTuningLevel =
  (typeof XavcHdProfileQualityTuningLevel)[keyof typeof XavcHdProfileQualityTuningLevel];
export declare const XavcHdProfileTelecine: {
  readonly HARD: "HARD";
  readonly NONE: "NONE";
};
export type XavcHdProfileTelecine =
  (typeof XavcHdProfileTelecine)[keyof typeof XavcHdProfileTelecine];
export interface XavcHdProfileSettings {
  BitrateClass?: XavcHdProfileBitrateClass | undefined;
  FlickerAdaptiveQuantization?: XavcFlickerAdaptiveQuantization | undefined;
  GopBReference?: XavcGopBReference | undefined;
  GopClosedCadence?: number | undefined;
  HrdBufferSize?: number | undefined;
  InterlaceMode?: XavcInterlaceMode | undefined;
  QualityTuningLevel?: XavcHdProfileQualityTuningLevel | undefined;
  Slices?: number | undefined;
  Telecine?: XavcHdProfileTelecine | undefined;
}
export interface XavcSettings {
  AdaptiveQuantization?: XavcAdaptiveQuantization | undefined;
  EntropyEncoding?: XavcEntropyEncoding | undefined;
  FramerateControl?: XavcFramerateControl | undefined;
  FramerateConversionAlgorithm?: XavcFramerateConversionAlgorithm | undefined;
  FramerateDenominator?: number | undefined;
  FramerateNumerator?: number | undefined;
  PerFrameMetrics?: FrameMetricType[] | undefined;
  Profile?: XavcProfile | undefined;
  SlowPal?: XavcSlowPal | undefined;
  Softness?: number | undefined;
  SpatialAdaptiveQuantization?: XavcSpatialAdaptiveQuantization | undefined;
  TemporalAdaptiveQuantization?: XavcTemporalAdaptiveQuantization | undefined;
  Xavc4kIntraCbgProfileSettings?: Xavc4kIntraCbgProfileSettings | undefined;
  Xavc4kIntraVbrProfileSettings?: Xavc4kIntraVbrProfileSettings | undefined;
  Xavc4kProfileSettings?: Xavc4kProfileSettings | undefined;
  XavcHdIntraCbgProfileSettings?: XavcHdIntraCbgProfileSettings | undefined;
  XavcHdProfileSettings?: XavcHdProfileSettings | undefined;
}
export interface VideoCodecSettings {
  Av1Settings?: Av1Settings | undefined;
  AvcIntraSettings?: AvcIntraSettings | undefined;
  Codec?: VideoCodec | undefined;
  FrameCaptureSettings?: FrameCaptureSettings | undefined;
  GifSettings?: GifSettings | undefined;
  H264Settings?: H264Settings | undefined;
  H265Settings?: H265Settings | undefined;
  Mpeg2Settings?: Mpeg2Settings | undefined;
  ProresSettings?: ProresSettings | undefined;
  UncompressedSettings?: UncompressedSettings | undefined;
  Vc3Settings?: Vc3Settings | undefined;
  Vp8Settings?: Vp8Settings | undefined;
  Vp9Settings?: Vp9Settings | undefined;
  XavcSettings?: XavcSettings | undefined;
}
export declare const ColorMetadata: {
  readonly IGNORE: "IGNORE";
  readonly INSERT: "INSERT";
};
export type ColorMetadata = (typeof ColorMetadata)[keyof typeof ColorMetadata];
export declare const DropFrameTimecode: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type DropFrameTimecode =
  (typeof DropFrameTimecode)[keyof typeof DropFrameTimecode];
export declare const RespondToAfd: {
  readonly NONE: "NONE";
  readonly PASSTHROUGH: "PASSTHROUGH";
  readonly RESPOND: "RESPOND";
};
export type RespondToAfd = (typeof RespondToAfd)[keyof typeof RespondToAfd];
export declare const ScalingBehavior: {
  readonly DEFAULT: "DEFAULT";
  readonly FILL: "FILL";
  readonly FIT: "FIT";
  readonly FIT_NO_UPSCALE: "FIT_NO_UPSCALE";
  readonly STRETCH_TO_OUTPUT: "STRETCH_TO_OUTPUT";
};
export type ScalingBehavior =
  (typeof ScalingBehavior)[keyof typeof ScalingBehavior];
export declare const VideoTimecodeInsertion: {
  readonly DISABLED: "DISABLED";
  readonly PIC_TIMING_SEI: "PIC_TIMING_SEI";
};
export type VideoTimecodeInsertion =
  (typeof VideoTimecodeInsertion)[keyof typeof VideoTimecodeInsertion];
export declare const TimecodeTrack: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type TimecodeTrack = (typeof TimecodeTrack)[keyof typeof TimecodeTrack];
export interface ClipLimits {
  MaximumRGBTolerance?: number | undefined;
  MaximumYUV?: number | undefined;
  MinimumRGBTolerance?: number | undefined;
  MinimumYUV?: number | undefined;
}
export declare const ColorSpaceConversion: {
  readonly FORCE_601: "FORCE_601";
  readonly FORCE_709: "FORCE_709";
  readonly FORCE_HDR10: "FORCE_HDR10";
  readonly FORCE_HLG_2020: "FORCE_HLG_2020";
  readonly FORCE_P3D65_HDR: "FORCE_P3D65_HDR";
  readonly FORCE_P3D65_SDR: "FORCE_P3D65_SDR";
  readonly FORCE_P3DCI: "FORCE_P3DCI";
  readonly NONE: "NONE";
};
export type ColorSpaceConversion =
  (typeof ColorSpaceConversion)[keyof typeof ColorSpaceConversion];
export declare const HDRToSDRToneMapper: {
  readonly PRESERVE_DETAILS: "PRESERVE_DETAILS";
  readonly VIBRANT: "VIBRANT";
};
export type HDRToSDRToneMapper =
  (typeof HDRToSDRToneMapper)[keyof typeof HDRToSDRToneMapper];
export declare const SampleRangeConversion: {
  readonly LIMITED_RANGE_CLIP: "LIMITED_RANGE_CLIP";
  readonly LIMITED_RANGE_SQUEEZE: "LIMITED_RANGE_SQUEEZE";
  readonly NONE: "NONE";
};
export type SampleRangeConversion =
  (typeof SampleRangeConversion)[keyof typeof SampleRangeConversion];
export interface ColorCorrector {
  Brightness?: number | undefined;
  ClipLimits?: ClipLimits | undefined;
  ColorSpaceConversion?: ColorSpaceConversion | undefined;
  Contrast?: number | undefined;
  Hdr10Metadata?: Hdr10Metadata | undefined;
  HdrToSdrToneMapper?: HDRToSDRToneMapper | undefined;
  Hue?: number | undefined;
  MaxLuminance?: number | undefined;
  SampleRangeConversion?: SampleRangeConversion | undefined;
  Saturation?: number | undefined;
  SdrReferenceWhiteLevel?: number | undefined;
}
export declare const DeinterlaceAlgorithm: {
  readonly BLEND: "BLEND";
  readonly BLEND_TICKER: "BLEND_TICKER";
  readonly INTERPOLATE: "INTERPOLATE";
  readonly INTERPOLATE_TICKER: "INTERPOLATE_TICKER";
  readonly LINEAR_INTERPOLATION: "LINEAR_INTERPOLATION";
};
export type DeinterlaceAlgorithm =
  (typeof DeinterlaceAlgorithm)[keyof typeof DeinterlaceAlgorithm];
export declare const DeinterlacerControl: {
  readonly FORCE_ALL_FRAMES: "FORCE_ALL_FRAMES";
  readonly NORMAL: "NORMAL";
};
export type DeinterlacerControl =
  (typeof DeinterlacerControl)[keyof typeof DeinterlacerControl];
export declare const DeinterlacerMode: {
  readonly ADAPTIVE: "ADAPTIVE";
  readonly DEINTERLACE: "DEINTERLACE";
  readonly INVERSE_TELECINE: "INVERSE_TELECINE";
};
export type DeinterlacerMode =
  (typeof DeinterlacerMode)[keyof typeof DeinterlacerMode];
export interface Deinterlacer {
  Algorithm?: DeinterlaceAlgorithm | undefined;
  Control?: DeinterlacerControl | undefined;
  Mode?: DeinterlacerMode | undefined;
}
export interface DolbyVisionLevel6Metadata {
  MaxCll?: number | undefined;
  MaxFall?: number | undefined;
}
export declare const DolbyVisionLevel6Mode: {
  readonly PASSTHROUGH: "PASSTHROUGH";
  readonly RECALCULATE: "RECALCULATE";
  readonly SPECIFY: "SPECIFY";
};
export type DolbyVisionLevel6Mode =
  (typeof DolbyVisionLevel6Mode)[keyof typeof DolbyVisionLevel6Mode];
export declare const DolbyVisionMapping: {
  readonly HDR10_1000: "HDR10_1000";
  readonly HDR10_NOMAP: "HDR10_NOMAP";
};
export type DolbyVisionMapping =
  (typeof DolbyVisionMapping)[keyof typeof DolbyVisionMapping];
export declare const DolbyVisionProfile: {
  readonly PROFILE_5: "PROFILE_5";
  readonly PROFILE_8_1: "PROFILE_8_1";
};
export type DolbyVisionProfile =
  (typeof DolbyVisionProfile)[keyof typeof DolbyVisionProfile];
export interface DolbyVision {
  L6Metadata?: DolbyVisionLevel6Metadata | undefined;
  L6Mode?: DolbyVisionLevel6Mode | undefined;
  Mapping?: DolbyVisionMapping | undefined;
  Profile?: DolbyVisionProfile | undefined;
}
export interface Hdr10Plus {
  MasteringMonitorNits?: number | undefined;
  TargetMonitorNits?: number | undefined;
}
export declare const NoiseReducerFilter: {
  readonly BILATERAL: "BILATERAL";
  readonly CONSERVE: "CONSERVE";
  readonly GAUSSIAN: "GAUSSIAN";
  readonly LANCZOS: "LANCZOS";
  readonly MEAN: "MEAN";
  readonly SHARPEN: "SHARPEN";
  readonly SPATIAL: "SPATIAL";
  readonly TEMPORAL: "TEMPORAL";
};
export type NoiseReducerFilter =
  (typeof NoiseReducerFilter)[keyof typeof NoiseReducerFilter];
export interface NoiseReducerFilterSettings {
  Strength?: number | undefined;
}
export interface NoiseReducerSpatialFilterSettings {
  PostFilterSharpenStrength?: number | undefined;
  Speed?: number | undefined;
  Strength?: number | undefined;
}
export declare const NoiseFilterPostTemporalSharpening: {
  readonly AUTO: "AUTO";
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type NoiseFilterPostTemporalSharpening =
  (typeof NoiseFilterPostTemporalSharpening)[keyof typeof NoiseFilterPostTemporalSharpening];
export declare const NoiseFilterPostTemporalSharpeningStrength: {
  readonly HIGH: "HIGH";
  readonly LOW: "LOW";
  readonly MEDIUM: "MEDIUM";
};
export type NoiseFilterPostTemporalSharpeningStrength =
  (typeof NoiseFilterPostTemporalSharpeningStrength)[keyof typeof NoiseFilterPostTemporalSharpeningStrength];
export interface NoiseReducerTemporalFilterSettings {
  AggressiveMode?: number | undefined;
  PostTemporalSharpening?: NoiseFilterPostTemporalSharpening | undefined;
  PostTemporalSharpeningStrength?:
    | NoiseFilterPostTemporalSharpeningStrength
    | undefined;
  Speed?: number | undefined;
  Strength?: number | undefined;
}
export interface NoiseReducer {
  Filter?: NoiseReducerFilter | undefined;
  FilterSettings?: NoiseReducerFilterSettings | undefined;
  SpatialFilterSettings?: NoiseReducerSpatialFilterSettings | undefined;
  TemporalFilterSettings?: NoiseReducerTemporalFilterSettings | undefined;
}
export declare const WatermarkingStrength: {
  readonly DEFAULT: "DEFAULT";
  readonly LIGHTER: "LIGHTER";
  readonly LIGHTEST: "LIGHTEST";
  readonly STRONGER: "STRONGER";
  readonly STRONGEST: "STRONGEST";
};
export type WatermarkingStrength =
  (typeof WatermarkingStrength)[keyof typeof WatermarkingStrength];
export interface NexGuardFileMarkerSettings {
  License?: string | undefined;
  Payload?: number | undefined;
  Preset?: string | undefined;
  Strength?: WatermarkingStrength | undefined;
}
export interface PartnerWatermarking {
  NexguardFileMarkerSettings?: NexGuardFileMarkerSettings | undefined;
}
export declare const TimecodeBurninPosition: {
  readonly BOTTOM_CENTER: "BOTTOM_CENTER";
  readonly BOTTOM_LEFT: "BOTTOM_LEFT";
  readonly BOTTOM_RIGHT: "BOTTOM_RIGHT";
  readonly MIDDLE_CENTER: "MIDDLE_CENTER";
  readonly MIDDLE_LEFT: "MIDDLE_LEFT";
  readonly MIDDLE_RIGHT: "MIDDLE_RIGHT";
  readonly TOP_CENTER: "TOP_CENTER";
  readonly TOP_LEFT: "TOP_LEFT";
  readonly TOP_RIGHT: "TOP_RIGHT";
};
export type TimecodeBurninPosition =
  (typeof TimecodeBurninPosition)[keyof typeof TimecodeBurninPosition];
export interface TimecodeBurnin {
  FontSize?: number | undefined;
  Position?: TimecodeBurninPosition | undefined;
  Prefix?: string | undefined;
}
export interface VideoPreprocessor {
  ColorCorrector?: ColorCorrector | undefined;
  Deinterlacer?: Deinterlacer | undefined;
  DolbyVision?: DolbyVision | undefined;
  Hdr10Plus?: Hdr10Plus | undefined;
  ImageInserter?: ImageInserter | undefined;
  NoiseReducer?: NoiseReducer | undefined;
  PartnerWatermarking?: PartnerWatermarking | undefined;
  TimecodeBurnin?: TimecodeBurnin | undefined;
}
export interface VideoDescription {
  AfdSignaling?: AfdSignaling | undefined;
  AntiAlias?: AntiAlias | undefined;
  ChromaPositionMode?: ChromaPositionMode | undefined;
  CodecSettings?: VideoCodecSettings | undefined;
  ColorMetadata?: ColorMetadata | undefined;
  Crop?: Rectangle | undefined;
  DropFrameTimecode?: DropFrameTimecode | undefined;
  FixedAfd?: number | undefined;
  Height?: number | undefined;
  Position?: Rectangle | undefined;
  RespondToAfd?: RespondToAfd | undefined;
  ScalingBehavior?: ScalingBehavior | undefined;
  Sharpness?: number | undefined;
  TimecodeInsertion?: VideoTimecodeInsertion | undefined;
  TimecodeTrack?: TimecodeTrack | undefined;
  VideoPreprocessors?: VideoPreprocessor | undefined;
  Width?: number | undefined;
}
export interface Output {
  AudioDescriptions?: AudioDescription[] | undefined;
  CaptionDescriptions?: CaptionDescription[] | undefined;
  ContainerSettings?: ContainerSettings | undefined;
  Extension?: string | undefined;
  NameModifier?: string | undefined;
  OutputSettings?: OutputSettings | undefined;
  Preset?: string | undefined;
  VideoDescription?: VideoDescription | undefined;
}
export interface OutputGroup {
  AutomatedEncodingSettings?: AutomatedEncodingSettings | undefined;
  CustomName?: string | undefined;
  Name?: string | undefined;
  OutputGroupSettings?: OutputGroupSettings | undefined;
  Outputs?: Output[] | undefined;
}
export declare const TimecodeSource: {
  readonly EMBEDDED: "EMBEDDED";
  readonly SPECIFIEDSTART: "SPECIFIEDSTART";
  readonly ZEROBASED: "ZEROBASED";
};
export type TimecodeSource =
  (typeof TimecodeSource)[keyof typeof TimecodeSource];
export interface TimecodeConfig {
  Anchor?: string | undefined;
  Source?: TimecodeSource | undefined;
  Start?: string | undefined;
  TimestampOffset?: string | undefined;
}
export interface TimedMetadataInsertion {
  Id3Insertions?: Id3Insertion[] | undefined;
}
export interface JobSettings {
  AdAvailOffset?: number | undefined;
  AvailBlanking?: AvailBlanking | undefined;
  ColorConversion3DLUTSettings?: ColorConversion3DLUTSetting[] | undefined;
  Esam?: EsamSettings | undefined;
  ExtendedDataServices?: ExtendedDataServices | undefined;
  FollowSource?: number | undefined;
  Inputs?: Input[] | undefined;
  KantarWatermark?: KantarWatermarkSettings | undefined;
  MotionImageInserter?: MotionImageInserter | undefined;
  NielsenConfiguration?: NielsenConfiguration | undefined;
  NielsenNonLinearWatermark?: NielsenNonLinearWatermarkSettings | undefined;
  OutputGroups?: OutputGroup[] | undefined;
  TimecodeConfig?: TimecodeConfig | undefined;
  TimedMetadataInsertion?: TimedMetadataInsertion | undefined;
}
export declare const SimulateReservedQueue: {
  readonly DISABLED: "DISABLED";
  readonly ENABLED: "ENABLED";
};
export type SimulateReservedQueue =
  (typeof SimulateReservedQueue)[keyof typeof SimulateReservedQueue];
export declare const JobStatus: {
  readonly CANCELED: "CANCELED";
  readonly COMPLETE: "COMPLETE";
  readonly ERROR: "ERROR";
  readonly PROGRESSING: "PROGRESSING";
  readonly SUBMITTED: "SUBMITTED";
};
export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus];
export declare const StatusUpdateInterval: {
  readonly SECONDS_10: "SECONDS_10";
  readonly SECONDS_12: "SECONDS_12";
  readonly SECONDS_120: "SECONDS_120";
  readonly SECONDS_15: "SECONDS_15";
  readonly SECONDS_180: "SECONDS_180";
  readonly SECONDS_20: "SECONDS_20";
  readonly SECONDS_240: "SECONDS_240";
  readonly SECONDS_30: "SECONDS_30";
  readonly SECONDS_300: "SECONDS_300";
  readonly SECONDS_360: "SECONDS_360";
  readonly SECONDS_420: "SECONDS_420";
  readonly SECONDS_480: "SECONDS_480";
  readonly SECONDS_540: "SECONDS_540";
  readonly SECONDS_60: "SECONDS_60";
  readonly SECONDS_600: "SECONDS_600";
};
export type StatusUpdateInterval =
  (typeof StatusUpdateInterval)[keyof typeof StatusUpdateInterval];
