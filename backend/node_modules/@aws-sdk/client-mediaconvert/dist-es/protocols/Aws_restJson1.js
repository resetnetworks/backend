import { loadRestJsonErrorCode, parseJsonBody as parseBody, parseJsonErrorBody as parseErrorBody } from "@aws-sdk/core";
import { requestBuilder as rb } from "@smithy/core";
import { _json, collectBody, decorateServiceException as __decorateServiceException, expectInt32 as __expectInt32, expectLong as __expectLong, expectNonNull as __expectNonNull, expectNumber as __expectNumber, expectObject as __expectObject, expectString as __expectString, limitedParseDouble as __limitedParseDouble, map, parseEpochTimestamp as __parseEpochTimestamp, serializeFloat as __serializeFloat, take, withBaseException, } from "@smithy/smithy-client";
import { v4 as generateIdempotencyToken } from "uuid";
import { MediaConvertServiceException as __BaseException } from "../models/MediaConvertServiceException";
import { BadRequestException, ConflictException, ForbiddenException, InternalServerErrorException, NotFoundException, TooManyRequestsException, } from "../models/models_2";
export const se_AssociateCertificateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/certificates");
    let body;
    body = JSON.stringify(take(input, {
        arn: [, , `Arn`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CancelJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/jobs/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_CreateJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/jobs");
    let body;
    body = JSON.stringify(take(input, {
        accelerationSettings: [, (_) => se_AccelerationSettings(_, context), `AccelerationSettings`],
        billingTagsSource: [, , `BillingTagsSource`],
        clientRequestToken: [true, (_) => _ ?? generateIdempotencyToken(), `ClientRequestToken`],
        hopDestinations: [, (_) => se___listOfHopDestination(_, context), `HopDestinations`],
        jobEngineVersion: [, , `JobEngineVersion`],
        jobTemplate: [, , `JobTemplate`],
        priority: [, , `Priority`],
        queue: [, , `Queue`],
        role: [, , `Role`],
        settings: [, (_) => se_JobSettings(_, context), `Settings`],
        simulateReservedQueue: [, , `SimulateReservedQueue`],
        statusUpdateInterval: [, , `StatusUpdateInterval`],
        tags: [, (_) => _json(_), `Tags`],
        userMetadata: [, (_) => _json(_), `UserMetadata`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateJobTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/jobTemplates");
    let body;
    body = JSON.stringify(take(input, {
        accelerationSettings: [, (_) => se_AccelerationSettings(_, context), `AccelerationSettings`],
        category: [, , `Category`],
        description: [, , `Description`],
        hopDestinations: [, (_) => se___listOfHopDestination(_, context), `HopDestinations`],
        name: [, , `Name`],
        priority: [, , `Priority`],
        queue: [, , `Queue`],
        settings: [, (_) => se_JobTemplateSettings(_, context), `Settings`],
        statusUpdateInterval: [, , `StatusUpdateInterval`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreatePresetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/presets");
    let body;
    body = JSON.stringify(take(input, {
        category: [, , `Category`],
        description: [, , `Description`],
        name: [, , `Name`],
        settings: [, (_) => se_PresetSettings(_, context), `Settings`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_CreateQueueCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/queues");
    let body;
    body = JSON.stringify(take(input, {
        concurrentJobs: [, , `ConcurrentJobs`],
        description: [, , `Description`],
        name: [, , `Name`],
        pricingPlan: [, , `PricingPlan`],
        reservationPlanSettings: [, (_) => se_ReservationPlanSettings(_, context), `ReservationPlanSettings`],
        status: [, , `Status`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DeleteJobTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/jobTemplates/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/policy");
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeletePresetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/presets/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DeleteQueueCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/queues/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_DescribeEndpointsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/endpoints");
    let body;
    body = JSON.stringify(take(input, {
        maxResults: [, , `MaxResults`],
        mode: [, , `Mode`],
        nextToken: [, , `NextToken`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_DisassociateCertificateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/certificates/{Arn}");
    b.p("Arn", () => input.Arn, "{Arn}", false);
    let body;
    b.m("DELETE").h(headers).b(body);
    return b.build();
};
export const se_GetJobCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/jobs/{Id}");
    b.p("Id", () => input.Id, "{Id}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetJobTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/jobTemplates/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/policy");
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetPresetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/presets/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_GetQueueCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/queues/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/jobs");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_o]: [, input[_O]],
        [_q]: [, input[_Q]],
        [_s]: [, input[_S]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListJobTemplatesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/jobTemplates");
    const query = map({
        [_c]: [, input[_C]],
        [_lB]: [, input[_LB]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_o]: [, input[_O]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListPresetsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/presets");
    const query = map({
        [_c]: [, input[_C]],
        [_lB]: [, input[_LB]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_o]: [, input[_O]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListQueuesCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/queues");
    const query = map({
        [_lB]: [, input[_LB]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_o]: [, input[_O]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ListTagsForResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/tags/{Arn}");
    b.p("Arn", () => input.Arn, "{Arn}", false);
    let body;
    b.m("GET").h(headers).b(body);
    return b.build();
};
export const se_ListVersionsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/versions");
    const query = map({
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_ProbeCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/probe");
    let body;
    body = JSON.stringify(take(input, {
        inputFiles: [, (_) => se___listOfProbeInputFile(_, context), `InputFiles`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_PutPolicyCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/policy");
    let body;
    body = JSON.stringify(take(input, {
        policy: [, (_) => se_Policy(_, context), `Policy`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_SearchJobsCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {};
    b.bp("/2017-08-29/search");
    const query = map({
        [_iF]: [, input[_IF]],
        [_mR]: [() => input.MaxResults !== void 0, () => input[_MR].toString()],
        [_nT]: [, input[_NT]],
        [_o]: [, input[_O]],
        [_q]: [, input[_Q]],
        [_s]: [, input[_S]],
    });
    let body;
    b.m("GET").h(headers).q(query).b(body);
    return b.build();
};
export const se_TagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/tags");
    let body;
    body = JSON.stringify(take(input, {
        arn: [, , `Arn`],
        tags: [, (_) => _json(_), `Tags`],
    }));
    b.m("POST").h(headers).b(body);
    return b.build();
};
export const se_UntagResourceCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/tags/{Arn}");
    b.p("Arn", () => input.Arn, "{Arn}", false);
    let body;
    body = JSON.stringify(take(input, {
        tagKeys: [, (_) => _json(_), `TagKeys`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateJobTemplateCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/jobTemplates/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        accelerationSettings: [, (_) => se_AccelerationSettings(_, context), `AccelerationSettings`],
        category: [, , `Category`],
        description: [, , `Description`],
        hopDestinations: [, (_) => se___listOfHopDestination(_, context), `HopDestinations`],
        priority: [, , `Priority`],
        queue: [, , `Queue`],
        settings: [, (_) => se_JobTemplateSettings(_, context), `Settings`],
        statusUpdateInterval: [, , `StatusUpdateInterval`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdatePresetCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/presets/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        category: [, , `Category`],
        description: [, , `Description`],
        settings: [, (_) => se_PresetSettings(_, context), `Settings`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const se_UpdateQueueCommand = async (input, context) => {
    const b = rb(input, context);
    const headers = {
        "content-type": "application/json",
    };
    b.bp("/2017-08-29/queues/{Name}");
    b.p("Name", () => input.Name, "{Name}", false);
    let body;
    body = JSON.stringify(take(input, {
        concurrentJobs: [, , `ConcurrentJobs`],
        description: [, , `Description`],
        reservationPlanSettings: [, (_) => se_ReservationPlanSettings(_, context), `ReservationPlanSettings`],
        status: [, , `Status`],
    }));
    b.m("PUT").h(headers).b(body);
    return b.build();
};
export const de_AssociateCertificateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CancelJobCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_CreateJobCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Job: [, (_) => de_Job(_, context), `job`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateJobTemplateCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        JobTemplate: [, (_) => de_JobTemplate(_, context), `jobTemplate`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreatePresetCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Preset: [, (_) => de_Preset(_, context), `preset`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_CreateQueueCommand = async (output, context) => {
    if (output.statusCode !== 201 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Queue: [, (_) => de_Queue(_, context), `queue`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DeleteJobTemplateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeletePolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeletePresetCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DeleteQueueCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_DescribeEndpointsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Endpoints: [, (_) => de___listOfEndpoint(_, context), `endpoints`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_DisassociateCertificateCommand = async (output, context) => {
    if (output.statusCode !== 202 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_GetJobCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Job: [, (_) => de_Job(_, context), `job`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetJobTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        JobTemplate: [, (_) => de_JobTemplate(_, context), `jobTemplate`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Policy: [, (_) => de_Policy(_, context), `policy`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetPresetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Preset: [, (_) => de_Preset(_, context), `preset`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_GetQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Queue: [, (_) => de_Queue(_, context), `queue`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Jobs: [, (_) => de___listOfJob(_, context), `jobs`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListJobTemplatesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        JobTemplates: [, (_) => de___listOfJobTemplate(_, context), `jobTemplates`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListPresetsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: [, __expectString, `nextToken`],
        Presets: [, (_) => de___listOfPreset(_, context), `presets`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListQueuesCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: [, __expectString, `nextToken`],
        Queues: [, (_) => de___listOfQueue(_, context), `queues`],
        TotalConcurrentJobs: [, __expectInt32, `totalConcurrentJobs`],
        UnallocatedConcurrentJobs: [, __expectInt32, `unallocatedConcurrentJobs`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListTagsForResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ResourceTags: [, (_) => de_ResourceTags(_, context), `resourceTags`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ListVersionsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        NextToken: [, __expectString, `nextToken`],
        Versions: [, (_) => de___listOfJobEngineVersion(_, context), `versions`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_ProbeCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        ProbeResults: [, (_) => de___listOfProbeResult(_, context), `probeResults`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_PutPolicyCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Policy: [, (_) => de_Policy(_, context), `policy`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_SearchJobsCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Jobs: [, (_) => de___listOfJob(_, context), `jobs`],
        NextToken: [, __expectString, `nextToken`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_TagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UntagResourceCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    await collectBody(output.body, context);
    return contents;
};
export const de_UpdateJobTemplateCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        JobTemplate: [, (_) => de_JobTemplate(_, context), `jobTemplate`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdatePresetCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Preset: [, (_) => de_Preset(_, context), `preset`],
    });
    Object.assign(contents, doc);
    return contents;
};
export const de_UpdateQueueCommand = async (output, context) => {
    if (output.statusCode !== 200 && output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const contents = map({
        $metadata: deserializeMetadata(output),
    });
    const data = __expectNonNull(__expectObject(await parseBody(output.body, context)), "body");
    const doc = take(data, {
        Queue: [, (_) => de_Queue(_, context), `queue`],
    });
    Object.assign(contents, doc);
    return contents;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context),
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "BadRequestException":
        case "com.amazonaws.mediaconvert#BadRequestException":
            throw await de_BadRequestExceptionRes(parsedOutput, context);
        case "ConflictException":
        case "com.amazonaws.mediaconvert#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput, context);
        case "ForbiddenException":
        case "com.amazonaws.mediaconvert#ForbiddenException":
            throw await de_ForbiddenExceptionRes(parsedOutput, context);
        case "InternalServerErrorException":
        case "com.amazonaws.mediaconvert#InternalServerErrorException":
            throw await de_InternalServerErrorExceptionRes(parsedOutput, context);
        case "NotFoundException":
        case "com.amazonaws.mediaconvert#NotFoundException":
            throw await de_NotFoundExceptionRes(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.mediaconvert#TooManyRequestsException":
            throw await de_TooManyRequestsExceptionRes(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const throwDefaultError = withBaseException(__BaseException);
const de_BadRequestExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new BadRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_ForbiddenExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new ForbiddenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_InternalServerErrorExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new InternalServerErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_NotFoundExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new NotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const de_TooManyRequestsExceptionRes = async (parsedOutput, context) => {
    const contents = map({});
    const data = parsedOutput.body;
    const doc = take(data, {
        Message: [, __expectString, `message`],
    });
    Object.assign(contents, doc);
    const exception = new TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents,
    });
    return __decorateServiceException(exception, parsedOutput.body);
};
const se___listOf__doubleMinNegative60Max6 = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return __serializeFloat(entry);
    });
};
const se___listOfAllowedRenditionSize = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AllowedRenditionSize(entry, context);
    });
};
const se___listOfAudioDescription = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AudioDescription(entry, context);
    });
};
const se___listOfAutomatedAbrRule = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_AutomatedAbrRule(entry, context);
    });
};
const se___listOfCaptionDescription = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CaptionDescription(entry, context);
    });
};
const se___listOfCaptionDescriptionPreset = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CaptionDescriptionPreset(entry, context);
    });
};
const se___listOfCmafAdditionalManifest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_CmafAdditionalManifest(entry, context);
    });
};
const se___listOfColorConversion3DLUTSetting = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ColorConversion3DLUTSetting(entry, context);
    });
};
const se___listOfDashAdditionalManifest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DashAdditionalManifest(entry, context);
    });
};
const se___listOfForceIncludeRenditionSize = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ForceIncludeRenditionSize(entry, context);
    });
};
const se___listOfHlsAdditionalManifest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_HlsAdditionalManifest(entry, context);
    });
};
const se___listOfHlsCaptionLanguageMapping = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_HlsCaptionLanguageMapping(entry, context);
    });
};
const se___listOfHopDestination = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_HopDestination(entry, context);
    });
};
const se___listOfId3Insertion = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Id3Insertion(entry, context);
    });
};
const se___listOfInput = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Input(entry, context);
    });
};
const se___listOfInputClipping = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InputClipping(entry, context);
    });
};
const se___listOfInputTemplate = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InputTemplate(entry, context);
    });
};
const se___listOfInsertableImage = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_InsertableImage(entry, context);
    });
};
const se___listOfMsSmoothAdditionalManifest = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MsSmoothAdditionalManifest(entry, context);
    });
};
const se___listOfOutput = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_Output(entry, context);
    });
};
const se___listOfOutputChannelMapping = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_OutputChannelMapping(entry, context);
    });
};
const se___listOfOutputGroup = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_OutputGroup(entry, context);
    });
};
const se___listOfProbeInputFile = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ProbeInputFile(entry, context);
    });
};
const se___listOfVideoOverlay = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_VideoOverlay(entry, context);
    });
};
const se___listOfVideoOverlayInputClipping = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_VideoOverlayInputClipping(entry, context);
    });
};
const se___listOfVideoOverlayTransition = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_VideoOverlayTransition(entry, context);
    });
};
const se___mapOfAudioSelector = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_AudioSelector(value, context);
        return acc;
    }, {});
};
const se___mapOfAudioSelectorGroup = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_AudioSelectorGroup(value, context);
        return acc;
    }, {});
};
const se___mapOfCaptionSelector = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_CaptionSelector(value, context);
        return acc;
    }, {});
};
const se___mapOfDynamicAudioSelector = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_DynamicAudioSelector(value, context);
        return acc;
    }, {});
};
const se_AacSettings = (input, context) => {
    return take(input, {
        audioDescriptionBroadcasterMix: [, , `AudioDescriptionBroadcasterMix`],
        bitrate: [, , `Bitrate`],
        codecProfile: [, , `CodecProfile`],
        codingMode: [, , `CodingMode`],
        rateControlMode: [, , `RateControlMode`],
        rawFormat: [, , `RawFormat`],
        sampleRate: [, , `SampleRate`],
        specification: [, , `Specification`],
        vbrQuality: [, , `VbrQuality`],
    });
};
const se_Ac3Settings = (input, context) => {
    return take(input, {
        bitrate: [, , `Bitrate`],
        bitstreamMode: [, , `BitstreamMode`],
        codingMode: [, , `CodingMode`],
        dialnorm: [, , `Dialnorm`],
        dynamicRangeCompressionLine: [, , `DynamicRangeCompressionLine`],
        dynamicRangeCompressionProfile: [, , `DynamicRangeCompressionProfile`],
        dynamicRangeCompressionRf: [, , `DynamicRangeCompressionRf`],
        lfeFilter: [, , `LfeFilter`],
        metadataControl: [, , `MetadataControl`],
        sampleRate: [, , `SampleRate`],
    });
};
const se_AccelerationSettings = (input, context) => {
    return take(input, {
        mode: [, , `Mode`],
    });
};
const se_AdvancedInputFilterSettings = (input, context) => {
    return take(input, {
        addTexture: [, , `AddTexture`],
        sharpening: [, , `Sharpening`],
    });
};
const se_AiffSettings = (input, context) => {
    return take(input, {
        bitDepth: [, , `BitDepth`],
        channels: [, , `Channels`],
        sampleRate: [, , `SampleRate`],
    });
};
const se_AllowedRenditionSize = (input, context) => {
    return take(input, {
        height: [, , `Height`],
        required: [, , `Required`],
        width: [, , `Width`],
    });
};
const se_AncillarySourceSettings = (input, context) => {
    return take(input, {
        convert608To708: [, , `Convert608To708`],
        sourceAncillaryChannelNumber: [, , `SourceAncillaryChannelNumber`],
        terminateCaptions: [, , `TerminateCaptions`],
    });
};
const se_AudioChannelTaggingSettings = (input, context) => {
    return take(input, {
        channelTag: [, , `ChannelTag`],
        channelTags: [, _json, `ChannelTags`],
    });
};
const se_AudioCodecSettings = (input, context) => {
    return take(input, {
        aacSettings: [, (_) => se_AacSettings(_, context), `AacSettings`],
        ac3Settings: [, (_) => se_Ac3Settings(_, context), `Ac3Settings`],
        aiffSettings: [, (_) => se_AiffSettings(_, context), `AiffSettings`],
        codec: [, , `Codec`],
        eac3AtmosSettings: [, (_) => se_Eac3AtmosSettings(_, context), `Eac3AtmosSettings`],
        eac3Settings: [, (_) => se_Eac3Settings(_, context), `Eac3Settings`],
        flacSettings: [, (_) => se_FlacSettings(_, context), `FlacSettings`],
        mp2Settings: [, (_) => se_Mp2Settings(_, context), `Mp2Settings`],
        mp3Settings: [, (_) => se_Mp3Settings(_, context), `Mp3Settings`],
        opusSettings: [, (_) => se_OpusSettings(_, context), `OpusSettings`],
        vorbisSettings: [, (_) => se_VorbisSettings(_, context), `VorbisSettings`],
        wavSettings: [, (_) => se_WavSettings(_, context), `WavSettings`],
    });
};
const se_AudioDescription = (input, context) => {
    return take(input, {
        audioChannelTaggingSettings: [, (_) => se_AudioChannelTaggingSettings(_, context), `AudioChannelTaggingSettings`],
        audioNormalizationSettings: [, (_) => se_AudioNormalizationSettings(_, context), `AudioNormalizationSettings`],
        audioSourceName: [, , `AudioSourceName`],
        audioType: [, , `AudioType`],
        audioTypeControl: [, , `AudioTypeControl`],
        codecSettings: [, (_) => se_AudioCodecSettings(_, context), `CodecSettings`],
        customLanguageCode: [, , `CustomLanguageCode`],
        languageCode: [, , `LanguageCode`],
        languageCodeControl: [, , `LanguageCodeControl`],
        remixSettings: [, (_) => se_RemixSettings(_, context), `RemixSettings`],
        streamName: [, , `StreamName`],
    });
};
const se_AudioNormalizationSettings = (input, context) => {
    return take(input, {
        algorithm: [, , `Algorithm`],
        algorithmControl: [, , `AlgorithmControl`],
        correctionGateLevel: [, , `CorrectionGateLevel`],
        loudnessLogging: [, , `LoudnessLogging`],
        peakCalculation: [, , `PeakCalculation`],
        targetLkfs: [, __serializeFloat, `TargetLkfs`],
        truePeakLimiterThreshold: [, __serializeFloat, `TruePeakLimiterThreshold`],
    });
};
const se_AudioSelector = (input, context) => {
    return take(input, {
        audioDurationCorrection: [, , `AudioDurationCorrection`],
        customLanguageCode: [, , `CustomLanguageCode`],
        defaultSelection: [, , `DefaultSelection`],
        externalAudioFileInput: [, , `ExternalAudioFileInput`],
        hlsRenditionGroupSettings: [, (_) => se_HlsRenditionGroupSettings(_, context), `HlsRenditionGroupSettings`],
        languageCode: [, , `LanguageCode`],
        offset: [, , `Offset`],
        pids: [, _json, `Pids`],
        programSelection: [, , `ProgramSelection`],
        remixSettings: [, (_) => se_RemixSettings(_, context), `RemixSettings`],
        selectorType: [, , `SelectorType`],
        tracks: [, _json, `Tracks`],
    });
};
const se_AudioSelectorGroup = (input, context) => {
    return take(input, {
        audioSelectorNames: [, _json, `AudioSelectorNames`],
    });
};
const se_AutomatedAbrRule = (input, context) => {
    return take(input, {
        allowedRenditions: [, (_) => se___listOfAllowedRenditionSize(_, context), `AllowedRenditions`],
        forceIncludeRenditions: [, (_) => se___listOfForceIncludeRenditionSize(_, context), `ForceIncludeRenditions`],
        minBottomRenditionSize: [, (_) => se_MinBottomRenditionSize(_, context), `MinBottomRenditionSize`],
        minTopRenditionSize: [, (_) => se_MinTopRenditionSize(_, context), `MinTopRenditionSize`],
        type: [, , `Type`],
    });
};
const se_AutomatedAbrSettings = (input, context) => {
    return take(input, {
        maxAbrBitrate: [, , `MaxAbrBitrate`],
        maxQualityLevel: [, __serializeFloat, `MaxQualityLevel`],
        maxRenditions: [, , `MaxRenditions`],
        minAbrBitrate: [, , `MinAbrBitrate`],
        rules: [, (_) => se___listOfAutomatedAbrRule(_, context), `Rules`],
    });
};
const se_AutomatedEncodingSettings = (input, context) => {
    return take(input, {
        abrSettings: [, (_) => se_AutomatedAbrSettings(_, context), `AbrSettings`],
    });
};
const se_Av1QvbrSettings = (input, context) => {
    return take(input, {
        qvbrQualityLevel: [, , `QvbrQualityLevel`],
        qvbrQualityLevelFineTune: [, __serializeFloat, `QvbrQualityLevelFineTune`],
    });
};
const se_Av1Settings = (input, context) => {
    return take(input, {
        adaptiveQuantization: [, , `AdaptiveQuantization`],
        bitDepth: [, , `BitDepth`],
        filmGrainSynthesis: [, , `FilmGrainSynthesis`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopSize: [, __serializeFloat, `GopSize`],
        maxBitrate: [, , `MaxBitrate`],
        numberBFramesBetweenReferenceFrames: [, , `NumberBFramesBetweenReferenceFrames`],
        perFrameMetrics: [, _json, `PerFrameMetrics`],
        qvbrSettings: [, (_) => se_Av1QvbrSettings(_, context), `QvbrSettings`],
        rateControlMode: [, , `RateControlMode`],
        slices: [, , `Slices`],
        spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
    });
};
const se_AvailBlanking = (input, context) => {
    return take(input, {
        availBlankingImage: [, , `AvailBlankingImage`],
    });
};
const se_AvcIntraSettings = (input, context) => {
    return take(input, {
        avcIntraClass: [, , `AvcIntraClass`],
        avcIntraUhdSettings: [, (_) => se_AvcIntraUhdSettings(_, context), `AvcIntraUhdSettings`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        interlaceMode: [, , `InterlaceMode`],
        perFrameMetrics: [, _json, `PerFrameMetrics`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        slowPal: [, , `SlowPal`],
        telecine: [, , `Telecine`],
    });
};
const se_AvcIntraUhdSettings = (input, context) => {
    return take(input, {
        qualityTuningLevel: [, , `QualityTuningLevel`],
    });
};
const se_BandwidthReductionFilter = (input, context) => {
    return take(input, {
        sharpening: [, , `Sharpening`],
        strength: [, , `Strength`],
    });
};
const se_BurninDestinationSettings = (input, context) => {
    return take(input, {
        alignment: [, , `Alignment`],
        applyFontColor: [, , `ApplyFontColor`],
        backgroundColor: [, , `BackgroundColor`],
        backgroundOpacity: [, , `BackgroundOpacity`],
        fallbackFont: [, , `FallbackFont`],
        fontColor: [, , `FontColor`],
        fontFileBold: [, , `FontFileBold`],
        fontFileBoldItalic: [, , `FontFileBoldItalic`],
        fontFileItalic: [, , `FontFileItalic`],
        fontFileRegular: [, , `FontFileRegular`],
        fontOpacity: [, , `FontOpacity`],
        fontResolution: [, , `FontResolution`],
        fontScript: [, , `FontScript`],
        fontSize: [, , `FontSize`],
        hexFontColor: [, , `HexFontColor`],
        outlineColor: [, , `OutlineColor`],
        outlineSize: [, , `OutlineSize`],
        removeRubyReserveAttributes: [, , `RemoveRubyReserveAttributes`],
        shadowColor: [, , `ShadowColor`],
        shadowOpacity: [, , `ShadowOpacity`],
        shadowXOffset: [, , `ShadowXOffset`],
        shadowYOffset: [, , `ShadowYOffset`],
        stylePassthrough: [, , `StylePassthrough`],
        teletextSpacing: [, , `TeletextSpacing`],
        xPosition: [, , `XPosition`],
        yPosition: [, , `YPosition`],
    });
};
const se_CaptionDescription = (input, context) => {
    return take(input, {
        captionSelectorName: [, , `CaptionSelectorName`],
        customLanguageCode: [, , `CustomLanguageCode`],
        destinationSettings: [, (_) => se_CaptionDestinationSettings(_, context), `DestinationSettings`],
        languageCode: [, , `LanguageCode`],
        languageDescription: [, , `LanguageDescription`],
    });
};
const se_CaptionDescriptionPreset = (input, context) => {
    return take(input, {
        customLanguageCode: [, , `CustomLanguageCode`],
        destinationSettings: [, (_) => se_CaptionDestinationSettings(_, context), `DestinationSettings`],
        languageCode: [, , `LanguageCode`],
        languageDescription: [, , `LanguageDescription`],
    });
};
const se_CaptionDestinationSettings = (input, context) => {
    return take(input, {
        burninDestinationSettings: [, (_) => se_BurninDestinationSettings(_, context), `BurninDestinationSettings`],
        destinationType: [, , `DestinationType`],
        dvbSubDestinationSettings: [, (_) => se_DvbSubDestinationSettings(_, context), `DvbSubDestinationSettings`],
        embeddedDestinationSettings: [, (_) => se_EmbeddedDestinationSettings(_, context), `EmbeddedDestinationSettings`],
        imscDestinationSettings: [, (_) => se_ImscDestinationSettings(_, context), `ImscDestinationSettings`],
        sccDestinationSettings: [, (_) => se_SccDestinationSettings(_, context), `SccDestinationSettings`],
        srtDestinationSettings: [, (_) => se_SrtDestinationSettings(_, context), `SrtDestinationSettings`],
        teletextDestinationSettings: [, (_) => se_TeletextDestinationSettings(_, context), `TeletextDestinationSettings`],
        ttmlDestinationSettings: [, (_) => se_TtmlDestinationSettings(_, context), `TtmlDestinationSettings`],
        webvttDestinationSettings: [, (_) => se_WebvttDestinationSettings(_, context), `WebvttDestinationSettings`],
    });
};
const se_CaptionSelector = (input, context) => {
    return take(input, {
        customLanguageCode: [, , `CustomLanguageCode`],
        languageCode: [, , `LanguageCode`],
        sourceSettings: [, (_) => se_CaptionSourceSettings(_, context), `SourceSettings`],
    });
};
const se_CaptionSourceFramerate = (input, context) => {
    return take(input, {
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
    });
};
const se_CaptionSourceSettings = (input, context) => {
    return take(input, {
        ancillarySourceSettings: [, (_) => se_AncillarySourceSettings(_, context), `AncillarySourceSettings`],
        dvbSubSourceSettings: [, (_) => se_DvbSubSourceSettings(_, context), `DvbSubSourceSettings`],
        embeddedSourceSettings: [, (_) => se_EmbeddedSourceSettings(_, context), `EmbeddedSourceSettings`],
        fileSourceSettings: [, (_) => se_FileSourceSettings(_, context), `FileSourceSettings`],
        sourceType: [, , `SourceType`],
        teletextSourceSettings: [, (_) => se_TeletextSourceSettings(_, context), `TeletextSourceSettings`],
        trackSourceSettings: [, (_) => se_TrackSourceSettings(_, context), `TrackSourceSettings`],
        webvttHlsSourceSettings: [, (_) => se_WebvttHlsSourceSettings(_, context), `WebvttHlsSourceSettings`],
    });
};
const se_ChannelMapping = (input, context) => {
    return take(input, {
        outputChannels: [, (_) => se___listOfOutputChannelMapping(_, context), `OutputChannels`],
    });
};
const se_ClipLimits = (input, context) => {
    return take(input, {
        maximumRGBTolerance: [, , `MaximumRGBTolerance`],
        maximumYUV: [, , `MaximumYUV`],
        minimumRGBTolerance: [, , `MinimumRGBTolerance`],
        minimumYUV: [, , `MinimumYUV`],
    });
};
const se_CmafAdditionalManifest = (input, context) => {
    return take(input, {
        manifestNameModifier: [, , `ManifestNameModifier`],
        selectedOutputs: [, _json, `SelectedOutputs`],
    });
};
const se_CmafEncryptionSettings = (input, context) => {
    return take(input, {
        constantInitializationVector: [, , `ConstantInitializationVector`],
        encryptionMethod: [, , `EncryptionMethod`],
        initializationVectorInManifest: [, , `InitializationVectorInManifest`],
        spekeKeyProvider: [, (_) => se_SpekeKeyProviderCmaf(_, context), `SpekeKeyProvider`],
        staticKeyProvider: [, (_) => se_StaticKeyProvider(_, context), `StaticKeyProvider`],
        type: [, , `Type`],
    });
};
const se_CmafGroupSettings = (input, context) => {
    return take(input, {
        additionalManifests: [, (_) => se___listOfCmafAdditionalManifest(_, context), `AdditionalManifests`],
        baseUrl: [, , `BaseUrl`],
        clientCache: [, , `ClientCache`],
        codecSpecification: [, , `CodecSpecification`],
        dashIFrameTrickPlayNameModifier: [, , `DashIFrameTrickPlayNameModifier`],
        dashManifestStyle: [, , `DashManifestStyle`],
        destination: [, , `Destination`],
        destinationSettings: [, (_) => se_DestinationSettings(_, context), `DestinationSettings`],
        encryption: [, (_) => se_CmafEncryptionSettings(_, context), `Encryption`],
        fragmentLength: [, , `FragmentLength`],
        imageBasedTrickPlay: [, , `ImageBasedTrickPlay`],
        imageBasedTrickPlaySettings: [
            ,
            (_) => se_CmafImageBasedTrickPlaySettings(_, context),
            `ImageBasedTrickPlaySettings`,
        ],
        manifestCompression: [, , `ManifestCompression`],
        manifestDurationFormat: [, , `ManifestDurationFormat`],
        minBufferTime: [, , `MinBufferTime`],
        minFinalSegmentLength: [, __serializeFloat, `MinFinalSegmentLength`],
        mpdManifestBandwidthType: [, , `MpdManifestBandwidthType`],
        mpdProfile: [, , `MpdProfile`],
        ptsOffsetHandlingForBFrames: [, , `PtsOffsetHandlingForBFrames`],
        segmentControl: [, , `SegmentControl`],
        segmentLength: [, , `SegmentLength`],
        segmentLengthControl: [, , `SegmentLengthControl`],
        streamInfResolution: [, , `StreamInfResolution`],
        targetDurationCompatibilityMode: [, , `TargetDurationCompatibilityMode`],
        videoCompositionOffsets: [, , `VideoCompositionOffsets`],
        writeDashManifest: [, , `WriteDashManifest`],
        writeHlsManifest: [, , `WriteHlsManifest`],
        writeSegmentTimelineInRepresentation: [, , `WriteSegmentTimelineInRepresentation`],
    });
};
const se_CmafImageBasedTrickPlaySettings = (input, context) => {
    return take(input, {
        intervalCadence: [, , `IntervalCadence`],
        thumbnailHeight: [, , `ThumbnailHeight`],
        thumbnailInterval: [, __serializeFloat, `ThumbnailInterval`],
        thumbnailWidth: [, , `ThumbnailWidth`],
        tileHeight: [, , `TileHeight`],
        tileWidth: [, , `TileWidth`],
    });
};
const se_CmfcSettings = (input, context) => {
    return take(input, {
        audioDuration: [, , `AudioDuration`],
        audioGroupId: [, , `AudioGroupId`],
        audioRenditionSets: [, , `AudioRenditionSets`],
        audioTrackType: [, , `AudioTrackType`],
        descriptiveVideoServiceFlag: [, , `DescriptiveVideoServiceFlag`],
        iFrameOnlyManifest: [, , `IFrameOnlyManifest`],
        klvMetadata: [, , `KlvMetadata`],
        manifestMetadataSignaling: [, , `ManifestMetadataSignaling`],
        scte35Esam: [, , `Scte35Esam`],
        scte35Source: [, , `Scte35Source`],
        timedMetadata: [, , `TimedMetadata`],
        timedMetadataBoxVersion: [, , `TimedMetadataBoxVersion`],
        timedMetadataSchemeIdUri: [, , `TimedMetadataSchemeIdUri`],
        timedMetadataValue: [, , `TimedMetadataValue`],
    });
};
const se_ColorConversion3DLUTSetting = (input, context) => {
    return take(input, {
        fileInput: [, , `FileInput`],
        inputColorSpace: [, , `InputColorSpace`],
        inputMasteringLuminance: [, , `InputMasteringLuminance`],
        outputColorSpace: [, , `OutputColorSpace`],
        outputMasteringLuminance: [, , `OutputMasteringLuminance`],
    });
};
const se_ColorCorrector = (input, context) => {
    return take(input, {
        brightness: [, , `Brightness`],
        clipLimits: [, (_) => se_ClipLimits(_, context), `ClipLimits`],
        colorSpaceConversion: [, , `ColorSpaceConversion`],
        contrast: [, , `Contrast`],
        hdr10Metadata: [, (_) => se_Hdr10Metadata(_, context), `Hdr10Metadata`],
        hdrToSdrToneMapper: [, , `HdrToSdrToneMapper`],
        hue: [, , `Hue`],
        maxLuminance: [, , `MaxLuminance`],
        sampleRangeConversion: [, , `SampleRangeConversion`],
        saturation: [, , `Saturation`],
        sdrReferenceWhiteLevel: [, , `SdrReferenceWhiteLevel`],
    });
};
const se_ContainerSettings = (input, context) => {
    return take(input, {
        cmfcSettings: [, (_) => se_CmfcSettings(_, context), `CmfcSettings`],
        container: [, , `Container`],
        f4vSettings: [, (_) => se_F4vSettings(_, context), `F4vSettings`],
        m2tsSettings: [, (_) => se_M2tsSettings(_, context), `M2tsSettings`],
        m3u8Settings: [, (_) => se_M3u8Settings(_, context), `M3u8Settings`],
        movSettings: [, (_) => se_MovSettings(_, context), `MovSettings`],
        mp4Settings: [, (_) => se_Mp4Settings(_, context), `Mp4Settings`],
        mpdSettings: [, (_) => se_MpdSettings(_, context), `MpdSettings`],
        mxfSettings: [, (_) => se_MxfSettings(_, context), `MxfSettings`],
    });
};
const se_DashAdditionalManifest = (input, context) => {
    return take(input, {
        manifestNameModifier: [, , `ManifestNameModifier`],
        selectedOutputs: [, _json, `SelectedOutputs`],
    });
};
const se_DashIsoEncryptionSettings = (input, context) => {
    return take(input, {
        playbackDeviceCompatibility: [, , `PlaybackDeviceCompatibility`],
        spekeKeyProvider: [, (_) => se_SpekeKeyProvider(_, context), `SpekeKeyProvider`],
    });
};
const se_DashIsoGroupSettings = (input, context) => {
    return take(input, {
        additionalManifests: [, (_) => se___listOfDashAdditionalManifest(_, context), `AdditionalManifests`],
        audioChannelConfigSchemeIdUri: [, , `AudioChannelConfigSchemeIdUri`],
        baseUrl: [, , `BaseUrl`],
        dashIFrameTrickPlayNameModifier: [, , `DashIFrameTrickPlayNameModifier`],
        dashManifestStyle: [, , `DashManifestStyle`],
        destination: [, , `Destination`],
        destinationSettings: [, (_) => se_DestinationSettings(_, context), `DestinationSettings`],
        encryption: [, (_) => se_DashIsoEncryptionSettings(_, context), `Encryption`],
        fragmentLength: [, , `FragmentLength`],
        hbbtvCompliance: [, , `HbbtvCompliance`],
        imageBasedTrickPlay: [, , `ImageBasedTrickPlay`],
        imageBasedTrickPlaySettings: [
            ,
            (_) => se_DashIsoImageBasedTrickPlaySettings(_, context),
            `ImageBasedTrickPlaySettings`,
        ],
        minBufferTime: [, , `MinBufferTime`],
        minFinalSegmentLength: [, __serializeFloat, `MinFinalSegmentLength`],
        mpdManifestBandwidthType: [, , `MpdManifestBandwidthType`],
        mpdProfile: [, , `MpdProfile`],
        ptsOffsetHandlingForBFrames: [, , `PtsOffsetHandlingForBFrames`],
        segmentControl: [, , `SegmentControl`],
        segmentLength: [, , `SegmentLength`],
        segmentLengthControl: [, , `SegmentLengthControl`],
        videoCompositionOffsets: [, , `VideoCompositionOffsets`],
        writeSegmentTimelineInRepresentation: [, , `WriteSegmentTimelineInRepresentation`],
    });
};
const se_DashIsoImageBasedTrickPlaySettings = (input, context) => {
    return take(input, {
        intervalCadence: [, , `IntervalCadence`],
        thumbnailHeight: [, , `ThumbnailHeight`],
        thumbnailInterval: [, __serializeFloat, `ThumbnailInterval`],
        thumbnailWidth: [, , `ThumbnailWidth`],
        tileHeight: [, , `TileHeight`],
        tileWidth: [, , `TileWidth`],
    });
};
const se_Deinterlacer = (input, context) => {
    return take(input, {
        algorithm: [, , `Algorithm`],
        control: [, , `Control`],
        mode: [, , `Mode`],
    });
};
const se_DestinationSettings = (input, context) => {
    return take(input, {
        s3Settings: [, (_) => se_S3DestinationSettings(_, context), `S3Settings`],
    });
};
const se_DolbyVision = (input, context) => {
    return take(input, {
        l6Metadata: [, (_) => se_DolbyVisionLevel6Metadata(_, context), `L6Metadata`],
        l6Mode: [, , `L6Mode`],
        mapping: [, , `Mapping`],
        profile: [, , `Profile`],
    });
};
const se_DolbyVisionLevel6Metadata = (input, context) => {
    return take(input, {
        maxCll: [, , `MaxCll`],
        maxFall: [, , `MaxFall`],
    });
};
const se_DvbNitSettings = (input, context) => {
    return take(input, {
        networkId: [, , `NetworkId`],
        networkName: [, , `NetworkName`],
        nitInterval: [, , `NitInterval`],
    });
};
const se_DvbSdtSettings = (input, context) => {
    return take(input, {
        outputSdt: [, , `OutputSdt`],
        sdtInterval: [, , `SdtInterval`],
        serviceName: [, , `ServiceName`],
        serviceProviderName: [, , `ServiceProviderName`],
    });
};
const se_DvbSubDestinationSettings = (input, context) => {
    return take(input, {
        alignment: [, , `Alignment`],
        applyFontColor: [, , `ApplyFontColor`],
        backgroundColor: [, , `BackgroundColor`],
        backgroundOpacity: [, , `BackgroundOpacity`],
        ddsHandling: [, , `DdsHandling`],
        ddsXCoordinate: [, , `DdsXCoordinate`],
        ddsYCoordinate: [, , `DdsYCoordinate`],
        fallbackFont: [, , `FallbackFont`],
        fontColor: [, , `FontColor`],
        fontFileBold: [, , `FontFileBold`],
        fontFileBoldItalic: [, , `FontFileBoldItalic`],
        fontFileItalic: [, , `FontFileItalic`],
        fontFileRegular: [, , `FontFileRegular`],
        fontOpacity: [, , `FontOpacity`],
        fontResolution: [, , `FontResolution`],
        fontScript: [, , `FontScript`],
        fontSize: [, , `FontSize`],
        height: [, , `Height`],
        hexFontColor: [, , `HexFontColor`],
        outlineColor: [, , `OutlineColor`],
        outlineSize: [, , `OutlineSize`],
        shadowColor: [, , `ShadowColor`],
        shadowOpacity: [, , `ShadowOpacity`],
        shadowXOffset: [, , `ShadowXOffset`],
        shadowYOffset: [, , `ShadowYOffset`],
        stylePassthrough: [, , `StylePassthrough`],
        subtitlingType: [, , `SubtitlingType`],
        teletextSpacing: [, , `TeletextSpacing`],
        width: [, , `Width`],
        xPosition: [, , `XPosition`],
        yPosition: [, , `YPosition`],
    });
};
const se_DvbSubSourceSettings = (input, context) => {
    return take(input, {
        pid: [, , `Pid`],
    });
};
const se_DvbTdtSettings = (input, context) => {
    return take(input, {
        tdtInterval: [, , `TdtInterval`],
    });
};
const se_DynamicAudioSelector = (input, context) => {
    return take(input, {
        audioDurationCorrection: [, , `AudioDurationCorrection`],
        externalAudioFileInput: [, , `ExternalAudioFileInput`],
        languageCode: [, , `LanguageCode`],
        offset: [, , `Offset`],
        selectorType: [, , `SelectorType`],
    });
};
const se_Eac3AtmosSettings = (input, context) => {
    return take(input, {
        bitrate: [, , `Bitrate`],
        bitstreamMode: [, , `BitstreamMode`],
        codingMode: [, , `CodingMode`],
        dialogueIntelligence: [, , `DialogueIntelligence`],
        downmixControl: [, , `DownmixControl`],
        dynamicRangeCompressionLine: [, , `DynamicRangeCompressionLine`],
        dynamicRangeCompressionRf: [, , `DynamicRangeCompressionRf`],
        dynamicRangeControl: [, , `DynamicRangeControl`],
        loRoCenterMixLevel: [, __serializeFloat, `LoRoCenterMixLevel`],
        loRoSurroundMixLevel: [, __serializeFloat, `LoRoSurroundMixLevel`],
        ltRtCenterMixLevel: [, __serializeFloat, `LtRtCenterMixLevel`],
        ltRtSurroundMixLevel: [, __serializeFloat, `LtRtSurroundMixLevel`],
        meteringMode: [, , `MeteringMode`],
        sampleRate: [, , `SampleRate`],
        speechThreshold: [, , `SpeechThreshold`],
        stereoDownmix: [, , `StereoDownmix`],
        surroundExMode: [, , `SurroundExMode`],
    });
};
const se_Eac3Settings = (input, context) => {
    return take(input, {
        attenuationControl: [, , `AttenuationControl`],
        bitrate: [, , `Bitrate`],
        bitstreamMode: [, , `BitstreamMode`],
        codingMode: [, , `CodingMode`],
        dcFilter: [, , `DcFilter`],
        dialnorm: [, , `Dialnorm`],
        dynamicRangeCompressionLine: [, , `DynamicRangeCompressionLine`],
        dynamicRangeCompressionRf: [, , `DynamicRangeCompressionRf`],
        lfeControl: [, , `LfeControl`],
        lfeFilter: [, , `LfeFilter`],
        loRoCenterMixLevel: [, __serializeFloat, `LoRoCenterMixLevel`],
        loRoSurroundMixLevel: [, __serializeFloat, `LoRoSurroundMixLevel`],
        ltRtCenterMixLevel: [, __serializeFloat, `LtRtCenterMixLevel`],
        ltRtSurroundMixLevel: [, __serializeFloat, `LtRtSurroundMixLevel`],
        metadataControl: [, , `MetadataControl`],
        passthroughControl: [, , `PassthroughControl`],
        phaseControl: [, , `PhaseControl`],
        sampleRate: [, , `SampleRate`],
        stereoDownmix: [, , `StereoDownmix`],
        surroundExMode: [, , `SurroundExMode`],
        surroundMode: [, , `SurroundMode`],
    });
};
const se_EmbeddedDestinationSettings = (input, context) => {
    return take(input, {
        destination608ChannelNumber: [, , `Destination608ChannelNumber`],
        destination708ServiceNumber: [, , `Destination708ServiceNumber`],
    });
};
const se_EmbeddedSourceSettings = (input, context) => {
    return take(input, {
        convert608To708: [, , `Convert608To708`],
        source608ChannelNumber: [, , `Source608ChannelNumber`],
        source608TrackNumber: [, , `Source608TrackNumber`],
        terminateCaptions: [, , `TerminateCaptions`],
    });
};
const se_EncryptionContractConfiguration = (input, context) => {
    return take(input, {
        spekeAudioPreset: [, , `SpekeAudioPreset`],
        spekeVideoPreset: [, , `SpekeVideoPreset`],
    });
};
const se_EsamManifestConfirmConditionNotification = (input, context) => {
    return take(input, {
        mccXml: [, , `MccXml`],
    });
};
const se_EsamSettings = (input, context) => {
    return take(input, {
        manifestConfirmConditionNotification: [
            ,
            (_) => se_EsamManifestConfirmConditionNotification(_, context),
            `ManifestConfirmConditionNotification`,
        ],
        responseSignalPreroll: [, , `ResponseSignalPreroll`],
        signalProcessingNotification: [
            ,
            (_) => se_EsamSignalProcessingNotification(_, context),
            `SignalProcessingNotification`,
        ],
    });
};
const se_EsamSignalProcessingNotification = (input, context) => {
    return take(input, {
        sccXml: [, , `SccXml`],
    });
};
const se_ExtendedDataServices = (input, context) => {
    return take(input, {
        copyProtectionAction: [, , `CopyProtectionAction`],
        vchipAction: [, , `VchipAction`],
    });
};
const se_F4vSettings = (input, context) => {
    return take(input, {
        moovPlacement: [, , `MoovPlacement`],
    });
};
const se_FileGroupSettings = (input, context) => {
    return take(input, {
        destination: [, , `Destination`],
        destinationSettings: [, (_) => se_DestinationSettings(_, context), `DestinationSettings`],
    });
};
const se_FileSourceSettings = (input, context) => {
    return take(input, {
        byteRateLimit: [, , `ByteRateLimit`],
        convert608To708: [, , `Convert608To708`],
        convertPaintToPop: [, , `ConvertPaintToPop`],
        framerate: [, (_) => se_CaptionSourceFramerate(_, context), `Framerate`],
        sourceFile: [, , `SourceFile`],
        timeDelta: [, , `TimeDelta`],
        timeDeltaUnits: [, , `TimeDeltaUnits`],
        upconvertSTLToTeletext: [, , `UpconvertSTLToTeletext`],
    });
};
const se_FlacSettings = (input, context) => {
    return take(input, {
        bitDepth: [, , `BitDepth`],
        channels: [, , `Channels`],
        sampleRate: [, , `SampleRate`],
    });
};
const se_ForceIncludeRenditionSize = (input, context) => {
    return take(input, {
        height: [, , `Height`],
        width: [, , `Width`],
    });
};
const se_FrameCaptureSettings = (input, context) => {
    return take(input, {
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        maxCaptures: [, , `MaxCaptures`],
        quality: [, , `Quality`],
    });
};
const se_GifSettings = (input, context) => {
    return take(input, {
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
    });
};
const se_H264QvbrSettings = (input, context) => {
    return take(input, {
        maxAverageBitrate: [, , `MaxAverageBitrate`],
        qvbrQualityLevel: [, , `QvbrQualityLevel`],
        qvbrQualityLevelFineTune: [, __serializeFloat, `QvbrQualityLevelFineTune`],
    });
};
const se_H264Settings = (input, context) => {
    return take(input, {
        adaptiveQuantization: [, , `AdaptiveQuantization`],
        bandwidthReductionFilter: [, (_) => se_BandwidthReductionFilter(_, context), `BandwidthReductionFilter`],
        bitrate: [, , `Bitrate`],
        codecLevel: [, , `CodecLevel`],
        codecProfile: [, , `CodecProfile`],
        dynamicSubGop: [, , `DynamicSubGop`],
        endOfStreamMarkers: [, , `EndOfStreamMarkers`],
        entropyEncoding: [, , `EntropyEncoding`],
        fieldEncoding: [, , `FieldEncoding`],
        flickerAdaptiveQuantization: [, , `FlickerAdaptiveQuantization`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopBReference: [, , `GopBReference`],
        gopClosedCadence: [, , `GopClosedCadence`],
        gopSize: [, __serializeFloat, `GopSize`],
        gopSizeUnits: [, , `GopSizeUnits`],
        hrdBufferFinalFillPercentage: [, , `HrdBufferFinalFillPercentage`],
        hrdBufferInitialFillPercentage: [, , `HrdBufferInitialFillPercentage`],
        hrdBufferSize: [, , `HrdBufferSize`],
        interlaceMode: [, , `InterlaceMode`],
        maxBitrate: [, , `MaxBitrate`],
        minIInterval: [, , `MinIInterval`],
        numberBFramesBetweenReferenceFrames: [, , `NumberBFramesBetweenReferenceFrames`],
        numberReferenceFrames: [, , `NumberReferenceFrames`],
        parControl: [, , `ParControl`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        perFrameMetrics: [, _json, `PerFrameMetrics`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        qvbrSettings: [, (_) => se_H264QvbrSettings(_, context), `QvbrSettings`],
        rateControlMode: [, , `RateControlMode`],
        repeatPps: [, , `RepeatPps`],
        saliencyAwareEncoding: [, , `SaliencyAwareEncoding`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        sceneChangeDetect: [, , `SceneChangeDetect`],
        slices: [, , `Slices`],
        slowPal: [, , `SlowPal`],
        softness: [, , `Softness`],
        spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
        syntax: [, , `Syntax`],
        telecine: [, , `Telecine`],
        temporalAdaptiveQuantization: [, , `TemporalAdaptiveQuantization`],
        unregisteredSeiTimecode: [, , `UnregisteredSeiTimecode`],
        writeMp4PackagingType: [, , `WriteMp4PackagingType`],
    });
};
const se_H265QvbrSettings = (input, context) => {
    return take(input, {
        maxAverageBitrate: [, , `MaxAverageBitrate`],
        qvbrQualityLevel: [, , `QvbrQualityLevel`],
        qvbrQualityLevelFineTune: [, __serializeFloat, `QvbrQualityLevelFineTune`],
    });
};
const se_H265Settings = (input, context) => {
    return take(input, {
        adaptiveQuantization: [, , `AdaptiveQuantization`],
        alternateTransferFunctionSei: [, , `AlternateTransferFunctionSei`],
        bandwidthReductionFilter: [, (_) => se_BandwidthReductionFilter(_, context), `BandwidthReductionFilter`],
        bitrate: [, , `Bitrate`],
        codecLevel: [, , `CodecLevel`],
        codecProfile: [, , `CodecProfile`],
        deblocking: [, , `Deblocking`],
        dynamicSubGop: [, , `DynamicSubGop`],
        endOfStreamMarkers: [, , `EndOfStreamMarkers`],
        flickerAdaptiveQuantization: [, , `FlickerAdaptiveQuantization`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopBReference: [, , `GopBReference`],
        gopClosedCadence: [, , `GopClosedCadence`],
        gopSize: [, __serializeFloat, `GopSize`],
        gopSizeUnits: [, , `GopSizeUnits`],
        hrdBufferFinalFillPercentage: [, , `HrdBufferFinalFillPercentage`],
        hrdBufferInitialFillPercentage: [, , `HrdBufferInitialFillPercentage`],
        hrdBufferSize: [, , `HrdBufferSize`],
        interlaceMode: [, , `InterlaceMode`],
        maxBitrate: [, , `MaxBitrate`],
        minIInterval: [, , `MinIInterval`],
        numberBFramesBetweenReferenceFrames: [, , `NumberBFramesBetweenReferenceFrames`],
        numberReferenceFrames: [, , `NumberReferenceFrames`],
        parControl: [, , `ParControl`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        perFrameMetrics: [, _json, `PerFrameMetrics`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        qvbrSettings: [, (_) => se_H265QvbrSettings(_, context), `QvbrSettings`],
        rateControlMode: [, , `RateControlMode`],
        sampleAdaptiveOffsetFilterMode: [, , `SampleAdaptiveOffsetFilterMode`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        sceneChangeDetect: [, , `SceneChangeDetect`],
        slices: [, , `Slices`],
        slowPal: [, , `SlowPal`],
        spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
        telecine: [, , `Telecine`],
        temporalAdaptiveQuantization: [, , `TemporalAdaptiveQuantization`],
        temporalIds: [, , `TemporalIds`],
        tiles: [, , `Tiles`],
        unregisteredSeiTimecode: [, , `UnregisteredSeiTimecode`],
        writeMp4PackagingType: [, , `WriteMp4PackagingType`],
    });
};
const se_Hdr10Metadata = (input, context) => {
    return take(input, {
        bluePrimaryX: [, , `BluePrimaryX`],
        bluePrimaryY: [, , `BluePrimaryY`],
        greenPrimaryX: [, , `GreenPrimaryX`],
        greenPrimaryY: [, , `GreenPrimaryY`],
        maxContentLightLevel: [, , `MaxContentLightLevel`],
        maxFrameAverageLightLevel: [, , `MaxFrameAverageLightLevel`],
        maxLuminance: [, , `MaxLuminance`],
        minLuminance: [, , `MinLuminance`],
        redPrimaryX: [, , `RedPrimaryX`],
        redPrimaryY: [, , `RedPrimaryY`],
        whitePointX: [, , `WhitePointX`],
        whitePointY: [, , `WhitePointY`],
    });
};
const se_Hdr10Plus = (input, context) => {
    return take(input, {
        masteringMonitorNits: [, , `MasteringMonitorNits`],
        targetMonitorNits: [, , `TargetMonitorNits`],
    });
};
const se_HlsAdditionalManifest = (input, context) => {
    return take(input, {
        manifestNameModifier: [, , `ManifestNameModifier`],
        selectedOutputs: [, _json, `SelectedOutputs`],
    });
};
const se_HlsCaptionLanguageMapping = (input, context) => {
    return take(input, {
        captionChannel: [, , `CaptionChannel`],
        customLanguageCode: [, , `CustomLanguageCode`],
        languageCode: [, , `LanguageCode`],
        languageDescription: [, , `LanguageDescription`],
    });
};
const se_HlsEncryptionSettings = (input, context) => {
    return take(input, {
        constantInitializationVector: [, , `ConstantInitializationVector`],
        encryptionMethod: [, , `EncryptionMethod`],
        initializationVectorInManifest: [, , `InitializationVectorInManifest`],
        offlineEncrypted: [, , `OfflineEncrypted`],
        spekeKeyProvider: [, (_) => se_SpekeKeyProvider(_, context), `SpekeKeyProvider`],
        staticKeyProvider: [, (_) => se_StaticKeyProvider(_, context), `StaticKeyProvider`],
        type: [, , `Type`],
    });
};
const se_HlsGroupSettings = (input, context) => {
    return take(input, {
        adMarkers: [, _json, `AdMarkers`],
        additionalManifests: [, (_) => se___listOfHlsAdditionalManifest(_, context), `AdditionalManifests`],
        audioOnlyHeader: [, , `AudioOnlyHeader`],
        baseUrl: [, , `BaseUrl`],
        captionLanguageMappings: [, (_) => se___listOfHlsCaptionLanguageMapping(_, context), `CaptionLanguageMappings`],
        captionLanguageSetting: [, , `CaptionLanguageSetting`],
        captionSegmentLengthControl: [, , `CaptionSegmentLengthControl`],
        clientCache: [, , `ClientCache`],
        codecSpecification: [, , `CodecSpecification`],
        destination: [, , `Destination`],
        destinationSettings: [, (_) => se_DestinationSettings(_, context), `DestinationSettings`],
        directoryStructure: [, , `DirectoryStructure`],
        encryption: [, (_) => se_HlsEncryptionSettings(_, context), `Encryption`],
        imageBasedTrickPlay: [, , `ImageBasedTrickPlay`],
        imageBasedTrickPlaySettings: [
            ,
            (_) => se_HlsImageBasedTrickPlaySettings(_, context),
            `ImageBasedTrickPlaySettings`,
        ],
        manifestCompression: [, , `ManifestCompression`],
        manifestDurationFormat: [, , `ManifestDurationFormat`],
        minFinalSegmentLength: [, __serializeFloat, `MinFinalSegmentLength`],
        minSegmentLength: [, , `MinSegmentLength`],
        outputSelection: [, , `OutputSelection`],
        programDateTime: [, , `ProgramDateTime`],
        programDateTimePeriod: [, , `ProgramDateTimePeriod`],
        progressiveWriteHlsManifest: [, , `ProgressiveWriteHlsManifest`],
        segmentControl: [, , `SegmentControl`],
        segmentLength: [, , `SegmentLength`],
        segmentLengthControl: [, , `SegmentLengthControl`],
        segmentsPerSubdirectory: [, , `SegmentsPerSubdirectory`],
        streamInfResolution: [, , `StreamInfResolution`],
        targetDurationCompatibilityMode: [, , `TargetDurationCompatibilityMode`],
        timedMetadataId3Frame: [, , `TimedMetadataId3Frame`],
        timedMetadataId3Period: [, , `TimedMetadataId3Period`],
        timestampDeltaMilliseconds: [, , `TimestampDeltaMilliseconds`],
    });
};
const se_HlsImageBasedTrickPlaySettings = (input, context) => {
    return take(input, {
        intervalCadence: [, , `IntervalCadence`],
        thumbnailHeight: [, , `ThumbnailHeight`],
        thumbnailInterval: [, __serializeFloat, `ThumbnailInterval`],
        thumbnailWidth: [, , `ThumbnailWidth`],
        tileHeight: [, , `TileHeight`],
        tileWidth: [, , `TileWidth`],
    });
};
const se_HlsRenditionGroupSettings = (input, context) => {
    return take(input, {
        renditionGroupId: [, , `RenditionGroupId`],
        renditionLanguageCode: [, , `RenditionLanguageCode`],
        renditionName: [, , `RenditionName`],
    });
};
const se_HlsSettings = (input, context) => {
    return take(input, {
        audioGroupId: [, , `AudioGroupId`],
        audioOnlyContainer: [, , `AudioOnlyContainer`],
        audioRenditionSets: [, , `AudioRenditionSets`],
        audioTrackType: [, , `AudioTrackType`],
        descriptiveVideoServiceFlag: [, , `DescriptiveVideoServiceFlag`],
        iFrameOnlyManifest: [, , `IFrameOnlyManifest`],
        segmentModifier: [, , `SegmentModifier`],
    });
};
const se_HopDestination = (input, context) => {
    return take(input, {
        priority: [, , `Priority`],
        queue: [, , `Queue`],
        waitMinutes: [, , `WaitMinutes`],
    });
};
const se_Id3Insertion = (input, context) => {
    return take(input, {
        id3: [, , `Id3`],
        timecode: [, , `Timecode`],
    });
};
const se_ImageInserter = (input, context) => {
    return take(input, {
        insertableImages: [, (_) => se___listOfInsertableImage(_, context), `InsertableImages`],
        sdrReferenceWhiteLevel: [, , `SdrReferenceWhiteLevel`],
    });
};
const se_ImscDestinationSettings = (input, context) => {
    return take(input, {
        accessibility: [, , `Accessibility`],
        stylePassthrough: [, , `StylePassthrough`],
    });
};
const se_Input = (input, context) => {
    return take(input, {
        advancedInputFilter: [, , `AdvancedInputFilter`],
        advancedInputFilterSettings: [, (_) => se_AdvancedInputFilterSettings(_, context), `AdvancedInputFilterSettings`],
        audioSelectorGroups: [, (_) => se___mapOfAudioSelectorGroup(_, context), `AudioSelectorGroups`],
        audioSelectors: [, (_) => se___mapOfAudioSelector(_, context), `AudioSelectors`],
        captionSelectors: [, (_) => se___mapOfCaptionSelector(_, context), `CaptionSelectors`],
        crop: [, (_) => se_Rectangle(_, context), `Crop`],
        deblockFilter: [, , `DeblockFilter`],
        decryptionSettings: [, (_) => se_InputDecryptionSettings(_, context), `DecryptionSettings`],
        denoiseFilter: [, , `DenoiseFilter`],
        dolbyVisionMetadataXml: [, , `DolbyVisionMetadataXml`],
        dynamicAudioSelectors: [, (_) => se___mapOfDynamicAudioSelector(_, context), `DynamicAudioSelectors`],
        fileInput: [, , `FileInput`],
        filterEnable: [, , `FilterEnable`],
        filterStrength: [, , `FilterStrength`],
        imageInserter: [, (_) => se_ImageInserter(_, context), `ImageInserter`],
        inputClippings: [, (_) => se___listOfInputClipping(_, context), `InputClippings`],
        inputScanType: [, , `InputScanType`],
        position: [, (_) => se_Rectangle(_, context), `Position`],
        programNumber: [, , `ProgramNumber`],
        psiControl: [, , `PsiControl`],
        supplementalImps: [, _json, `SupplementalImps`],
        timecodeSource: [, , `TimecodeSource`],
        timecodeStart: [, , `TimecodeStart`],
        videoGenerator: [, (_) => se_InputVideoGenerator(_, context), `VideoGenerator`],
        videoOverlays: [, (_) => se___listOfVideoOverlay(_, context), `VideoOverlays`],
        videoSelector: [, (_) => se_VideoSelector(_, context), `VideoSelector`],
    });
};
const se_InputClipping = (input, context) => {
    return take(input, {
        endTimecode: [, , `EndTimecode`],
        startTimecode: [, , `StartTimecode`],
    });
};
const se_InputDecryptionSettings = (input, context) => {
    return take(input, {
        decryptionMode: [, , `DecryptionMode`],
        encryptedDecryptionKey: [, , `EncryptedDecryptionKey`],
        initializationVector: [, , `InitializationVector`],
        kmsKeyRegion: [, , `KmsKeyRegion`],
    });
};
const se_InputTemplate = (input, context) => {
    return take(input, {
        advancedInputFilter: [, , `AdvancedInputFilter`],
        advancedInputFilterSettings: [, (_) => se_AdvancedInputFilterSettings(_, context), `AdvancedInputFilterSettings`],
        audioSelectorGroups: [, (_) => se___mapOfAudioSelectorGroup(_, context), `AudioSelectorGroups`],
        audioSelectors: [, (_) => se___mapOfAudioSelector(_, context), `AudioSelectors`],
        captionSelectors: [, (_) => se___mapOfCaptionSelector(_, context), `CaptionSelectors`],
        crop: [, (_) => se_Rectangle(_, context), `Crop`],
        deblockFilter: [, , `DeblockFilter`],
        denoiseFilter: [, , `DenoiseFilter`],
        dolbyVisionMetadataXml: [, , `DolbyVisionMetadataXml`],
        dynamicAudioSelectors: [, (_) => se___mapOfDynamicAudioSelector(_, context), `DynamicAudioSelectors`],
        filterEnable: [, , `FilterEnable`],
        filterStrength: [, , `FilterStrength`],
        imageInserter: [, (_) => se_ImageInserter(_, context), `ImageInserter`],
        inputClippings: [, (_) => se___listOfInputClipping(_, context), `InputClippings`],
        inputScanType: [, , `InputScanType`],
        position: [, (_) => se_Rectangle(_, context), `Position`],
        programNumber: [, , `ProgramNumber`],
        psiControl: [, , `PsiControl`],
        timecodeSource: [, , `TimecodeSource`],
        timecodeStart: [, , `TimecodeStart`],
        videoOverlays: [, (_) => se___listOfVideoOverlay(_, context), `VideoOverlays`],
        videoSelector: [, (_) => se_VideoSelector(_, context), `VideoSelector`],
    });
};
const se_InputVideoGenerator = (input, context) => {
    return take(input, {
        channels: [, , `Channels`],
        duration: [, , `Duration`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        sampleRate: [, , `SampleRate`],
    });
};
const se_InsertableImage = (input, context) => {
    return take(input, {
        duration: [, , `Duration`],
        fadeIn: [, , `FadeIn`],
        fadeOut: [, , `FadeOut`],
        height: [, , `Height`],
        imageInserterInput: [, , `ImageInserterInput`],
        imageX: [, , `ImageX`],
        imageY: [, , `ImageY`],
        layer: [, , `Layer`],
        opacity: [, , `Opacity`],
        startTime: [, , `StartTime`],
        width: [, , `Width`],
    });
};
const se_JobSettings = (input, context) => {
    return take(input, {
        adAvailOffset: [, , `AdAvailOffset`],
        availBlanking: [, (_) => se_AvailBlanking(_, context), `AvailBlanking`],
        colorConversion3DLUTSettings: [
            ,
            (_) => se___listOfColorConversion3DLUTSetting(_, context),
            `ColorConversion3DLUTSettings`,
        ],
        esam: [, (_) => se_EsamSettings(_, context), `Esam`],
        extendedDataServices: [, (_) => se_ExtendedDataServices(_, context), `ExtendedDataServices`],
        followSource: [, , `FollowSource`],
        inputs: [, (_) => se___listOfInput(_, context), `Inputs`],
        kantarWatermark: [, (_) => se_KantarWatermarkSettings(_, context), `KantarWatermark`],
        motionImageInserter: [, (_) => se_MotionImageInserter(_, context), `MotionImageInserter`],
        nielsenConfiguration: [, (_) => se_NielsenConfiguration(_, context), `NielsenConfiguration`],
        nielsenNonLinearWatermark: [, (_) => se_NielsenNonLinearWatermarkSettings(_, context), `NielsenNonLinearWatermark`],
        outputGroups: [, (_) => se___listOfOutputGroup(_, context), `OutputGroups`],
        timecodeConfig: [, (_) => se_TimecodeConfig(_, context), `TimecodeConfig`],
        timedMetadataInsertion: [, (_) => se_TimedMetadataInsertion(_, context), `TimedMetadataInsertion`],
    });
};
const se_JobTemplateSettings = (input, context) => {
    return take(input, {
        adAvailOffset: [, , `AdAvailOffset`],
        availBlanking: [, (_) => se_AvailBlanking(_, context), `AvailBlanking`],
        colorConversion3DLUTSettings: [
            ,
            (_) => se___listOfColorConversion3DLUTSetting(_, context),
            `ColorConversion3DLUTSettings`,
        ],
        esam: [, (_) => se_EsamSettings(_, context), `Esam`],
        extendedDataServices: [, (_) => se_ExtendedDataServices(_, context), `ExtendedDataServices`],
        followSource: [, , `FollowSource`],
        inputs: [, (_) => se___listOfInputTemplate(_, context), `Inputs`],
        kantarWatermark: [, (_) => se_KantarWatermarkSettings(_, context), `KantarWatermark`],
        motionImageInserter: [, (_) => se_MotionImageInserter(_, context), `MotionImageInserter`],
        nielsenConfiguration: [, (_) => se_NielsenConfiguration(_, context), `NielsenConfiguration`],
        nielsenNonLinearWatermark: [, (_) => se_NielsenNonLinearWatermarkSettings(_, context), `NielsenNonLinearWatermark`],
        outputGroups: [, (_) => se___listOfOutputGroup(_, context), `OutputGroups`],
        timecodeConfig: [, (_) => se_TimecodeConfig(_, context), `TimecodeConfig`],
        timedMetadataInsertion: [, (_) => se_TimedMetadataInsertion(_, context), `TimedMetadataInsertion`],
    });
};
const se_KantarWatermarkSettings = (input, context) => {
    return take(input, {
        channelName: [, , `ChannelName`],
        contentReference: [, , `ContentReference`],
        credentialsSecretName: [, , `CredentialsSecretName`],
        fileOffset: [, __serializeFloat, `FileOffset`],
        kantarLicenseId: [, , `KantarLicenseId`],
        kantarServerUrl: [, , `KantarServerUrl`],
        logDestination: [, , `LogDestination`],
        metadata3: [, , `Metadata3`],
        metadata4: [, , `Metadata4`],
        metadata5: [, , `Metadata5`],
        metadata6: [, , `Metadata6`],
        metadata7: [, , `Metadata7`],
        metadata8: [, , `Metadata8`],
    });
};
const se_M2tsScte35Esam = (input, context) => {
    return take(input, {
        scte35EsamPid: [, , `Scte35EsamPid`],
    });
};
const se_M2tsSettings = (input, context) => {
    return take(input, {
        audioBufferModel: [, , `AudioBufferModel`],
        audioDuration: [, , `AudioDuration`],
        audioFramesPerPes: [, , `AudioFramesPerPes`],
        audioPids: [, _json, `AudioPids`],
        audioPtsOffsetDelta: [, , `AudioPtsOffsetDelta`],
        bitrate: [, , `Bitrate`],
        bufferModel: [, , `BufferModel`],
        dataPTSControl: [, , `DataPTSControl`],
        dvbNitSettings: [, (_) => se_DvbNitSettings(_, context), `DvbNitSettings`],
        dvbSdtSettings: [, (_) => se_DvbSdtSettings(_, context), `DvbSdtSettings`],
        dvbSubPids: [, _json, `DvbSubPids`],
        dvbTdtSettings: [, (_) => se_DvbTdtSettings(_, context), `DvbTdtSettings`],
        dvbTeletextPid: [, , `DvbTeletextPid`],
        ebpAudioInterval: [, , `EbpAudioInterval`],
        ebpPlacement: [, , `EbpPlacement`],
        esRateInPes: [, , `EsRateInPes`],
        forceTsVideoEbpOrder: [, , `ForceTsVideoEbpOrder`],
        fragmentTime: [, __serializeFloat, `FragmentTime`],
        klvMetadata: [, , `KlvMetadata`],
        maxPcrInterval: [, , `MaxPcrInterval`],
        minEbpInterval: [, , `MinEbpInterval`],
        nielsenId3: [, , `NielsenId3`],
        nullPacketBitrate: [, __serializeFloat, `NullPacketBitrate`],
        patInterval: [, , `PatInterval`],
        pcrControl: [, , `PcrControl`],
        pcrPid: [, , `PcrPid`],
        pmtInterval: [, , `PmtInterval`],
        pmtPid: [, , `PmtPid`],
        preventBufferUnderflow: [, , `PreventBufferUnderflow`],
        privateMetadataPid: [, , `PrivateMetadataPid`],
        programNumber: [, , `ProgramNumber`],
        ptsOffset: [, , `PtsOffset`],
        ptsOffsetMode: [, , `PtsOffsetMode`],
        rateMode: [, , `RateMode`],
        scte35Esam: [, (_) => se_M2tsScte35Esam(_, context), `Scte35Esam`],
        scte35Pid: [, , `Scte35Pid`],
        scte35Source: [, , `Scte35Source`],
        segmentationMarkers: [, , `SegmentationMarkers`],
        segmentationStyle: [, , `SegmentationStyle`],
        segmentationTime: [, __serializeFloat, `SegmentationTime`],
        timedMetadataPid: [, , `TimedMetadataPid`],
        transportStreamId: [, , `TransportStreamId`],
        videoPid: [, , `VideoPid`],
    });
};
const se_M3u8Settings = (input, context) => {
    return take(input, {
        audioDuration: [, , `AudioDuration`],
        audioFramesPerPes: [, , `AudioFramesPerPes`],
        audioPids: [, _json, `AudioPids`],
        audioPtsOffsetDelta: [, , `AudioPtsOffsetDelta`],
        dataPTSControl: [, , `DataPTSControl`],
        maxPcrInterval: [, , `MaxPcrInterval`],
        nielsenId3: [, , `NielsenId3`],
        patInterval: [, , `PatInterval`],
        pcrControl: [, , `PcrControl`],
        pcrPid: [, , `PcrPid`],
        pmtInterval: [, , `PmtInterval`],
        pmtPid: [, , `PmtPid`],
        privateMetadataPid: [, , `PrivateMetadataPid`],
        programNumber: [, , `ProgramNumber`],
        ptsOffset: [, , `PtsOffset`],
        ptsOffsetMode: [, , `PtsOffsetMode`],
        scte35Pid: [, , `Scte35Pid`],
        scte35Source: [, , `Scte35Source`],
        timedMetadata: [, , `TimedMetadata`],
        timedMetadataPid: [, , `TimedMetadataPid`],
        transportStreamId: [, , `TransportStreamId`],
        videoPid: [, , `VideoPid`],
    });
};
const se_MinBottomRenditionSize = (input, context) => {
    return take(input, {
        height: [, , `Height`],
        width: [, , `Width`],
    });
};
const se_MinTopRenditionSize = (input, context) => {
    return take(input, {
        height: [, , `Height`],
        width: [, , `Width`],
    });
};
const se_MotionImageInserter = (input, context) => {
    return take(input, {
        framerate: [, (_) => se_MotionImageInsertionFramerate(_, context), `Framerate`],
        input: [, , `Input`],
        insertionMode: [, , `InsertionMode`],
        offset: [, (_) => se_MotionImageInsertionOffset(_, context), `Offset`],
        playback: [, , `Playback`],
        startTime: [, , `StartTime`],
    });
};
const se_MotionImageInsertionFramerate = (input, context) => {
    return take(input, {
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
    });
};
const se_MotionImageInsertionOffset = (input, context) => {
    return take(input, {
        imageX: [, , `ImageX`],
        imageY: [, , `ImageY`],
    });
};
const se_MovSettings = (input, context) => {
    return take(input, {
        clapAtom: [, , `ClapAtom`],
        cslgAtom: [, , `CslgAtom`],
        mpeg2FourCCControl: [, , `Mpeg2FourCCControl`],
        paddingControl: [, , `PaddingControl`],
        reference: [, , `Reference`],
    });
};
const se_Mp2Settings = (input, context) => {
    return take(input, {
        bitrate: [, , `Bitrate`],
        channels: [, , `Channels`],
        sampleRate: [, , `SampleRate`],
    });
};
const se_Mp3Settings = (input, context) => {
    return take(input, {
        bitrate: [, , `Bitrate`],
        channels: [, , `Channels`],
        rateControlMode: [, , `RateControlMode`],
        sampleRate: [, , `SampleRate`],
        vbrQuality: [, , `VbrQuality`],
    });
};
const se_Mp4Settings = (input, context) => {
    return take(input, {
        audioDuration: [, , `AudioDuration`],
        cslgAtom: [, , `CslgAtom`],
        cttsVersion: [, , `CttsVersion`],
        freeSpaceBox: [, , `FreeSpaceBox`],
        moovPlacement: [, , `MoovPlacement`],
        mp4MajorBrand: [, , `Mp4MajorBrand`],
    });
};
const se_MpdSettings = (input, context) => {
    return take(input, {
        accessibilityCaptionHints: [, , `AccessibilityCaptionHints`],
        audioDuration: [, , `AudioDuration`],
        captionContainerType: [, , `CaptionContainerType`],
        klvMetadata: [, , `KlvMetadata`],
        manifestMetadataSignaling: [, , `ManifestMetadataSignaling`],
        scte35Esam: [, , `Scte35Esam`],
        scte35Source: [, , `Scte35Source`],
        timedMetadata: [, , `TimedMetadata`],
        timedMetadataBoxVersion: [, , `TimedMetadataBoxVersion`],
        timedMetadataSchemeIdUri: [, , `TimedMetadataSchemeIdUri`],
        timedMetadataValue: [, , `TimedMetadataValue`],
    });
};
const se_Mpeg2Settings = (input, context) => {
    return take(input, {
        adaptiveQuantization: [, , `AdaptiveQuantization`],
        bitrate: [, , `Bitrate`],
        codecLevel: [, , `CodecLevel`],
        codecProfile: [, , `CodecProfile`],
        dynamicSubGop: [, , `DynamicSubGop`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopClosedCadence: [, , `GopClosedCadence`],
        gopSize: [, __serializeFloat, `GopSize`],
        gopSizeUnits: [, , `GopSizeUnits`],
        hrdBufferFinalFillPercentage: [, , `HrdBufferFinalFillPercentage`],
        hrdBufferInitialFillPercentage: [, , `HrdBufferInitialFillPercentage`],
        hrdBufferSize: [, , `HrdBufferSize`],
        interlaceMode: [, , `InterlaceMode`],
        intraDcPrecision: [, , `IntraDcPrecision`],
        maxBitrate: [, , `MaxBitrate`],
        minIInterval: [, , `MinIInterval`],
        numberBFramesBetweenReferenceFrames: [, , `NumberBFramesBetweenReferenceFrames`],
        parControl: [, , `ParControl`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        perFrameMetrics: [, _json, `PerFrameMetrics`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        rateControlMode: [, , `RateControlMode`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        sceneChangeDetect: [, , `SceneChangeDetect`],
        slowPal: [, , `SlowPal`],
        softness: [, , `Softness`],
        spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
        syntax: [, , `Syntax`],
        telecine: [, , `Telecine`],
        temporalAdaptiveQuantization: [, , `TemporalAdaptiveQuantization`],
    });
};
const se_MsSmoothAdditionalManifest = (input, context) => {
    return take(input, {
        manifestNameModifier: [, , `ManifestNameModifier`],
        selectedOutputs: [, _json, `SelectedOutputs`],
    });
};
const se_MsSmoothEncryptionSettings = (input, context) => {
    return take(input, {
        spekeKeyProvider: [, (_) => se_SpekeKeyProvider(_, context), `SpekeKeyProvider`],
    });
};
const se_MsSmoothGroupSettings = (input, context) => {
    return take(input, {
        additionalManifests: [, (_) => se___listOfMsSmoothAdditionalManifest(_, context), `AdditionalManifests`],
        audioDeduplication: [, , `AudioDeduplication`],
        destination: [, , `Destination`],
        destinationSettings: [, (_) => se_DestinationSettings(_, context), `DestinationSettings`],
        encryption: [, (_) => se_MsSmoothEncryptionSettings(_, context), `Encryption`],
        fragmentLength: [, , `FragmentLength`],
        fragmentLengthControl: [, , `FragmentLengthControl`],
        manifestEncoding: [, , `ManifestEncoding`],
    });
};
const se_MxfSettings = (input, context) => {
    return take(input, {
        afdSignaling: [, , `AfdSignaling`],
        profile: [, , `Profile`],
        xavcProfileSettings: [, (_) => se_MxfXavcProfileSettings(_, context), `XavcProfileSettings`],
    });
};
const se_MxfXavcProfileSettings = (input, context) => {
    return take(input, {
        durationMode: [, , `DurationMode`],
        maxAncDataSize: [, , `MaxAncDataSize`],
    });
};
const se_NexGuardFileMarkerSettings = (input, context) => {
    return take(input, {
        license: [, , `License`],
        payload: [, , `Payload`],
        preset: [, , `Preset`],
        strength: [, , `Strength`],
    });
};
const se_NielsenConfiguration = (input, context) => {
    return take(input, {
        breakoutCode: [, , `BreakoutCode`],
        distributorId: [, , `DistributorId`],
    });
};
const se_NielsenNonLinearWatermarkSettings = (input, context) => {
    return take(input, {
        activeWatermarkProcess: [, , `ActiveWatermarkProcess`],
        adiFilename: [, , `AdiFilename`],
        assetId: [, , `AssetId`],
        assetName: [, , `AssetName`],
        cbetSourceId: [, , `CbetSourceId`],
        episodeId: [, , `EpisodeId`],
        metadataDestination: [, , `MetadataDestination`],
        sourceId: [, , `SourceId`],
        sourceWatermarkStatus: [, , `SourceWatermarkStatus`],
        ticServerUrl: [, , `TicServerUrl`],
        uniqueTicPerAudioTrack: [, , `UniqueTicPerAudioTrack`],
    });
};
const se_NoiseReducer = (input, context) => {
    return take(input, {
        filter: [, , `Filter`],
        filterSettings: [, (_) => se_NoiseReducerFilterSettings(_, context), `FilterSettings`],
        spatialFilterSettings: [, (_) => se_NoiseReducerSpatialFilterSettings(_, context), `SpatialFilterSettings`],
        temporalFilterSettings: [, (_) => se_NoiseReducerTemporalFilterSettings(_, context), `TemporalFilterSettings`],
    });
};
const se_NoiseReducerFilterSettings = (input, context) => {
    return take(input, {
        strength: [, , `Strength`],
    });
};
const se_NoiseReducerSpatialFilterSettings = (input, context) => {
    return take(input, {
        postFilterSharpenStrength: [, , `PostFilterSharpenStrength`],
        speed: [, , `Speed`],
        strength: [, , `Strength`],
    });
};
const se_NoiseReducerTemporalFilterSettings = (input, context) => {
    return take(input, {
        aggressiveMode: [, , `AggressiveMode`],
        postTemporalSharpening: [, , `PostTemporalSharpening`],
        postTemporalSharpeningStrength: [, , `PostTemporalSharpeningStrength`],
        speed: [, , `Speed`],
        strength: [, , `Strength`],
    });
};
const se_OpusSettings = (input, context) => {
    return take(input, {
        bitrate: [, , `Bitrate`],
        channels: [, , `Channels`],
        sampleRate: [, , `SampleRate`],
    });
};
const se_Output = (input, context) => {
    return take(input, {
        audioDescriptions: [, (_) => se___listOfAudioDescription(_, context), `AudioDescriptions`],
        captionDescriptions: [, (_) => se___listOfCaptionDescription(_, context), `CaptionDescriptions`],
        containerSettings: [, (_) => se_ContainerSettings(_, context), `ContainerSettings`],
        extension: [, , `Extension`],
        nameModifier: [, , `NameModifier`],
        outputSettings: [, (_) => se_OutputSettings(_, context), `OutputSettings`],
        preset: [, , `Preset`],
        videoDescription: [, (_) => se_VideoDescription(_, context), `VideoDescription`],
    });
};
const se_OutputChannelMapping = (input, context) => {
    return take(input, {
        inputChannels: [, _json, `InputChannels`],
        inputChannelsFineTune: [, (_) => se___listOf__doubleMinNegative60Max6(_, context), `InputChannelsFineTune`],
    });
};
const se_OutputGroup = (input, context) => {
    return take(input, {
        automatedEncodingSettings: [, (_) => se_AutomatedEncodingSettings(_, context), `AutomatedEncodingSettings`],
        customName: [, , `CustomName`],
        name: [, , `Name`],
        outputGroupSettings: [, (_) => se_OutputGroupSettings(_, context), `OutputGroupSettings`],
        outputs: [, (_) => se___listOfOutput(_, context), `Outputs`],
    });
};
const se_OutputGroupSettings = (input, context) => {
    return take(input, {
        cmafGroupSettings: [, (_) => se_CmafGroupSettings(_, context), `CmafGroupSettings`],
        dashIsoGroupSettings: [, (_) => se_DashIsoGroupSettings(_, context), `DashIsoGroupSettings`],
        fileGroupSettings: [, (_) => se_FileGroupSettings(_, context), `FileGroupSettings`],
        hlsGroupSettings: [, (_) => se_HlsGroupSettings(_, context), `HlsGroupSettings`],
        msSmoothGroupSettings: [, (_) => se_MsSmoothGroupSettings(_, context), `MsSmoothGroupSettings`],
        perFrameMetrics: [, _json, `PerFrameMetrics`],
        type: [, , `Type`],
    });
};
const se_OutputSettings = (input, context) => {
    return take(input, {
        hlsSettings: [, (_) => se_HlsSettings(_, context), `HlsSettings`],
    });
};
const se_PartnerWatermarking = (input, context) => {
    return take(input, {
        nexguardFileMarkerSettings: [, (_) => se_NexGuardFileMarkerSettings(_, context), `NexguardFileMarkerSettings`],
    });
};
const se_Policy = (input, context) => {
    return take(input, {
        httpInputs: [, , `HttpInputs`],
        httpsInputs: [, , `HttpsInputs`],
        s3Inputs: [, , `S3Inputs`],
    });
};
const se_PresetSettings = (input, context) => {
    return take(input, {
        audioDescriptions: [, (_) => se___listOfAudioDescription(_, context), `AudioDescriptions`],
        captionDescriptions: [, (_) => se___listOfCaptionDescriptionPreset(_, context), `CaptionDescriptions`],
        containerSettings: [, (_) => se_ContainerSettings(_, context), `ContainerSettings`],
        videoDescription: [, (_) => se_VideoDescription(_, context), `VideoDescription`],
    });
};
const se_ProbeInputFile = (input, context) => {
    return take(input, {
        fileUrl: [, , `FileUrl`],
    });
};
const se_ProresSettings = (input, context) => {
    return take(input, {
        chromaSampling: [, , `ChromaSampling`],
        codecProfile: [, , `CodecProfile`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        interlaceMode: [, , `InterlaceMode`],
        parControl: [, , `ParControl`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        perFrameMetrics: [, _json, `PerFrameMetrics`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        slowPal: [, , `SlowPal`],
        telecine: [, , `Telecine`],
    });
};
const se_Rectangle = (input, context) => {
    return take(input, {
        height: [, , `Height`],
        width: [, , `Width`],
        x: [, , `X`],
        y: [, , `Y`],
    });
};
const se_RemixSettings = (input, context) => {
    return take(input, {
        audioDescriptionAudioChannel: [, , `AudioDescriptionAudioChannel`],
        audioDescriptionDataChannel: [, , `AudioDescriptionDataChannel`],
        channelMapping: [, (_) => se_ChannelMapping(_, context), `ChannelMapping`],
        channelsIn: [, , `ChannelsIn`],
        channelsOut: [, , `ChannelsOut`],
    });
};
const se_ReservationPlanSettings = (input, context) => {
    return take(input, {
        commitment: [, , `Commitment`],
        renewalType: [, , `RenewalType`],
        reservedSlots: [, , `ReservedSlots`],
    });
};
const se_S3DestinationAccessControl = (input, context) => {
    return take(input, {
        cannedAcl: [, , `CannedAcl`],
    });
};
const se_S3DestinationSettings = (input, context) => {
    return take(input, {
        accessControl: [, (_) => se_S3DestinationAccessControl(_, context), `AccessControl`],
        encryption: [, (_) => se_S3EncryptionSettings(_, context), `Encryption`],
        storageClass: [, , `StorageClass`],
    });
};
const se_S3EncryptionSettings = (input, context) => {
    return take(input, {
        encryptionType: [, , `EncryptionType`],
        kmsEncryptionContext: [, , `KmsEncryptionContext`],
        kmsKeyArn: [, , `KmsKeyArn`],
    });
};
const se_SccDestinationSettings = (input, context) => {
    return take(input, {
        framerate: [, , `Framerate`],
    });
};
const se_SpekeKeyProvider = (input, context) => {
    return take(input, {
        certificateArn: [, , `CertificateArn`],
        encryptionContractConfiguration: [
            ,
            (_) => se_EncryptionContractConfiguration(_, context),
            `EncryptionContractConfiguration`,
        ],
        resourceId: [, , `ResourceId`],
        systemIds: [, _json, `SystemIds`],
        url: [, , `Url`],
    });
};
const se_SpekeKeyProviderCmaf = (input, context) => {
    return take(input, {
        certificateArn: [, , `CertificateArn`],
        dashSignaledSystemIds: [, _json, `DashSignaledSystemIds`],
        encryptionContractConfiguration: [
            ,
            (_) => se_EncryptionContractConfiguration(_, context),
            `EncryptionContractConfiguration`,
        ],
        hlsSignaledSystemIds: [, _json, `HlsSignaledSystemIds`],
        resourceId: [, , `ResourceId`],
        url: [, , `Url`],
    });
};
const se_SrtDestinationSettings = (input, context) => {
    return take(input, {
        stylePassthrough: [, , `StylePassthrough`],
    });
};
const se_StaticKeyProvider = (input, context) => {
    return take(input, {
        keyFormat: [, , `KeyFormat`],
        keyFormatVersions: [, , `KeyFormatVersions`],
        staticKeyValue: [, , `StaticKeyValue`],
        url: [, , `Url`],
    });
};
const se_TeletextDestinationSettings = (input, context) => {
    return take(input, {
        pageNumber: [, , `PageNumber`],
        pageTypes: [, _json, `PageTypes`],
    });
};
const se_TeletextSourceSettings = (input, context) => {
    return take(input, {
        pageNumber: [, , `PageNumber`],
    });
};
const se_TimecodeBurnin = (input, context) => {
    return take(input, {
        fontSize: [, , `FontSize`],
        position: [, , `Position`],
        prefix: [, , `Prefix`],
    });
};
const se_TimecodeConfig = (input, context) => {
    return take(input, {
        anchor: [, , `Anchor`],
        source: [, , `Source`],
        start: [, , `Start`],
        timestampOffset: [, , `TimestampOffset`],
    });
};
const se_TimedMetadataInsertion = (input, context) => {
    return take(input, {
        id3Insertions: [, (_) => se___listOfId3Insertion(_, context), `Id3Insertions`],
    });
};
const se_TrackSourceSettings = (input, context) => {
    return take(input, {
        trackNumber: [, , `TrackNumber`],
    });
};
const se_TtmlDestinationSettings = (input, context) => {
    return take(input, {
        stylePassthrough: [, , `StylePassthrough`],
    });
};
const se_UncompressedSettings = (input, context) => {
    return take(input, {
        fourcc: [, , `Fourcc`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        interlaceMode: [, , `InterlaceMode`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        slowPal: [, , `SlowPal`],
        telecine: [, , `Telecine`],
    });
};
const se_Vc3Settings = (input, context) => {
    return take(input, {
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        interlaceMode: [, , `InterlaceMode`],
        scanTypeConversionMode: [, , `ScanTypeConversionMode`],
        slowPal: [, , `SlowPal`],
        telecine: [, , `Telecine`],
        vc3Class: [, , `Vc3Class`],
    });
};
const se_VideoCodecSettings = (input, context) => {
    return take(input, {
        av1Settings: [, (_) => se_Av1Settings(_, context), `Av1Settings`],
        avcIntraSettings: [, (_) => se_AvcIntraSettings(_, context), `AvcIntraSettings`],
        codec: [, , `Codec`],
        frameCaptureSettings: [, (_) => se_FrameCaptureSettings(_, context), `FrameCaptureSettings`],
        gifSettings: [, (_) => se_GifSettings(_, context), `GifSettings`],
        h264Settings: [, (_) => se_H264Settings(_, context), `H264Settings`],
        h265Settings: [, (_) => se_H265Settings(_, context), `H265Settings`],
        mpeg2Settings: [, (_) => se_Mpeg2Settings(_, context), `Mpeg2Settings`],
        proresSettings: [, (_) => se_ProresSettings(_, context), `ProresSettings`],
        uncompressedSettings: [, (_) => se_UncompressedSettings(_, context), `UncompressedSettings`],
        vc3Settings: [, (_) => se_Vc3Settings(_, context), `Vc3Settings`],
        vp8Settings: [, (_) => se_Vp8Settings(_, context), `Vp8Settings`],
        vp9Settings: [, (_) => se_Vp9Settings(_, context), `Vp9Settings`],
        xavcSettings: [, (_) => se_XavcSettings(_, context), `XavcSettings`],
    });
};
const se_VideoDescription = (input, context) => {
    return take(input, {
        afdSignaling: [, , `AfdSignaling`],
        antiAlias: [, , `AntiAlias`],
        chromaPositionMode: [, , `ChromaPositionMode`],
        codecSettings: [, (_) => se_VideoCodecSettings(_, context), `CodecSettings`],
        colorMetadata: [, , `ColorMetadata`],
        crop: [, (_) => se_Rectangle(_, context), `Crop`],
        dropFrameTimecode: [, , `DropFrameTimecode`],
        fixedAfd: [, , `FixedAfd`],
        height: [, , `Height`],
        position: [, (_) => se_Rectangle(_, context), `Position`],
        respondToAfd: [, , `RespondToAfd`],
        scalingBehavior: [, , `ScalingBehavior`],
        sharpness: [, , `Sharpness`],
        timecodeInsertion: [, , `TimecodeInsertion`],
        timecodeTrack: [, , `TimecodeTrack`],
        videoPreprocessors: [, (_) => se_VideoPreprocessor(_, context), `VideoPreprocessors`],
        width: [, , `Width`],
    });
};
const se_VideoOverlay = (input, context) => {
    return take(input, {
        crop: [, (_) => se_VideoOverlayCrop(_, context), `Crop`],
        endTimecode: [, , `EndTimecode`],
        initialPosition: [, (_) => se_VideoOverlayPosition(_, context), `InitialPosition`],
        input: [, (_) => se_VideoOverlayInput(_, context), `Input`],
        playback: [, , `Playback`],
        startTimecode: [, , `StartTimecode`],
        transitions: [, (_) => se___listOfVideoOverlayTransition(_, context), `Transitions`],
    });
};
const se_VideoOverlayCrop = (input, context) => {
    return take(input, {
        height: [, , `Height`],
        unit: [, , `Unit`],
        width: [, , `Width`],
        x: [, , `X`],
        y: [, , `Y`],
    });
};
const se_VideoOverlayInput = (input, context) => {
    return take(input, {
        fileInput: [, , `FileInput`],
        inputClippings: [, (_) => se___listOfVideoOverlayInputClipping(_, context), `InputClippings`],
        timecodeSource: [, , `TimecodeSource`],
        timecodeStart: [, , `TimecodeStart`],
    });
};
const se_VideoOverlayInputClipping = (input, context) => {
    return take(input, {
        endTimecode: [, , `EndTimecode`],
        startTimecode: [, , `StartTimecode`],
    });
};
const se_VideoOverlayPosition = (input, context) => {
    return take(input, {
        height: [, , `Height`],
        unit: [, , `Unit`],
        width: [, , `Width`],
        xPosition: [, , `XPosition`],
        yPosition: [, , `YPosition`],
    });
};
const se_VideoOverlayTransition = (input, context) => {
    return take(input, {
        endPosition: [, (_) => se_VideoOverlayPosition(_, context), `EndPosition`],
        endTimecode: [, , `EndTimecode`],
        startTimecode: [, , `StartTimecode`],
    });
};
const se_VideoPreprocessor = (input, context) => {
    return take(input, {
        colorCorrector: [, (_) => se_ColorCorrector(_, context), `ColorCorrector`],
        deinterlacer: [, (_) => se_Deinterlacer(_, context), `Deinterlacer`],
        dolbyVision: [, (_) => se_DolbyVision(_, context), `DolbyVision`],
        hdr10Plus: [, (_) => se_Hdr10Plus(_, context), `Hdr10Plus`],
        imageInserter: [, (_) => se_ImageInserter(_, context), `ImageInserter`],
        noiseReducer: [, (_) => se_NoiseReducer(_, context), `NoiseReducer`],
        partnerWatermarking: [, (_) => se_PartnerWatermarking(_, context), `PartnerWatermarking`],
        timecodeBurnin: [, (_) => se_TimecodeBurnin(_, context), `TimecodeBurnin`],
    });
};
const se_VideoSelector = (input, context) => {
    return take(input, {
        alphaBehavior: [, , `AlphaBehavior`],
        colorSpace: [, , `ColorSpace`],
        colorSpaceUsage: [, , `ColorSpaceUsage`],
        embeddedTimecodeOverride: [, , `EmbeddedTimecodeOverride`],
        hdr10Metadata: [, (_) => se_Hdr10Metadata(_, context), `Hdr10Metadata`],
        maxLuminance: [, , `MaxLuminance`],
        padVideo: [, , `PadVideo`],
        pid: [, , `Pid`],
        programNumber: [, , `ProgramNumber`],
        rotate: [, , `Rotate`],
        sampleRange: [, , `SampleRange`],
    });
};
const se_VorbisSettings = (input, context) => {
    return take(input, {
        channels: [, , `Channels`],
        sampleRate: [, , `SampleRate`],
        vbrQuality: [, , `VbrQuality`],
    });
};
const se_Vp8Settings = (input, context) => {
    return take(input, {
        bitrate: [, , `Bitrate`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopSize: [, __serializeFloat, `GopSize`],
        hrdBufferSize: [, , `HrdBufferSize`],
        maxBitrate: [, , `MaxBitrate`],
        parControl: [, , `ParControl`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        rateControlMode: [, , `RateControlMode`],
    });
};
const se_Vp9Settings = (input, context) => {
    return take(input, {
        bitrate: [, , `Bitrate`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        gopSize: [, __serializeFloat, `GopSize`],
        hrdBufferSize: [, , `HrdBufferSize`],
        maxBitrate: [, , `MaxBitrate`],
        parControl: [, , `ParControl`],
        parDenominator: [, , `ParDenominator`],
        parNumerator: [, , `ParNumerator`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        rateControlMode: [, , `RateControlMode`],
    });
};
const se_WavSettings = (input, context) => {
    return take(input, {
        bitDepth: [, , `BitDepth`],
        channels: [, , `Channels`],
        format: [, , `Format`],
        sampleRate: [, , `SampleRate`],
    });
};
const se_WebvttDestinationSettings = (input, context) => {
    return take(input, {
        accessibility: [, , `Accessibility`],
        stylePassthrough: [, , `StylePassthrough`],
    });
};
const se_WebvttHlsSourceSettings = (input, context) => {
    return take(input, {
        renditionGroupId: [, , `RenditionGroupId`],
        renditionLanguageCode: [, , `RenditionLanguageCode`],
        renditionName: [, , `RenditionName`],
    });
};
const se_Xavc4kIntraCbgProfileSettings = (input, context) => {
    return take(input, {
        xavcClass: [, , `XavcClass`],
    });
};
const se_Xavc4kIntraVbrProfileSettings = (input, context) => {
    return take(input, {
        xavcClass: [, , `XavcClass`],
    });
};
const se_Xavc4kProfileSettings = (input, context) => {
    return take(input, {
        bitrateClass: [, , `BitrateClass`],
        codecProfile: [, , `CodecProfile`],
        flickerAdaptiveQuantization: [, , `FlickerAdaptiveQuantization`],
        gopBReference: [, , `GopBReference`],
        gopClosedCadence: [, , `GopClosedCadence`],
        hrdBufferSize: [, , `HrdBufferSize`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        slices: [, , `Slices`],
    });
};
const se_XavcHdIntraCbgProfileSettings = (input, context) => {
    return take(input, {
        xavcClass: [, , `XavcClass`],
    });
};
const se_XavcHdProfileSettings = (input, context) => {
    return take(input, {
        bitrateClass: [, , `BitrateClass`],
        flickerAdaptiveQuantization: [, , `FlickerAdaptiveQuantization`],
        gopBReference: [, , `GopBReference`],
        gopClosedCadence: [, , `GopClosedCadence`],
        hrdBufferSize: [, , `HrdBufferSize`],
        interlaceMode: [, , `InterlaceMode`],
        qualityTuningLevel: [, , `QualityTuningLevel`],
        slices: [, , `Slices`],
        telecine: [, , `Telecine`],
    });
};
const se_XavcSettings = (input, context) => {
    return take(input, {
        adaptiveQuantization: [, , `AdaptiveQuantization`],
        entropyEncoding: [, , `EntropyEncoding`],
        framerateControl: [, , `FramerateControl`],
        framerateConversionAlgorithm: [, , `FramerateConversionAlgorithm`],
        framerateDenominator: [, , `FramerateDenominator`],
        framerateNumerator: [, , `FramerateNumerator`],
        perFrameMetrics: [, _json, `PerFrameMetrics`],
        profile: [, , `Profile`],
        slowPal: [, , `SlowPal`],
        softness: [, , `Softness`],
        spatialAdaptiveQuantization: [, , `SpatialAdaptiveQuantization`],
        temporalAdaptiveQuantization: [, , `TemporalAdaptiveQuantization`],
        xavc4kIntraCbgProfileSettings: [
            ,
            (_) => se_Xavc4kIntraCbgProfileSettings(_, context),
            `Xavc4kIntraCbgProfileSettings`,
        ],
        xavc4kIntraVbrProfileSettings: [
            ,
            (_) => se_Xavc4kIntraVbrProfileSettings(_, context),
            `Xavc4kIntraVbrProfileSettings`,
        ],
        xavc4kProfileSettings: [, (_) => se_Xavc4kProfileSettings(_, context), `Xavc4kProfileSettings`],
        xavcHdIntraCbgProfileSettings: [
            ,
            (_) => se_XavcHdIntraCbgProfileSettings(_, context),
            `XavcHdIntraCbgProfileSettings`,
        ],
        xavcHdProfileSettings: [, (_) => se_XavcHdProfileSettings(_, context), `XavcHdProfileSettings`],
    });
};
const de___listOf__doubleMinNegative60Max6 = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return __limitedParseDouble(entry);
    });
    return retVal;
};
const de___listOfAllowedRenditionSize = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AllowedRenditionSize(entry, context);
    });
    return retVal;
};
const de___listOfAudioDescription = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AudioDescription(entry, context);
    });
    return retVal;
};
const de___listOfAutomatedAbrRule = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutomatedAbrRule(entry, context);
    });
    return retVal;
};
const de___listOfCaptionDescription = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CaptionDescription(entry, context);
    });
    return retVal;
};
const de___listOfCaptionDescriptionPreset = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CaptionDescriptionPreset(entry, context);
    });
    return retVal;
};
const de___listOfCmafAdditionalManifest = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CmafAdditionalManifest(entry, context);
    });
    return retVal;
};
const de___listOfColorConversion3DLUTSetting = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ColorConversion3DLUTSetting(entry, context);
    });
    return retVal;
};
const de___listOfDashAdditionalManifest = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DashAdditionalManifest(entry, context);
    });
    return retVal;
};
const de___listOfEndpoint = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Endpoint(entry, context);
    });
    return retVal;
};
const de___listOfForceIncludeRenditionSize = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ForceIncludeRenditionSize(entry, context);
    });
    return retVal;
};
const de___listOfHlsAdditionalManifest = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HlsAdditionalManifest(entry, context);
    });
    return retVal;
};
const de___listOfHlsCaptionLanguageMapping = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HlsCaptionLanguageMapping(entry, context);
    });
    return retVal;
};
const de___listOfHopDestination = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HopDestination(entry, context);
    });
    return retVal;
};
const de___listOfId3Insertion = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Id3Insertion(entry, context);
    });
    return retVal;
};
const de___listOfInput = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Input(entry, context);
    });
    return retVal;
};
const de___listOfInputClipping = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InputClipping(entry, context);
    });
    return retVal;
};
const de___listOfInputTemplate = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InputTemplate(entry, context);
    });
    return retVal;
};
const de___listOfInsertableImage = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InsertableImage(entry, context);
    });
    return retVal;
};
const de___listOfJob = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Job(entry, context);
    });
    return retVal;
};
const de___listOfJobEngineVersion = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobEngineVersion(entry, context);
    });
    return retVal;
};
const de___listOfJobTemplate = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_JobTemplate(entry, context);
    });
    return retVal;
};
const de___listOfMsSmoothAdditionalManifest = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MsSmoothAdditionalManifest(entry, context);
    });
    return retVal;
};
const de___listOfOutput = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Output(entry, context);
    });
    return retVal;
};
const de___listOfOutputChannelMapping = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutputChannelMapping(entry, context);
    });
    return retVal;
};
const de___listOfOutputDetail = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutputDetail(entry, context);
    });
    return retVal;
};
const de___listOfOutputGroup = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutputGroup(entry, context);
    });
    return retVal;
};
const de___listOfOutputGroupDetail = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutputGroupDetail(entry, context);
    });
    return retVal;
};
const de___listOfPreset = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Preset(entry, context);
    });
    return retVal;
};
const de___listOfProbeResult = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProbeResult(entry, context);
    });
    return retVal;
};
const de___listOfQueue = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Queue(entry, context);
    });
    return retVal;
};
const de___listOfQueueTransition = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_QueueTransition(entry, context);
    });
    return retVal;
};
const de___listOfServiceOverride = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceOverride(entry, context);
    });
    return retVal;
};
const de___listOfTrack = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Track(entry, context);
    });
    return retVal;
};
const de___listOfTrackMapping = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrackMapping(entry, context);
    });
    return retVal;
};
const de___listOfVideoOverlay = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VideoOverlay(entry, context);
    });
    return retVal;
};
const de___listOfVideoOverlayInputClipping = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VideoOverlayInputClipping(entry, context);
    });
    return retVal;
};
const de___listOfVideoOverlayTransition = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VideoOverlayTransition(entry, context);
    });
    return retVal;
};
const de___listOfWarningGroup = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_WarningGroup(entry, context);
    });
    return retVal;
};
const de___mapOfAudioSelector = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AudioSelector(value, context);
        return acc;
    }, {});
};
const de___mapOfAudioSelectorGroup = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AudioSelectorGroup(value, context);
        return acc;
    }, {});
};
const de___mapOfCaptionSelector = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_CaptionSelector(value, context);
        return acc;
    }, {});
};
const de___mapOfDynamicAudioSelector = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_DynamicAudioSelector(value, context);
        return acc;
    }, {});
};
const de_AacSettings = (output, context) => {
    return take(output, {
        AudioDescriptionBroadcasterMix: [, __expectString, `audioDescriptionBroadcasterMix`],
        Bitrate: [, __expectInt32, `bitrate`],
        CodecProfile: [, __expectString, `codecProfile`],
        CodingMode: [, __expectString, `codingMode`],
        RateControlMode: [, __expectString, `rateControlMode`],
        RawFormat: [, __expectString, `rawFormat`],
        SampleRate: [, __expectInt32, `sampleRate`],
        Specification: [, __expectString, `specification`],
        VbrQuality: [, __expectString, `vbrQuality`],
    });
};
const de_Ac3Settings = (output, context) => {
    return take(output, {
        Bitrate: [, __expectInt32, `bitrate`],
        BitstreamMode: [, __expectString, `bitstreamMode`],
        CodingMode: [, __expectString, `codingMode`],
        Dialnorm: [, __expectInt32, `dialnorm`],
        DynamicRangeCompressionLine: [, __expectString, `dynamicRangeCompressionLine`],
        DynamicRangeCompressionProfile: [, __expectString, `dynamicRangeCompressionProfile`],
        DynamicRangeCompressionRf: [, __expectString, `dynamicRangeCompressionRf`],
        LfeFilter: [, __expectString, `lfeFilter`],
        MetadataControl: [, __expectString, `metadataControl`],
        SampleRate: [, __expectInt32, `sampleRate`],
    });
};
const de_AccelerationSettings = (output, context) => {
    return take(output, {
        Mode: [, __expectString, `mode`],
    });
};
const de_AdvancedInputFilterSettings = (output, context) => {
    return take(output, {
        AddTexture: [, __expectString, `addTexture`],
        Sharpening: [, __expectString, `sharpening`],
    });
};
const de_AiffSettings = (output, context) => {
    return take(output, {
        BitDepth: [, __expectInt32, `bitDepth`],
        Channels: [, __expectInt32, `channels`],
        SampleRate: [, __expectInt32, `sampleRate`],
    });
};
const de_AllowedRenditionSize = (output, context) => {
    return take(output, {
        Height: [, __expectInt32, `height`],
        Required: [, __expectString, `required`],
        Width: [, __expectInt32, `width`],
    });
};
const de_AncillarySourceSettings = (output, context) => {
    return take(output, {
        Convert608To708: [, __expectString, `convert608To708`],
        SourceAncillaryChannelNumber: [, __expectInt32, `sourceAncillaryChannelNumber`],
        TerminateCaptions: [, __expectString, `terminateCaptions`],
    });
};
const de_AudioChannelTaggingSettings = (output, context) => {
    return take(output, {
        ChannelTag: [, __expectString, `channelTag`],
        ChannelTags: [, _json, `channelTags`],
    });
};
const de_AudioCodecSettings = (output, context) => {
    return take(output, {
        AacSettings: [, (_) => de_AacSettings(_, context), `aacSettings`],
        Ac3Settings: [, (_) => de_Ac3Settings(_, context), `ac3Settings`],
        AiffSettings: [, (_) => de_AiffSettings(_, context), `aiffSettings`],
        Codec: [, __expectString, `codec`],
        Eac3AtmosSettings: [, (_) => de_Eac3AtmosSettings(_, context), `eac3AtmosSettings`],
        Eac3Settings: [, (_) => de_Eac3Settings(_, context), `eac3Settings`],
        FlacSettings: [, (_) => de_FlacSettings(_, context), `flacSettings`],
        Mp2Settings: [, (_) => de_Mp2Settings(_, context), `mp2Settings`],
        Mp3Settings: [, (_) => de_Mp3Settings(_, context), `mp3Settings`],
        OpusSettings: [, (_) => de_OpusSettings(_, context), `opusSettings`],
        VorbisSettings: [, (_) => de_VorbisSettings(_, context), `vorbisSettings`],
        WavSettings: [, (_) => de_WavSettings(_, context), `wavSettings`],
    });
};
const de_AudioDescription = (output, context) => {
    return take(output, {
        AudioChannelTaggingSettings: [
            ,
            (_) => de_AudioChannelTaggingSettings(_, context),
            `audioChannelTaggingSettings`,
        ],
        AudioNormalizationSettings: [, (_) => de_AudioNormalizationSettings(_, context), `audioNormalizationSettings`],
        AudioSourceName: [, __expectString, `audioSourceName`],
        AudioType: [, __expectInt32, `audioType`],
        AudioTypeControl: [, __expectString, `audioTypeControl`],
        CodecSettings: [, (_) => de_AudioCodecSettings(_, context), `codecSettings`],
        CustomLanguageCode: [, __expectString, `customLanguageCode`],
        LanguageCode: [, __expectString, `languageCode`],
        LanguageCodeControl: [, __expectString, `languageCodeControl`],
        RemixSettings: [, (_) => de_RemixSettings(_, context), `remixSettings`],
        StreamName: [, __expectString, `streamName`],
    });
};
const de_AudioNormalizationSettings = (output, context) => {
    return take(output, {
        Algorithm: [, __expectString, `algorithm`],
        AlgorithmControl: [, __expectString, `algorithmControl`],
        CorrectionGateLevel: [, __expectInt32, `correctionGateLevel`],
        LoudnessLogging: [, __expectString, `loudnessLogging`],
        PeakCalculation: [, __expectString, `peakCalculation`],
        TargetLkfs: [, __limitedParseDouble, `targetLkfs`],
        TruePeakLimiterThreshold: [, __limitedParseDouble, `truePeakLimiterThreshold`],
    });
};
const de_AudioProperties = (output, context) => {
    return take(output, {
        BitDepth: [, __expectInt32, `bitDepth`],
        BitRate: [, __expectLong, `bitRate`],
        Channels: [, __expectInt32, `channels`],
        FrameRate: [, (_) => de_FrameRate(_, context), `frameRate`],
        LanguageCode: [, __expectString, `languageCode`],
        SampleRate: [, __expectInt32, `sampleRate`],
    });
};
const de_AudioSelector = (output, context) => {
    return take(output, {
        AudioDurationCorrection: [, __expectString, `audioDurationCorrection`],
        CustomLanguageCode: [, __expectString, `customLanguageCode`],
        DefaultSelection: [, __expectString, `defaultSelection`],
        ExternalAudioFileInput: [, __expectString, `externalAudioFileInput`],
        HlsRenditionGroupSettings: [, (_) => de_HlsRenditionGroupSettings(_, context), `hlsRenditionGroupSettings`],
        LanguageCode: [, __expectString, `languageCode`],
        Offset: [, __expectInt32, `offset`],
        Pids: [, _json, `pids`],
        ProgramSelection: [, __expectInt32, `programSelection`],
        RemixSettings: [, (_) => de_RemixSettings(_, context), `remixSettings`],
        SelectorType: [, __expectString, `selectorType`],
        Tracks: [, _json, `tracks`],
    });
};
const de_AudioSelectorGroup = (output, context) => {
    return take(output, {
        AudioSelectorNames: [, _json, `audioSelectorNames`],
    });
};
const de_AutomatedAbrRule = (output, context) => {
    return take(output, {
        AllowedRenditions: [, (_) => de___listOfAllowedRenditionSize(_, context), `allowedRenditions`],
        ForceIncludeRenditions: [, (_) => de___listOfForceIncludeRenditionSize(_, context), `forceIncludeRenditions`],
        MinBottomRenditionSize: [, (_) => de_MinBottomRenditionSize(_, context), `minBottomRenditionSize`],
        MinTopRenditionSize: [, (_) => de_MinTopRenditionSize(_, context), `minTopRenditionSize`],
        Type: [, __expectString, `type`],
    });
};
const de_AutomatedAbrSettings = (output, context) => {
    return take(output, {
        MaxAbrBitrate: [, __expectInt32, `maxAbrBitrate`],
        MaxQualityLevel: [, __limitedParseDouble, `maxQualityLevel`],
        MaxRenditions: [, __expectInt32, `maxRenditions`],
        MinAbrBitrate: [, __expectInt32, `minAbrBitrate`],
        Rules: [, (_) => de___listOfAutomatedAbrRule(_, context), `rules`],
    });
};
const de_AutomatedEncodingSettings = (output, context) => {
    return take(output, {
        AbrSettings: [, (_) => de_AutomatedAbrSettings(_, context), `abrSettings`],
    });
};
const de_Av1QvbrSettings = (output, context) => {
    return take(output, {
        QvbrQualityLevel: [, __expectInt32, `qvbrQualityLevel`],
        QvbrQualityLevelFineTune: [, __limitedParseDouble, `qvbrQualityLevelFineTune`],
    });
};
const de_Av1Settings = (output, context) => {
    return take(output, {
        AdaptiveQuantization: [, __expectString, `adaptiveQuantization`],
        BitDepth: [, __expectString, `bitDepth`],
        FilmGrainSynthesis: [, __expectString, `filmGrainSynthesis`],
        FramerateControl: [, __expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, __expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        GopSize: [, __limitedParseDouble, `gopSize`],
        MaxBitrate: [, __expectInt32, `maxBitrate`],
        NumberBFramesBetweenReferenceFrames: [, __expectInt32, `numberBFramesBetweenReferenceFrames`],
        PerFrameMetrics: [, _json, `perFrameMetrics`],
        QvbrSettings: [, (_) => de_Av1QvbrSettings(_, context), `qvbrSettings`],
        RateControlMode: [, __expectString, `rateControlMode`],
        Slices: [, __expectInt32, `slices`],
        SpatialAdaptiveQuantization: [, __expectString, `spatialAdaptiveQuantization`],
    });
};
const de_AvailBlanking = (output, context) => {
    return take(output, {
        AvailBlankingImage: [, __expectString, `availBlankingImage`],
    });
};
const de_AvcIntraSettings = (output, context) => {
    return take(output, {
        AvcIntraClass: [, __expectString, `avcIntraClass`],
        AvcIntraUhdSettings: [, (_) => de_AvcIntraUhdSettings(_, context), `avcIntraUhdSettings`],
        FramerateControl: [, __expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, __expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        InterlaceMode: [, __expectString, `interlaceMode`],
        PerFrameMetrics: [, _json, `perFrameMetrics`],
        ScanTypeConversionMode: [, __expectString, `scanTypeConversionMode`],
        SlowPal: [, __expectString, `slowPal`],
        Telecine: [, __expectString, `telecine`],
    });
};
const de_AvcIntraUhdSettings = (output, context) => {
    return take(output, {
        QualityTuningLevel: [, __expectString, `qualityTuningLevel`],
    });
};
const de_BandwidthReductionFilter = (output, context) => {
    return take(output, {
        Sharpening: [, __expectString, `sharpening`],
        Strength: [, __expectString, `strength`],
    });
};
const de_BurninDestinationSettings = (output, context) => {
    return take(output, {
        Alignment: [, __expectString, `alignment`],
        ApplyFontColor: [, __expectString, `applyFontColor`],
        BackgroundColor: [, __expectString, `backgroundColor`],
        BackgroundOpacity: [, __expectInt32, `backgroundOpacity`],
        FallbackFont: [, __expectString, `fallbackFont`],
        FontColor: [, __expectString, `fontColor`],
        FontFileBold: [, __expectString, `fontFileBold`],
        FontFileBoldItalic: [, __expectString, `fontFileBoldItalic`],
        FontFileItalic: [, __expectString, `fontFileItalic`],
        FontFileRegular: [, __expectString, `fontFileRegular`],
        FontOpacity: [, __expectInt32, `fontOpacity`],
        FontResolution: [, __expectInt32, `fontResolution`],
        FontScript: [, __expectString, `fontScript`],
        FontSize: [, __expectInt32, `fontSize`],
        HexFontColor: [, __expectString, `hexFontColor`],
        OutlineColor: [, __expectString, `outlineColor`],
        OutlineSize: [, __expectInt32, `outlineSize`],
        RemoveRubyReserveAttributes: [, __expectString, `removeRubyReserveAttributes`],
        ShadowColor: [, __expectString, `shadowColor`],
        ShadowOpacity: [, __expectInt32, `shadowOpacity`],
        ShadowXOffset: [, __expectInt32, `shadowXOffset`],
        ShadowYOffset: [, __expectInt32, `shadowYOffset`],
        StylePassthrough: [, __expectString, `stylePassthrough`],
        TeletextSpacing: [, __expectString, `teletextSpacing`],
        XPosition: [, __expectInt32, `xPosition`],
        YPosition: [, __expectInt32, `yPosition`],
    });
};
const de_CaptionDescription = (output, context) => {
    return take(output, {
        CaptionSelectorName: [, __expectString, `captionSelectorName`],
        CustomLanguageCode: [, __expectString, `customLanguageCode`],
        DestinationSettings: [, (_) => de_CaptionDestinationSettings(_, context), `destinationSettings`],
        LanguageCode: [, __expectString, `languageCode`],
        LanguageDescription: [, __expectString, `languageDescription`],
    });
};
const de_CaptionDescriptionPreset = (output, context) => {
    return take(output, {
        CustomLanguageCode: [, __expectString, `customLanguageCode`],
        DestinationSettings: [, (_) => de_CaptionDestinationSettings(_, context), `destinationSettings`],
        LanguageCode: [, __expectString, `languageCode`],
        LanguageDescription: [, __expectString, `languageDescription`],
    });
};
const de_CaptionDestinationSettings = (output, context) => {
    return take(output, {
        BurninDestinationSettings: [, (_) => de_BurninDestinationSettings(_, context), `burninDestinationSettings`],
        DestinationType: [, __expectString, `destinationType`],
        DvbSubDestinationSettings: [, (_) => de_DvbSubDestinationSettings(_, context), `dvbSubDestinationSettings`],
        EmbeddedDestinationSettings: [
            ,
            (_) => de_EmbeddedDestinationSettings(_, context),
            `embeddedDestinationSettings`,
        ],
        ImscDestinationSettings: [, (_) => de_ImscDestinationSettings(_, context), `imscDestinationSettings`],
        SccDestinationSettings: [, (_) => de_SccDestinationSettings(_, context), `sccDestinationSettings`],
        SrtDestinationSettings: [, (_) => de_SrtDestinationSettings(_, context), `srtDestinationSettings`],
        TeletextDestinationSettings: [
            ,
            (_) => de_TeletextDestinationSettings(_, context),
            `teletextDestinationSettings`,
        ],
        TtmlDestinationSettings: [, (_) => de_TtmlDestinationSettings(_, context), `ttmlDestinationSettings`],
        WebvttDestinationSettings: [, (_) => de_WebvttDestinationSettings(_, context), `webvttDestinationSettings`],
    });
};
const de_CaptionSelector = (output, context) => {
    return take(output, {
        CustomLanguageCode: [, __expectString, `customLanguageCode`],
        LanguageCode: [, __expectString, `languageCode`],
        SourceSettings: [, (_) => de_CaptionSourceSettings(_, context), `sourceSettings`],
    });
};
const de_CaptionSourceFramerate = (output, context) => {
    return take(output, {
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
    });
};
const de_CaptionSourceSettings = (output, context) => {
    return take(output, {
        AncillarySourceSettings: [, (_) => de_AncillarySourceSettings(_, context), `ancillarySourceSettings`],
        DvbSubSourceSettings: [, (_) => de_DvbSubSourceSettings(_, context), `dvbSubSourceSettings`],
        EmbeddedSourceSettings: [, (_) => de_EmbeddedSourceSettings(_, context), `embeddedSourceSettings`],
        FileSourceSettings: [, (_) => de_FileSourceSettings(_, context), `fileSourceSettings`],
        SourceType: [, __expectString, `sourceType`],
        TeletextSourceSettings: [, (_) => de_TeletextSourceSettings(_, context), `teletextSourceSettings`],
        TrackSourceSettings: [, (_) => de_TrackSourceSettings(_, context), `trackSourceSettings`],
        WebvttHlsSourceSettings: [, (_) => de_WebvttHlsSourceSettings(_, context), `webvttHlsSourceSettings`],
    });
};
const de_ChannelMapping = (output, context) => {
    return take(output, {
        OutputChannels: [, (_) => de___listOfOutputChannelMapping(_, context), `outputChannels`],
    });
};
const de_ClipLimits = (output, context) => {
    return take(output, {
        MaximumRGBTolerance: [, __expectInt32, `maximumRGBTolerance`],
        MaximumYUV: [, __expectInt32, `maximumYUV`],
        MinimumRGBTolerance: [, __expectInt32, `minimumRGBTolerance`],
        MinimumYUV: [, __expectInt32, `minimumYUV`],
    });
};
const de_CmafAdditionalManifest = (output, context) => {
    return take(output, {
        ManifestNameModifier: [, __expectString, `manifestNameModifier`],
        SelectedOutputs: [, _json, `selectedOutputs`],
    });
};
const de_CmafEncryptionSettings = (output, context) => {
    return take(output, {
        ConstantInitializationVector: [, __expectString, `constantInitializationVector`],
        EncryptionMethod: [, __expectString, `encryptionMethod`],
        InitializationVectorInManifest: [, __expectString, `initializationVectorInManifest`],
        SpekeKeyProvider: [, (_) => de_SpekeKeyProviderCmaf(_, context), `spekeKeyProvider`],
        StaticKeyProvider: [, (_) => de_StaticKeyProvider(_, context), `staticKeyProvider`],
        Type: [, __expectString, `type`],
    });
};
const de_CmafGroupSettings = (output, context) => {
    return take(output, {
        AdditionalManifests: [, (_) => de___listOfCmafAdditionalManifest(_, context), `additionalManifests`],
        BaseUrl: [, __expectString, `baseUrl`],
        ClientCache: [, __expectString, `clientCache`],
        CodecSpecification: [, __expectString, `codecSpecification`],
        DashIFrameTrickPlayNameModifier: [, __expectString, `dashIFrameTrickPlayNameModifier`],
        DashManifestStyle: [, __expectString, `dashManifestStyle`],
        Destination: [, __expectString, `destination`],
        DestinationSettings: [, (_) => de_DestinationSettings(_, context), `destinationSettings`],
        Encryption: [, (_) => de_CmafEncryptionSettings(_, context), `encryption`],
        FragmentLength: [, __expectInt32, `fragmentLength`],
        ImageBasedTrickPlay: [, __expectString, `imageBasedTrickPlay`],
        ImageBasedTrickPlaySettings: [
            ,
            (_) => de_CmafImageBasedTrickPlaySettings(_, context),
            `imageBasedTrickPlaySettings`,
        ],
        ManifestCompression: [, __expectString, `manifestCompression`],
        ManifestDurationFormat: [, __expectString, `manifestDurationFormat`],
        MinBufferTime: [, __expectInt32, `minBufferTime`],
        MinFinalSegmentLength: [, __limitedParseDouble, `minFinalSegmentLength`],
        MpdManifestBandwidthType: [, __expectString, `mpdManifestBandwidthType`],
        MpdProfile: [, __expectString, `mpdProfile`],
        PtsOffsetHandlingForBFrames: [, __expectString, `ptsOffsetHandlingForBFrames`],
        SegmentControl: [, __expectString, `segmentControl`],
        SegmentLength: [, __expectInt32, `segmentLength`],
        SegmentLengthControl: [, __expectString, `segmentLengthControl`],
        StreamInfResolution: [, __expectString, `streamInfResolution`],
        TargetDurationCompatibilityMode: [, __expectString, `targetDurationCompatibilityMode`],
        VideoCompositionOffsets: [, __expectString, `videoCompositionOffsets`],
        WriteDashManifest: [, __expectString, `writeDashManifest`],
        WriteHlsManifest: [, __expectString, `writeHlsManifest`],
        WriteSegmentTimelineInRepresentation: [, __expectString, `writeSegmentTimelineInRepresentation`],
    });
};
const de_CmafImageBasedTrickPlaySettings = (output, context) => {
    return take(output, {
        IntervalCadence: [, __expectString, `intervalCadence`],
        ThumbnailHeight: [, __expectInt32, `thumbnailHeight`],
        ThumbnailInterval: [, __limitedParseDouble, `thumbnailInterval`],
        ThumbnailWidth: [, __expectInt32, `thumbnailWidth`],
        TileHeight: [, __expectInt32, `tileHeight`],
        TileWidth: [, __expectInt32, `tileWidth`],
    });
};
const de_CmfcSettings = (output, context) => {
    return take(output, {
        AudioDuration: [, __expectString, `audioDuration`],
        AudioGroupId: [, __expectString, `audioGroupId`],
        AudioRenditionSets: [, __expectString, `audioRenditionSets`],
        AudioTrackType: [, __expectString, `audioTrackType`],
        DescriptiveVideoServiceFlag: [, __expectString, `descriptiveVideoServiceFlag`],
        IFrameOnlyManifest: [, __expectString, `iFrameOnlyManifest`],
        KlvMetadata: [, __expectString, `klvMetadata`],
        ManifestMetadataSignaling: [, __expectString, `manifestMetadataSignaling`],
        Scte35Esam: [, __expectString, `scte35Esam`],
        Scte35Source: [, __expectString, `scte35Source`],
        TimedMetadata: [, __expectString, `timedMetadata`],
        TimedMetadataBoxVersion: [, __expectString, `timedMetadataBoxVersion`],
        TimedMetadataSchemeIdUri: [, __expectString, `timedMetadataSchemeIdUri`],
        TimedMetadataValue: [, __expectString, `timedMetadataValue`],
    });
};
const de_ColorConversion3DLUTSetting = (output, context) => {
    return take(output, {
        FileInput: [, __expectString, `fileInput`],
        InputColorSpace: [, __expectString, `inputColorSpace`],
        InputMasteringLuminance: [, __expectInt32, `inputMasteringLuminance`],
        OutputColorSpace: [, __expectString, `outputColorSpace`],
        OutputMasteringLuminance: [, __expectInt32, `outputMasteringLuminance`],
    });
};
const de_ColorCorrector = (output, context) => {
    return take(output, {
        Brightness: [, __expectInt32, `brightness`],
        ClipLimits: [, (_) => de_ClipLimits(_, context), `clipLimits`],
        ColorSpaceConversion: [, __expectString, `colorSpaceConversion`],
        Contrast: [, __expectInt32, `contrast`],
        Hdr10Metadata: [, (_) => de_Hdr10Metadata(_, context), `hdr10Metadata`],
        HdrToSdrToneMapper: [, __expectString, `hdrToSdrToneMapper`],
        Hue: [, __expectInt32, `hue`],
        MaxLuminance: [, __expectInt32, `maxLuminance`],
        SampleRangeConversion: [, __expectString, `sampleRangeConversion`],
        Saturation: [, __expectInt32, `saturation`],
        SdrReferenceWhiteLevel: [, __expectInt32, `sdrReferenceWhiteLevel`],
    });
};
const de_Container = (output, context) => {
    return take(output, {
        Duration: [, __limitedParseDouble, `duration`],
        Format: [, __expectString, `format`],
        Tracks: [, (_) => de___listOfTrack(_, context), `tracks`],
    });
};
const de_ContainerSettings = (output, context) => {
    return take(output, {
        CmfcSettings: [, (_) => de_CmfcSettings(_, context), `cmfcSettings`],
        Container: [, __expectString, `container`],
        F4vSettings: [, (_) => de_F4vSettings(_, context), `f4vSettings`],
        M2tsSettings: [, (_) => de_M2tsSettings(_, context), `m2tsSettings`],
        M3u8Settings: [, (_) => de_M3u8Settings(_, context), `m3u8Settings`],
        MovSettings: [, (_) => de_MovSettings(_, context), `movSettings`],
        Mp4Settings: [, (_) => de_Mp4Settings(_, context), `mp4Settings`],
        MpdSettings: [, (_) => de_MpdSettings(_, context), `mpdSettings`],
        MxfSettings: [, (_) => de_MxfSettings(_, context), `mxfSettings`],
    });
};
const de_DashAdditionalManifest = (output, context) => {
    return take(output, {
        ManifestNameModifier: [, __expectString, `manifestNameModifier`],
        SelectedOutputs: [, _json, `selectedOutputs`],
    });
};
const de_DashIsoEncryptionSettings = (output, context) => {
    return take(output, {
        PlaybackDeviceCompatibility: [, __expectString, `playbackDeviceCompatibility`],
        SpekeKeyProvider: [, (_) => de_SpekeKeyProvider(_, context), `spekeKeyProvider`],
    });
};
const de_DashIsoGroupSettings = (output, context) => {
    return take(output, {
        AdditionalManifests: [, (_) => de___listOfDashAdditionalManifest(_, context), `additionalManifests`],
        AudioChannelConfigSchemeIdUri: [, __expectString, `audioChannelConfigSchemeIdUri`],
        BaseUrl: [, __expectString, `baseUrl`],
        DashIFrameTrickPlayNameModifier: [, __expectString, `dashIFrameTrickPlayNameModifier`],
        DashManifestStyle: [, __expectString, `dashManifestStyle`],
        Destination: [, __expectString, `destination`],
        DestinationSettings: [, (_) => de_DestinationSettings(_, context), `destinationSettings`],
        Encryption: [, (_) => de_DashIsoEncryptionSettings(_, context), `encryption`],
        FragmentLength: [, __expectInt32, `fragmentLength`],
        HbbtvCompliance: [, __expectString, `hbbtvCompliance`],
        ImageBasedTrickPlay: [, __expectString, `imageBasedTrickPlay`],
        ImageBasedTrickPlaySettings: [
            ,
            (_) => de_DashIsoImageBasedTrickPlaySettings(_, context),
            `imageBasedTrickPlaySettings`,
        ],
        MinBufferTime: [, __expectInt32, `minBufferTime`],
        MinFinalSegmentLength: [, __limitedParseDouble, `minFinalSegmentLength`],
        MpdManifestBandwidthType: [, __expectString, `mpdManifestBandwidthType`],
        MpdProfile: [, __expectString, `mpdProfile`],
        PtsOffsetHandlingForBFrames: [, __expectString, `ptsOffsetHandlingForBFrames`],
        SegmentControl: [, __expectString, `segmentControl`],
        SegmentLength: [, __expectInt32, `segmentLength`],
        SegmentLengthControl: [, __expectString, `segmentLengthControl`],
        VideoCompositionOffsets: [, __expectString, `videoCompositionOffsets`],
        WriteSegmentTimelineInRepresentation: [, __expectString, `writeSegmentTimelineInRepresentation`],
    });
};
const de_DashIsoImageBasedTrickPlaySettings = (output, context) => {
    return take(output, {
        IntervalCadence: [, __expectString, `intervalCadence`],
        ThumbnailHeight: [, __expectInt32, `thumbnailHeight`],
        ThumbnailInterval: [, __limitedParseDouble, `thumbnailInterval`],
        ThumbnailWidth: [, __expectInt32, `thumbnailWidth`],
        TileHeight: [, __expectInt32, `tileHeight`],
        TileWidth: [, __expectInt32, `tileWidth`],
    });
};
const de_DataProperties = (output, context) => {
    return take(output, {
        LanguageCode: [, __expectString, `languageCode`],
    });
};
const de_Deinterlacer = (output, context) => {
    return take(output, {
        Algorithm: [, __expectString, `algorithm`],
        Control: [, __expectString, `control`],
        Mode: [, __expectString, `mode`],
    });
};
const de_DestinationSettings = (output, context) => {
    return take(output, {
        S3Settings: [, (_) => de_S3DestinationSettings(_, context), `s3Settings`],
    });
};
const de_DolbyVision = (output, context) => {
    return take(output, {
        L6Metadata: [, (_) => de_DolbyVisionLevel6Metadata(_, context), `l6Metadata`],
        L6Mode: [, __expectString, `l6Mode`],
        Mapping: [, __expectString, `mapping`],
        Profile: [, __expectString, `profile`],
    });
};
const de_DolbyVisionLevel6Metadata = (output, context) => {
    return take(output, {
        MaxCll: [, __expectInt32, `maxCll`],
        MaxFall: [, __expectInt32, `maxFall`],
    });
};
const de_DvbNitSettings = (output, context) => {
    return take(output, {
        NetworkId: [, __expectInt32, `networkId`],
        NetworkName: [, __expectString, `networkName`],
        NitInterval: [, __expectInt32, `nitInterval`],
    });
};
const de_DvbSdtSettings = (output, context) => {
    return take(output, {
        OutputSdt: [, __expectString, `outputSdt`],
        SdtInterval: [, __expectInt32, `sdtInterval`],
        ServiceName: [, __expectString, `serviceName`],
        ServiceProviderName: [, __expectString, `serviceProviderName`],
    });
};
const de_DvbSubDestinationSettings = (output, context) => {
    return take(output, {
        Alignment: [, __expectString, `alignment`],
        ApplyFontColor: [, __expectString, `applyFontColor`],
        BackgroundColor: [, __expectString, `backgroundColor`],
        BackgroundOpacity: [, __expectInt32, `backgroundOpacity`],
        DdsHandling: [, __expectString, `ddsHandling`],
        DdsXCoordinate: [, __expectInt32, `ddsXCoordinate`],
        DdsYCoordinate: [, __expectInt32, `ddsYCoordinate`],
        FallbackFont: [, __expectString, `fallbackFont`],
        FontColor: [, __expectString, `fontColor`],
        FontFileBold: [, __expectString, `fontFileBold`],
        FontFileBoldItalic: [, __expectString, `fontFileBoldItalic`],
        FontFileItalic: [, __expectString, `fontFileItalic`],
        FontFileRegular: [, __expectString, `fontFileRegular`],
        FontOpacity: [, __expectInt32, `fontOpacity`],
        FontResolution: [, __expectInt32, `fontResolution`],
        FontScript: [, __expectString, `fontScript`],
        FontSize: [, __expectInt32, `fontSize`],
        Height: [, __expectInt32, `height`],
        HexFontColor: [, __expectString, `hexFontColor`],
        OutlineColor: [, __expectString, `outlineColor`],
        OutlineSize: [, __expectInt32, `outlineSize`],
        ShadowColor: [, __expectString, `shadowColor`],
        ShadowOpacity: [, __expectInt32, `shadowOpacity`],
        ShadowXOffset: [, __expectInt32, `shadowXOffset`],
        ShadowYOffset: [, __expectInt32, `shadowYOffset`],
        StylePassthrough: [, __expectString, `stylePassthrough`],
        SubtitlingType: [, __expectString, `subtitlingType`],
        TeletextSpacing: [, __expectString, `teletextSpacing`],
        Width: [, __expectInt32, `width`],
        XPosition: [, __expectInt32, `xPosition`],
        YPosition: [, __expectInt32, `yPosition`],
    });
};
const de_DvbSubSourceSettings = (output, context) => {
    return take(output, {
        Pid: [, __expectInt32, `pid`],
    });
};
const de_DvbTdtSettings = (output, context) => {
    return take(output, {
        TdtInterval: [, __expectInt32, `tdtInterval`],
    });
};
const de_DynamicAudioSelector = (output, context) => {
    return take(output, {
        AudioDurationCorrection: [, __expectString, `audioDurationCorrection`],
        ExternalAudioFileInput: [, __expectString, `externalAudioFileInput`],
        LanguageCode: [, __expectString, `languageCode`],
        Offset: [, __expectInt32, `offset`],
        SelectorType: [, __expectString, `selectorType`],
    });
};
const de_Eac3AtmosSettings = (output, context) => {
    return take(output, {
        Bitrate: [, __expectInt32, `bitrate`],
        BitstreamMode: [, __expectString, `bitstreamMode`],
        CodingMode: [, __expectString, `codingMode`],
        DialogueIntelligence: [, __expectString, `dialogueIntelligence`],
        DownmixControl: [, __expectString, `downmixControl`],
        DynamicRangeCompressionLine: [, __expectString, `dynamicRangeCompressionLine`],
        DynamicRangeCompressionRf: [, __expectString, `dynamicRangeCompressionRf`],
        DynamicRangeControl: [, __expectString, `dynamicRangeControl`],
        LoRoCenterMixLevel: [, __limitedParseDouble, `loRoCenterMixLevel`],
        LoRoSurroundMixLevel: [, __limitedParseDouble, `loRoSurroundMixLevel`],
        LtRtCenterMixLevel: [, __limitedParseDouble, `ltRtCenterMixLevel`],
        LtRtSurroundMixLevel: [, __limitedParseDouble, `ltRtSurroundMixLevel`],
        MeteringMode: [, __expectString, `meteringMode`],
        SampleRate: [, __expectInt32, `sampleRate`],
        SpeechThreshold: [, __expectInt32, `speechThreshold`],
        StereoDownmix: [, __expectString, `stereoDownmix`],
        SurroundExMode: [, __expectString, `surroundExMode`],
    });
};
const de_Eac3Settings = (output, context) => {
    return take(output, {
        AttenuationControl: [, __expectString, `attenuationControl`],
        Bitrate: [, __expectInt32, `bitrate`],
        BitstreamMode: [, __expectString, `bitstreamMode`],
        CodingMode: [, __expectString, `codingMode`],
        DcFilter: [, __expectString, `dcFilter`],
        Dialnorm: [, __expectInt32, `dialnorm`],
        DynamicRangeCompressionLine: [, __expectString, `dynamicRangeCompressionLine`],
        DynamicRangeCompressionRf: [, __expectString, `dynamicRangeCompressionRf`],
        LfeControl: [, __expectString, `lfeControl`],
        LfeFilter: [, __expectString, `lfeFilter`],
        LoRoCenterMixLevel: [, __limitedParseDouble, `loRoCenterMixLevel`],
        LoRoSurroundMixLevel: [, __limitedParseDouble, `loRoSurroundMixLevel`],
        LtRtCenterMixLevel: [, __limitedParseDouble, `ltRtCenterMixLevel`],
        LtRtSurroundMixLevel: [, __limitedParseDouble, `ltRtSurroundMixLevel`],
        MetadataControl: [, __expectString, `metadataControl`],
        PassthroughControl: [, __expectString, `passthroughControl`],
        PhaseControl: [, __expectString, `phaseControl`],
        SampleRate: [, __expectInt32, `sampleRate`],
        StereoDownmix: [, __expectString, `stereoDownmix`],
        SurroundExMode: [, __expectString, `surroundExMode`],
        SurroundMode: [, __expectString, `surroundMode`],
    });
};
const de_EmbeddedDestinationSettings = (output, context) => {
    return take(output, {
        Destination608ChannelNumber: [, __expectInt32, `destination608ChannelNumber`],
        Destination708ServiceNumber: [, __expectInt32, `destination708ServiceNumber`],
    });
};
const de_EmbeddedSourceSettings = (output, context) => {
    return take(output, {
        Convert608To708: [, __expectString, `convert608To708`],
        Source608ChannelNumber: [, __expectInt32, `source608ChannelNumber`],
        Source608TrackNumber: [, __expectInt32, `source608TrackNumber`],
        TerminateCaptions: [, __expectString, `terminateCaptions`],
    });
};
const de_EncryptionContractConfiguration = (output, context) => {
    return take(output, {
        SpekeAudioPreset: [, __expectString, `spekeAudioPreset`],
        SpekeVideoPreset: [, __expectString, `spekeVideoPreset`],
    });
};
const de_Endpoint = (output, context) => {
    return take(output, {
        Url: [, __expectString, `url`],
    });
};
const de_EsamManifestConfirmConditionNotification = (output, context) => {
    return take(output, {
        MccXml: [, __expectString, `mccXml`],
    });
};
const de_EsamSettings = (output, context) => {
    return take(output, {
        ManifestConfirmConditionNotification: [
            ,
            (_) => de_EsamManifestConfirmConditionNotification(_, context),
            `manifestConfirmConditionNotification`,
        ],
        ResponseSignalPreroll: [, __expectInt32, `responseSignalPreroll`],
        SignalProcessingNotification: [
            ,
            (_) => de_EsamSignalProcessingNotification(_, context),
            `signalProcessingNotification`,
        ],
    });
};
const de_EsamSignalProcessingNotification = (output, context) => {
    return take(output, {
        SccXml: [, __expectString, `sccXml`],
    });
};
const de_ExtendedDataServices = (output, context) => {
    return take(output, {
        CopyProtectionAction: [, __expectString, `copyProtectionAction`],
        VchipAction: [, __expectString, `vchipAction`],
    });
};
const de_F4vSettings = (output, context) => {
    return take(output, {
        MoovPlacement: [, __expectString, `moovPlacement`],
    });
};
const de_FileGroupSettings = (output, context) => {
    return take(output, {
        Destination: [, __expectString, `destination`],
        DestinationSettings: [, (_) => de_DestinationSettings(_, context), `destinationSettings`],
    });
};
const de_FileSourceSettings = (output, context) => {
    return take(output, {
        ByteRateLimit: [, __expectString, `byteRateLimit`],
        Convert608To708: [, __expectString, `convert608To708`],
        ConvertPaintToPop: [, __expectString, `convertPaintToPop`],
        Framerate: [, (_) => de_CaptionSourceFramerate(_, context), `framerate`],
        SourceFile: [, __expectString, `sourceFile`],
        TimeDelta: [, __expectInt32, `timeDelta`],
        TimeDeltaUnits: [, __expectString, `timeDeltaUnits`],
        UpconvertSTLToTeletext: [, __expectString, `upconvertSTLToTeletext`],
    });
};
const de_FlacSettings = (output, context) => {
    return take(output, {
        BitDepth: [, __expectInt32, `bitDepth`],
        Channels: [, __expectInt32, `channels`],
        SampleRate: [, __expectInt32, `sampleRate`],
    });
};
const de_ForceIncludeRenditionSize = (output, context) => {
    return take(output, {
        Height: [, __expectInt32, `height`],
        Width: [, __expectInt32, `width`],
    });
};
const de_FrameCaptureSettings = (output, context) => {
    return take(output, {
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        MaxCaptures: [, __expectInt32, `maxCaptures`],
        Quality: [, __expectInt32, `quality`],
    });
};
const de_FrameRate = (output, context) => {
    return take(output, {
        Denominator: [, __expectInt32, `denominator`],
        Numerator: [, __expectInt32, `numerator`],
    });
};
const de_GifSettings = (output, context) => {
    return take(output, {
        FramerateControl: [, __expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, __expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
    });
};
const de_H264QvbrSettings = (output, context) => {
    return take(output, {
        MaxAverageBitrate: [, __expectInt32, `maxAverageBitrate`],
        QvbrQualityLevel: [, __expectInt32, `qvbrQualityLevel`],
        QvbrQualityLevelFineTune: [, __limitedParseDouble, `qvbrQualityLevelFineTune`],
    });
};
const de_H264Settings = (output, context) => {
    return take(output, {
        AdaptiveQuantization: [, __expectString, `adaptiveQuantization`],
        BandwidthReductionFilter: [, (_) => de_BandwidthReductionFilter(_, context), `bandwidthReductionFilter`],
        Bitrate: [, __expectInt32, `bitrate`],
        CodecLevel: [, __expectString, `codecLevel`],
        CodecProfile: [, __expectString, `codecProfile`],
        DynamicSubGop: [, __expectString, `dynamicSubGop`],
        EndOfStreamMarkers: [, __expectString, `endOfStreamMarkers`],
        EntropyEncoding: [, __expectString, `entropyEncoding`],
        FieldEncoding: [, __expectString, `fieldEncoding`],
        FlickerAdaptiveQuantization: [, __expectString, `flickerAdaptiveQuantization`],
        FramerateControl: [, __expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, __expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        GopBReference: [, __expectString, `gopBReference`],
        GopClosedCadence: [, __expectInt32, `gopClosedCadence`],
        GopSize: [, __limitedParseDouble, `gopSize`],
        GopSizeUnits: [, __expectString, `gopSizeUnits`],
        HrdBufferFinalFillPercentage: [, __expectInt32, `hrdBufferFinalFillPercentage`],
        HrdBufferInitialFillPercentage: [, __expectInt32, `hrdBufferInitialFillPercentage`],
        HrdBufferSize: [, __expectInt32, `hrdBufferSize`],
        InterlaceMode: [, __expectString, `interlaceMode`],
        MaxBitrate: [, __expectInt32, `maxBitrate`],
        MinIInterval: [, __expectInt32, `minIInterval`],
        NumberBFramesBetweenReferenceFrames: [, __expectInt32, `numberBFramesBetweenReferenceFrames`],
        NumberReferenceFrames: [, __expectInt32, `numberReferenceFrames`],
        ParControl: [, __expectString, `parControl`],
        ParDenominator: [, __expectInt32, `parDenominator`],
        ParNumerator: [, __expectInt32, `parNumerator`],
        PerFrameMetrics: [, _json, `perFrameMetrics`],
        QualityTuningLevel: [, __expectString, `qualityTuningLevel`],
        QvbrSettings: [, (_) => de_H264QvbrSettings(_, context), `qvbrSettings`],
        RateControlMode: [, __expectString, `rateControlMode`],
        RepeatPps: [, __expectString, `repeatPps`],
        SaliencyAwareEncoding: [, __expectString, `saliencyAwareEncoding`],
        ScanTypeConversionMode: [, __expectString, `scanTypeConversionMode`],
        SceneChangeDetect: [, __expectString, `sceneChangeDetect`],
        Slices: [, __expectInt32, `slices`],
        SlowPal: [, __expectString, `slowPal`],
        Softness: [, __expectInt32, `softness`],
        SpatialAdaptiveQuantization: [, __expectString, `spatialAdaptiveQuantization`],
        Syntax: [, __expectString, `syntax`],
        Telecine: [, __expectString, `telecine`],
        TemporalAdaptiveQuantization: [, __expectString, `temporalAdaptiveQuantization`],
        UnregisteredSeiTimecode: [, __expectString, `unregisteredSeiTimecode`],
        WriteMp4PackagingType: [, __expectString, `writeMp4PackagingType`],
    });
};
const de_H265QvbrSettings = (output, context) => {
    return take(output, {
        MaxAverageBitrate: [, __expectInt32, `maxAverageBitrate`],
        QvbrQualityLevel: [, __expectInt32, `qvbrQualityLevel`],
        QvbrQualityLevelFineTune: [, __limitedParseDouble, `qvbrQualityLevelFineTune`],
    });
};
const de_H265Settings = (output, context) => {
    return take(output, {
        AdaptiveQuantization: [, __expectString, `adaptiveQuantization`],
        AlternateTransferFunctionSei: [, __expectString, `alternateTransferFunctionSei`],
        BandwidthReductionFilter: [, (_) => de_BandwidthReductionFilter(_, context), `bandwidthReductionFilter`],
        Bitrate: [, __expectInt32, `bitrate`],
        CodecLevel: [, __expectString, `codecLevel`],
        CodecProfile: [, __expectString, `codecProfile`],
        Deblocking: [, __expectString, `deblocking`],
        DynamicSubGop: [, __expectString, `dynamicSubGop`],
        EndOfStreamMarkers: [, __expectString, `endOfStreamMarkers`],
        FlickerAdaptiveQuantization: [, __expectString, `flickerAdaptiveQuantization`],
        FramerateControl: [, __expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, __expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        GopBReference: [, __expectString, `gopBReference`],
        GopClosedCadence: [, __expectInt32, `gopClosedCadence`],
        GopSize: [, __limitedParseDouble, `gopSize`],
        GopSizeUnits: [, __expectString, `gopSizeUnits`],
        HrdBufferFinalFillPercentage: [, __expectInt32, `hrdBufferFinalFillPercentage`],
        HrdBufferInitialFillPercentage: [, __expectInt32, `hrdBufferInitialFillPercentage`],
        HrdBufferSize: [, __expectInt32, `hrdBufferSize`],
        InterlaceMode: [, __expectString, `interlaceMode`],
        MaxBitrate: [, __expectInt32, `maxBitrate`],
        MinIInterval: [, __expectInt32, `minIInterval`],
        NumberBFramesBetweenReferenceFrames: [, __expectInt32, `numberBFramesBetweenReferenceFrames`],
        NumberReferenceFrames: [, __expectInt32, `numberReferenceFrames`],
        ParControl: [, __expectString, `parControl`],
        ParDenominator: [, __expectInt32, `parDenominator`],
        ParNumerator: [, __expectInt32, `parNumerator`],
        PerFrameMetrics: [, _json, `perFrameMetrics`],
        QualityTuningLevel: [, __expectString, `qualityTuningLevel`],
        QvbrSettings: [, (_) => de_H265QvbrSettings(_, context), `qvbrSettings`],
        RateControlMode: [, __expectString, `rateControlMode`],
        SampleAdaptiveOffsetFilterMode: [, __expectString, `sampleAdaptiveOffsetFilterMode`],
        ScanTypeConversionMode: [, __expectString, `scanTypeConversionMode`],
        SceneChangeDetect: [, __expectString, `sceneChangeDetect`],
        Slices: [, __expectInt32, `slices`],
        SlowPal: [, __expectString, `slowPal`],
        SpatialAdaptiveQuantization: [, __expectString, `spatialAdaptiveQuantization`],
        Telecine: [, __expectString, `telecine`],
        TemporalAdaptiveQuantization: [, __expectString, `temporalAdaptiveQuantization`],
        TemporalIds: [, __expectString, `temporalIds`],
        Tiles: [, __expectString, `tiles`],
        UnregisteredSeiTimecode: [, __expectString, `unregisteredSeiTimecode`],
        WriteMp4PackagingType: [, __expectString, `writeMp4PackagingType`],
    });
};
const de_Hdr10Metadata = (output, context) => {
    return take(output, {
        BluePrimaryX: [, __expectInt32, `bluePrimaryX`],
        BluePrimaryY: [, __expectInt32, `bluePrimaryY`],
        GreenPrimaryX: [, __expectInt32, `greenPrimaryX`],
        GreenPrimaryY: [, __expectInt32, `greenPrimaryY`],
        MaxContentLightLevel: [, __expectInt32, `maxContentLightLevel`],
        MaxFrameAverageLightLevel: [, __expectInt32, `maxFrameAverageLightLevel`],
        MaxLuminance: [, __expectInt32, `maxLuminance`],
        MinLuminance: [, __expectInt32, `minLuminance`],
        RedPrimaryX: [, __expectInt32, `redPrimaryX`],
        RedPrimaryY: [, __expectInt32, `redPrimaryY`],
        WhitePointX: [, __expectInt32, `whitePointX`],
        WhitePointY: [, __expectInt32, `whitePointY`],
    });
};
const de_Hdr10Plus = (output, context) => {
    return take(output, {
        MasteringMonitorNits: [, __expectInt32, `masteringMonitorNits`],
        TargetMonitorNits: [, __expectInt32, `targetMonitorNits`],
    });
};
const de_HlsAdditionalManifest = (output, context) => {
    return take(output, {
        ManifestNameModifier: [, __expectString, `manifestNameModifier`],
        SelectedOutputs: [, _json, `selectedOutputs`],
    });
};
const de_HlsCaptionLanguageMapping = (output, context) => {
    return take(output, {
        CaptionChannel: [, __expectInt32, `captionChannel`],
        CustomLanguageCode: [, __expectString, `customLanguageCode`],
        LanguageCode: [, __expectString, `languageCode`],
        LanguageDescription: [, __expectString, `languageDescription`],
    });
};
const de_HlsEncryptionSettings = (output, context) => {
    return take(output, {
        ConstantInitializationVector: [, __expectString, `constantInitializationVector`],
        EncryptionMethod: [, __expectString, `encryptionMethod`],
        InitializationVectorInManifest: [, __expectString, `initializationVectorInManifest`],
        OfflineEncrypted: [, __expectString, `offlineEncrypted`],
        SpekeKeyProvider: [, (_) => de_SpekeKeyProvider(_, context), `spekeKeyProvider`],
        StaticKeyProvider: [, (_) => de_StaticKeyProvider(_, context), `staticKeyProvider`],
        Type: [, __expectString, `type`],
    });
};
const de_HlsGroupSettings = (output, context) => {
    return take(output, {
        AdMarkers: [, _json, `adMarkers`],
        AdditionalManifests: [, (_) => de___listOfHlsAdditionalManifest(_, context), `additionalManifests`],
        AudioOnlyHeader: [, __expectString, `audioOnlyHeader`],
        BaseUrl: [, __expectString, `baseUrl`],
        CaptionLanguageMappings: [
            ,
            (_) => de___listOfHlsCaptionLanguageMapping(_, context),
            `captionLanguageMappings`,
        ],
        CaptionLanguageSetting: [, __expectString, `captionLanguageSetting`],
        CaptionSegmentLengthControl: [, __expectString, `captionSegmentLengthControl`],
        ClientCache: [, __expectString, `clientCache`],
        CodecSpecification: [, __expectString, `codecSpecification`],
        Destination: [, __expectString, `destination`],
        DestinationSettings: [, (_) => de_DestinationSettings(_, context), `destinationSettings`],
        DirectoryStructure: [, __expectString, `directoryStructure`],
        Encryption: [, (_) => de_HlsEncryptionSettings(_, context), `encryption`],
        ImageBasedTrickPlay: [, __expectString, `imageBasedTrickPlay`],
        ImageBasedTrickPlaySettings: [
            ,
            (_) => de_HlsImageBasedTrickPlaySettings(_, context),
            `imageBasedTrickPlaySettings`,
        ],
        ManifestCompression: [, __expectString, `manifestCompression`],
        ManifestDurationFormat: [, __expectString, `manifestDurationFormat`],
        MinFinalSegmentLength: [, __limitedParseDouble, `minFinalSegmentLength`],
        MinSegmentLength: [, __expectInt32, `minSegmentLength`],
        OutputSelection: [, __expectString, `outputSelection`],
        ProgramDateTime: [, __expectString, `programDateTime`],
        ProgramDateTimePeriod: [, __expectInt32, `programDateTimePeriod`],
        ProgressiveWriteHlsManifest: [, __expectString, `progressiveWriteHlsManifest`],
        SegmentControl: [, __expectString, `segmentControl`],
        SegmentLength: [, __expectInt32, `segmentLength`],
        SegmentLengthControl: [, __expectString, `segmentLengthControl`],
        SegmentsPerSubdirectory: [, __expectInt32, `segmentsPerSubdirectory`],
        StreamInfResolution: [, __expectString, `streamInfResolution`],
        TargetDurationCompatibilityMode: [, __expectString, `targetDurationCompatibilityMode`],
        TimedMetadataId3Frame: [, __expectString, `timedMetadataId3Frame`],
        TimedMetadataId3Period: [, __expectInt32, `timedMetadataId3Period`],
        TimestampDeltaMilliseconds: [, __expectInt32, `timestampDeltaMilliseconds`],
    });
};
const de_HlsImageBasedTrickPlaySettings = (output, context) => {
    return take(output, {
        IntervalCadence: [, __expectString, `intervalCadence`],
        ThumbnailHeight: [, __expectInt32, `thumbnailHeight`],
        ThumbnailInterval: [, __limitedParseDouble, `thumbnailInterval`],
        ThumbnailWidth: [, __expectInt32, `thumbnailWidth`],
        TileHeight: [, __expectInt32, `tileHeight`],
        TileWidth: [, __expectInt32, `tileWidth`],
    });
};
const de_HlsRenditionGroupSettings = (output, context) => {
    return take(output, {
        RenditionGroupId: [, __expectString, `renditionGroupId`],
        RenditionLanguageCode: [, __expectString, `renditionLanguageCode`],
        RenditionName: [, __expectString, `renditionName`],
    });
};
const de_HlsSettings = (output, context) => {
    return take(output, {
        AudioGroupId: [, __expectString, `audioGroupId`],
        AudioOnlyContainer: [, __expectString, `audioOnlyContainer`],
        AudioRenditionSets: [, __expectString, `audioRenditionSets`],
        AudioTrackType: [, __expectString, `audioTrackType`],
        DescriptiveVideoServiceFlag: [, __expectString, `descriptiveVideoServiceFlag`],
        IFrameOnlyManifest: [, __expectString, `iFrameOnlyManifest`],
        SegmentModifier: [, __expectString, `segmentModifier`],
    });
};
const de_HopDestination = (output, context) => {
    return take(output, {
        Priority: [, __expectInt32, `priority`],
        Queue: [, __expectString, `queue`],
        WaitMinutes: [, __expectInt32, `waitMinutes`],
    });
};
const de_Id3Insertion = (output, context) => {
    return take(output, {
        Id3: [, __expectString, `id3`],
        Timecode: [, __expectString, `timecode`],
    });
};
const de_ImageInserter = (output, context) => {
    return take(output, {
        InsertableImages: [, (_) => de___listOfInsertableImage(_, context), `insertableImages`],
        SdrReferenceWhiteLevel: [, __expectInt32, `sdrReferenceWhiteLevel`],
    });
};
const de_ImscDestinationSettings = (output, context) => {
    return take(output, {
        Accessibility: [, __expectString, `accessibility`],
        StylePassthrough: [, __expectString, `stylePassthrough`],
    });
};
const de_Input = (output, context) => {
    return take(output, {
        AdvancedInputFilter: [, __expectString, `advancedInputFilter`],
        AdvancedInputFilterSettings: [
            ,
            (_) => de_AdvancedInputFilterSettings(_, context),
            `advancedInputFilterSettings`,
        ],
        AudioSelectorGroups: [, (_) => de___mapOfAudioSelectorGroup(_, context), `audioSelectorGroups`],
        AudioSelectors: [, (_) => de___mapOfAudioSelector(_, context), `audioSelectors`],
        CaptionSelectors: [, (_) => de___mapOfCaptionSelector(_, context), `captionSelectors`],
        Crop: [, (_) => de_Rectangle(_, context), `crop`],
        DeblockFilter: [, __expectString, `deblockFilter`],
        DecryptionSettings: [, (_) => de_InputDecryptionSettings(_, context), `decryptionSettings`],
        DenoiseFilter: [, __expectString, `denoiseFilter`],
        DolbyVisionMetadataXml: [, __expectString, `dolbyVisionMetadataXml`],
        DynamicAudioSelectors: [, (_) => de___mapOfDynamicAudioSelector(_, context), `dynamicAudioSelectors`],
        FileInput: [, __expectString, `fileInput`],
        FilterEnable: [, __expectString, `filterEnable`],
        FilterStrength: [, __expectInt32, `filterStrength`],
        ImageInserter: [, (_) => de_ImageInserter(_, context), `imageInserter`],
        InputClippings: [, (_) => de___listOfInputClipping(_, context), `inputClippings`],
        InputScanType: [, __expectString, `inputScanType`],
        Position: [, (_) => de_Rectangle(_, context), `position`],
        ProgramNumber: [, __expectInt32, `programNumber`],
        PsiControl: [, __expectString, `psiControl`],
        SupplementalImps: [, _json, `supplementalImps`],
        TimecodeSource: [, __expectString, `timecodeSource`],
        TimecodeStart: [, __expectString, `timecodeStart`],
        VideoGenerator: [, (_) => de_InputVideoGenerator(_, context), `videoGenerator`],
        VideoOverlays: [, (_) => de___listOfVideoOverlay(_, context), `videoOverlays`],
        VideoSelector: [, (_) => de_VideoSelector(_, context), `videoSelector`],
    });
};
const de_InputClipping = (output, context) => {
    return take(output, {
        EndTimecode: [, __expectString, `endTimecode`],
        StartTimecode: [, __expectString, `startTimecode`],
    });
};
const de_InputDecryptionSettings = (output, context) => {
    return take(output, {
        DecryptionMode: [, __expectString, `decryptionMode`],
        EncryptedDecryptionKey: [, __expectString, `encryptedDecryptionKey`],
        InitializationVector: [, __expectString, `initializationVector`],
        KmsKeyRegion: [, __expectString, `kmsKeyRegion`],
    });
};
const de_InputTemplate = (output, context) => {
    return take(output, {
        AdvancedInputFilter: [, __expectString, `advancedInputFilter`],
        AdvancedInputFilterSettings: [
            ,
            (_) => de_AdvancedInputFilterSettings(_, context),
            `advancedInputFilterSettings`,
        ],
        AudioSelectorGroups: [, (_) => de___mapOfAudioSelectorGroup(_, context), `audioSelectorGroups`],
        AudioSelectors: [, (_) => de___mapOfAudioSelector(_, context), `audioSelectors`],
        CaptionSelectors: [, (_) => de___mapOfCaptionSelector(_, context), `captionSelectors`],
        Crop: [, (_) => de_Rectangle(_, context), `crop`],
        DeblockFilter: [, __expectString, `deblockFilter`],
        DenoiseFilter: [, __expectString, `denoiseFilter`],
        DolbyVisionMetadataXml: [, __expectString, `dolbyVisionMetadataXml`],
        DynamicAudioSelectors: [, (_) => de___mapOfDynamicAudioSelector(_, context), `dynamicAudioSelectors`],
        FilterEnable: [, __expectString, `filterEnable`],
        FilterStrength: [, __expectInt32, `filterStrength`],
        ImageInserter: [, (_) => de_ImageInserter(_, context), `imageInserter`],
        InputClippings: [, (_) => de___listOfInputClipping(_, context), `inputClippings`],
        InputScanType: [, __expectString, `inputScanType`],
        Position: [, (_) => de_Rectangle(_, context), `position`],
        ProgramNumber: [, __expectInt32, `programNumber`],
        PsiControl: [, __expectString, `psiControl`],
        TimecodeSource: [, __expectString, `timecodeSource`],
        TimecodeStart: [, __expectString, `timecodeStart`],
        VideoOverlays: [, (_) => de___listOfVideoOverlay(_, context), `videoOverlays`],
        VideoSelector: [, (_) => de_VideoSelector(_, context), `videoSelector`],
    });
};
const de_InputVideoGenerator = (output, context) => {
    return take(output, {
        Channels: [, __expectInt32, `channels`],
        Duration: [, __expectInt32, `duration`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        SampleRate: [, __expectInt32, `sampleRate`],
    });
};
const de_InsertableImage = (output, context) => {
    return take(output, {
        Duration: [, __expectInt32, `duration`],
        FadeIn: [, __expectInt32, `fadeIn`],
        FadeOut: [, __expectInt32, `fadeOut`],
        Height: [, __expectInt32, `height`],
        ImageInserterInput: [, __expectString, `imageInserterInput`],
        ImageX: [, __expectInt32, `imageX`],
        ImageY: [, __expectInt32, `imageY`],
        Layer: [, __expectInt32, `layer`],
        Opacity: [, __expectInt32, `opacity`],
        StartTime: [, __expectString, `startTime`],
        Width: [, __expectInt32, `width`],
    });
};
const de_Job = (output, context) => {
    return take(output, {
        AccelerationSettings: [, (_) => de_AccelerationSettings(_, context), `accelerationSettings`],
        AccelerationStatus: [, __expectString, `accelerationStatus`],
        Arn: [, __expectString, `arn`],
        BillingTagsSource: [, __expectString, `billingTagsSource`],
        ClientRequestToken: [, __expectString, `clientRequestToken`],
        CreatedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `createdAt`],
        CurrentPhase: [, __expectString, `currentPhase`],
        ErrorCode: [, __expectInt32, `errorCode`],
        ErrorMessage: [, __expectString, `errorMessage`],
        HopDestinations: [, (_) => de___listOfHopDestination(_, context), `hopDestinations`],
        Id: [, __expectString, `id`],
        JobEngineVersionRequested: [, __expectString, `jobEngineVersionRequested`],
        JobEngineVersionUsed: [, __expectString, `jobEngineVersionUsed`],
        JobPercentComplete: [, __expectInt32, `jobPercentComplete`],
        JobTemplate: [, __expectString, `jobTemplate`],
        Messages: [, (_) => de_JobMessages(_, context), `messages`],
        OutputGroupDetails: [, (_) => de___listOfOutputGroupDetail(_, context), `outputGroupDetails`],
        Priority: [, __expectInt32, `priority`],
        Queue: [, __expectString, `queue`],
        QueueTransitions: [, (_) => de___listOfQueueTransition(_, context), `queueTransitions`],
        RetryCount: [, __expectInt32, `retryCount`],
        Role: [, __expectString, `role`],
        Settings: [, (_) => de_JobSettings(_, context), `settings`],
        SimulateReservedQueue: [, __expectString, `simulateReservedQueue`],
        Status: [, __expectString, `status`],
        StatusUpdateInterval: [, __expectString, `statusUpdateInterval`],
        Timing: [, (_) => de_Timing(_, context), `timing`],
        UserMetadata: [, _json, `userMetadata`],
        Warnings: [, (_) => de___listOfWarningGroup(_, context), `warnings`],
    });
};
const de_JobEngineVersion = (output, context) => {
    return take(output, {
        ExpirationDate: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `expirationDate`],
        Version: [, __expectString, `version`],
    });
};
const de_JobMessages = (output, context) => {
    return take(output, {
        Info: [, _json, `info`],
        Warning: [, _json, `warning`],
    });
};
const de_JobSettings = (output, context) => {
    return take(output, {
        AdAvailOffset: [, __expectInt32, `adAvailOffset`],
        AvailBlanking: [, (_) => de_AvailBlanking(_, context), `availBlanking`],
        ColorConversion3DLUTSettings: [
            ,
            (_) => de___listOfColorConversion3DLUTSetting(_, context),
            `colorConversion3DLUTSettings`,
        ],
        Esam: [, (_) => de_EsamSettings(_, context), `esam`],
        ExtendedDataServices: [, (_) => de_ExtendedDataServices(_, context), `extendedDataServices`],
        FollowSource: [, __expectInt32, `followSource`],
        Inputs: [, (_) => de___listOfInput(_, context), `inputs`],
        KantarWatermark: [, (_) => de_KantarWatermarkSettings(_, context), `kantarWatermark`],
        MotionImageInserter: [, (_) => de_MotionImageInserter(_, context), `motionImageInserter`],
        NielsenConfiguration: [, (_) => de_NielsenConfiguration(_, context), `nielsenConfiguration`],
        NielsenNonLinearWatermark: [
            ,
            (_) => de_NielsenNonLinearWatermarkSettings(_, context),
            `nielsenNonLinearWatermark`,
        ],
        OutputGroups: [, (_) => de___listOfOutputGroup(_, context), `outputGroups`],
        TimecodeConfig: [, (_) => de_TimecodeConfig(_, context), `timecodeConfig`],
        TimedMetadataInsertion: [, (_) => de_TimedMetadataInsertion(_, context), `timedMetadataInsertion`],
    });
};
const de_JobTemplate = (output, context) => {
    return take(output, {
        AccelerationSettings: [, (_) => de_AccelerationSettings(_, context), `accelerationSettings`],
        Arn: [, __expectString, `arn`],
        Category: [, __expectString, `category`],
        CreatedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `createdAt`],
        Description: [, __expectString, `description`],
        HopDestinations: [, (_) => de___listOfHopDestination(_, context), `hopDestinations`],
        LastUpdated: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `lastUpdated`],
        Name: [, __expectString, `name`],
        Priority: [, __expectInt32, `priority`],
        Queue: [, __expectString, `queue`],
        Settings: [, (_) => de_JobTemplateSettings(_, context), `settings`],
        StatusUpdateInterval: [, __expectString, `statusUpdateInterval`],
        Type: [, __expectString, `type`],
    });
};
const de_JobTemplateSettings = (output, context) => {
    return take(output, {
        AdAvailOffset: [, __expectInt32, `adAvailOffset`],
        AvailBlanking: [, (_) => de_AvailBlanking(_, context), `availBlanking`],
        ColorConversion3DLUTSettings: [
            ,
            (_) => de___listOfColorConversion3DLUTSetting(_, context),
            `colorConversion3DLUTSettings`,
        ],
        Esam: [, (_) => de_EsamSettings(_, context), `esam`],
        ExtendedDataServices: [, (_) => de_ExtendedDataServices(_, context), `extendedDataServices`],
        FollowSource: [, __expectInt32, `followSource`],
        Inputs: [, (_) => de___listOfInputTemplate(_, context), `inputs`],
        KantarWatermark: [, (_) => de_KantarWatermarkSettings(_, context), `kantarWatermark`],
        MotionImageInserter: [, (_) => de_MotionImageInserter(_, context), `motionImageInserter`],
        NielsenConfiguration: [, (_) => de_NielsenConfiguration(_, context), `nielsenConfiguration`],
        NielsenNonLinearWatermark: [
            ,
            (_) => de_NielsenNonLinearWatermarkSettings(_, context),
            `nielsenNonLinearWatermark`,
        ],
        OutputGroups: [, (_) => de___listOfOutputGroup(_, context), `outputGroups`],
        TimecodeConfig: [, (_) => de_TimecodeConfig(_, context), `timecodeConfig`],
        TimedMetadataInsertion: [, (_) => de_TimedMetadataInsertion(_, context), `timedMetadataInsertion`],
    });
};
const de_KantarWatermarkSettings = (output, context) => {
    return take(output, {
        ChannelName: [, __expectString, `channelName`],
        ContentReference: [, __expectString, `contentReference`],
        CredentialsSecretName: [, __expectString, `credentialsSecretName`],
        FileOffset: [, __limitedParseDouble, `fileOffset`],
        KantarLicenseId: [, __expectInt32, `kantarLicenseId`],
        KantarServerUrl: [, __expectString, `kantarServerUrl`],
        LogDestination: [, __expectString, `logDestination`],
        Metadata3: [, __expectString, `metadata3`],
        Metadata4: [, __expectString, `metadata4`],
        Metadata5: [, __expectString, `metadata5`],
        Metadata6: [, __expectString, `metadata6`],
        Metadata7: [, __expectString, `metadata7`],
        Metadata8: [, __expectString, `metadata8`],
    });
};
const de_M2tsScte35Esam = (output, context) => {
    return take(output, {
        Scte35EsamPid: [, __expectInt32, `scte35EsamPid`],
    });
};
const de_M2tsSettings = (output, context) => {
    return take(output, {
        AudioBufferModel: [, __expectString, `audioBufferModel`],
        AudioDuration: [, __expectString, `audioDuration`],
        AudioFramesPerPes: [, __expectInt32, `audioFramesPerPes`],
        AudioPids: [, _json, `audioPids`],
        AudioPtsOffsetDelta: [, __expectInt32, `audioPtsOffsetDelta`],
        Bitrate: [, __expectInt32, `bitrate`],
        BufferModel: [, __expectString, `bufferModel`],
        DataPTSControl: [, __expectString, `dataPTSControl`],
        DvbNitSettings: [, (_) => de_DvbNitSettings(_, context), `dvbNitSettings`],
        DvbSdtSettings: [, (_) => de_DvbSdtSettings(_, context), `dvbSdtSettings`],
        DvbSubPids: [, _json, `dvbSubPids`],
        DvbTdtSettings: [, (_) => de_DvbTdtSettings(_, context), `dvbTdtSettings`],
        DvbTeletextPid: [, __expectInt32, `dvbTeletextPid`],
        EbpAudioInterval: [, __expectString, `ebpAudioInterval`],
        EbpPlacement: [, __expectString, `ebpPlacement`],
        EsRateInPes: [, __expectString, `esRateInPes`],
        ForceTsVideoEbpOrder: [, __expectString, `forceTsVideoEbpOrder`],
        FragmentTime: [, __limitedParseDouble, `fragmentTime`],
        KlvMetadata: [, __expectString, `klvMetadata`],
        MaxPcrInterval: [, __expectInt32, `maxPcrInterval`],
        MinEbpInterval: [, __expectInt32, `minEbpInterval`],
        NielsenId3: [, __expectString, `nielsenId3`],
        NullPacketBitrate: [, __limitedParseDouble, `nullPacketBitrate`],
        PatInterval: [, __expectInt32, `patInterval`],
        PcrControl: [, __expectString, `pcrControl`],
        PcrPid: [, __expectInt32, `pcrPid`],
        PmtInterval: [, __expectInt32, `pmtInterval`],
        PmtPid: [, __expectInt32, `pmtPid`],
        PreventBufferUnderflow: [, __expectString, `preventBufferUnderflow`],
        PrivateMetadataPid: [, __expectInt32, `privateMetadataPid`],
        ProgramNumber: [, __expectInt32, `programNumber`],
        PtsOffset: [, __expectInt32, `ptsOffset`],
        PtsOffsetMode: [, __expectString, `ptsOffsetMode`],
        RateMode: [, __expectString, `rateMode`],
        Scte35Esam: [, (_) => de_M2tsScte35Esam(_, context), `scte35Esam`],
        Scte35Pid: [, __expectInt32, `scte35Pid`],
        Scte35Source: [, __expectString, `scte35Source`],
        SegmentationMarkers: [, __expectString, `segmentationMarkers`],
        SegmentationStyle: [, __expectString, `segmentationStyle`],
        SegmentationTime: [, __limitedParseDouble, `segmentationTime`],
        TimedMetadataPid: [, __expectInt32, `timedMetadataPid`],
        TransportStreamId: [, __expectInt32, `transportStreamId`],
        VideoPid: [, __expectInt32, `videoPid`],
    });
};
const de_M3u8Settings = (output, context) => {
    return take(output, {
        AudioDuration: [, __expectString, `audioDuration`],
        AudioFramesPerPes: [, __expectInt32, `audioFramesPerPes`],
        AudioPids: [, _json, `audioPids`],
        AudioPtsOffsetDelta: [, __expectInt32, `audioPtsOffsetDelta`],
        DataPTSControl: [, __expectString, `dataPTSControl`],
        MaxPcrInterval: [, __expectInt32, `maxPcrInterval`],
        NielsenId3: [, __expectString, `nielsenId3`],
        PatInterval: [, __expectInt32, `patInterval`],
        PcrControl: [, __expectString, `pcrControl`],
        PcrPid: [, __expectInt32, `pcrPid`],
        PmtInterval: [, __expectInt32, `pmtInterval`],
        PmtPid: [, __expectInt32, `pmtPid`],
        PrivateMetadataPid: [, __expectInt32, `privateMetadataPid`],
        ProgramNumber: [, __expectInt32, `programNumber`],
        PtsOffset: [, __expectInt32, `ptsOffset`],
        PtsOffsetMode: [, __expectString, `ptsOffsetMode`],
        Scte35Pid: [, __expectInt32, `scte35Pid`],
        Scte35Source: [, __expectString, `scte35Source`],
        TimedMetadata: [, __expectString, `timedMetadata`],
        TimedMetadataPid: [, __expectInt32, `timedMetadataPid`],
        TransportStreamId: [, __expectInt32, `transportStreamId`],
        VideoPid: [, __expectInt32, `videoPid`],
    });
};
const de_Metadata = (output, context) => {
    return take(output, {
        ETag: [, __expectString, `eTag`],
        FileSize: [, __expectLong, `fileSize`],
        LastModified: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `lastModified`],
        MimeType: [, __expectString, `mimeType`],
    });
};
const de_MinBottomRenditionSize = (output, context) => {
    return take(output, {
        Height: [, __expectInt32, `height`],
        Width: [, __expectInt32, `width`],
    });
};
const de_MinTopRenditionSize = (output, context) => {
    return take(output, {
        Height: [, __expectInt32, `height`],
        Width: [, __expectInt32, `width`],
    });
};
const de_MotionImageInserter = (output, context) => {
    return take(output, {
        Framerate: [, (_) => de_MotionImageInsertionFramerate(_, context), `framerate`],
        Input: [, __expectString, `input`],
        InsertionMode: [, __expectString, `insertionMode`],
        Offset: [, (_) => de_MotionImageInsertionOffset(_, context), `offset`],
        Playback: [, __expectString, `playback`],
        StartTime: [, __expectString, `startTime`],
    });
};
const de_MotionImageInsertionFramerate = (output, context) => {
    return take(output, {
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
    });
};
const de_MotionImageInsertionOffset = (output, context) => {
    return take(output, {
        ImageX: [, __expectInt32, `imageX`],
        ImageY: [, __expectInt32, `imageY`],
    });
};
const de_MovSettings = (output, context) => {
    return take(output, {
        ClapAtom: [, __expectString, `clapAtom`],
        CslgAtom: [, __expectString, `cslgAtom`],
        Mpeg2FourCCControl: [, __expectString, `mpeg2FourCCControl`],
        PaddingControl: [, __expectString, `paddingControl`],
        Reference: [, __expectString, `reference`],
    });
};
const de_Mp2Settings = (output, context) => {
    return take(output, {
        Bitrate: [, __expectInt32, `bitrate`],
        Channels: [, __expectInt32, `channels`],
        SampleRate: [, __expectInt32, `sampleRate`],
    });
};
const de_Mp3Settings = (output, context) => {
    return take(output, {
        Bitrate: [, __expectInt32, `bitrate`],
        Channels: [, __expectInt32, `channels`],
        RateControlMode: [, __expectString, `rateControlMode`],
        SampleRate: [, __expectInt32, `sampleRate`],
        VbrQuality: [, __expectInt32, `vbrQuality`],
    });
};
const de_Mp4Settings = (output, context) => {
    return take(output, {
        AudioDuration: [, __expectString, `audioDuration`],
        CslgAtom: [, __expectString, `cslgAtom`],
        CttsVersion: [, __expectInt32, `cttsVersion`],
        FreeSpaceBox: [, __expectString, `freeSpaceBox`],
        MoovPlacement: [, __expectString, `moovPlacement`],
        Mp4MajorBrand: [, __expectString, `mp4MajorBrand`],
    });
};
const de_MpdSettings = (output, context) => {
    return take(output, {
        AccessibilityCaptionHints: [, __expectString, `accessibilityCaptionHints`],
        AudioDuration: [, __expectString, `audioDuration`],
        CaptionContainerType: [, __expectString, `captionContainerType`],
        KlvMetadata: [, __expectString, `klvMetadata`],
        ManifestMetadataSignaling: [, __expectString, `manifestMetadataSignaling`],
        Scte35Esam: [, __expectString, `scte35Esam`],
        Scte35Source: [, __expectString, `scte35Source`],
        TimedMetadata: [, __expectString, `timedMetadata`],
        TimedMetadataBoxVersion: [, __expectString, `timedMetadataBoxVersion`],
        TimedMetadataSchemeIdUri: [, __expectString, `timedMetadataSchemeIdUri`],
        TimedMetadataValue: [, __expectString, `timedMetadataValue`],
    });
};
const de_Mpeg2Settings = (output, context) => {
    return take(output, {
        AdaptiveQuantization: [, __expectString, `adaptiveQuantization`],
        Bitrate: [, __expectInt32, `bitrate`],
        CodecLevel: [, __expectString, `codecLevel`],
        CodecProfile: [, __expectString, `codecProfile`],
        DynamicSubGop: [, __expectString, `dynamicSubGop`],
        FramerateControl: [, __expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, __expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        GopClosedCadence: [, __expectInt32, `gopClosedCadence`],
        GopSize: [, __limitedParseDouble, `gopSize`],
        GopSizeUnits: [, __expectString, `gopSizeUnits`],
        HrdBufferFinalFillPercentage: [, __expectInt32, `hrdBufferFinalFillPercentage`],
        HrdBufferInitialFillPercentage: [, __expectInt32, `hrdBufferInitialFillPercentage`],
        HrdBufferSize: [, __expectInt32, `hrdBufferSize`],
        InterlaceMode: [, __expectString, `interlaceMode`],
        IntraDcPrecision: [, __expectString, `intraDcPrecision`],
        MaxBitrate: [, __expectInt32, `maxBitrate`],
        MinIInterval: [, __expectInt32, `minIInterval`],
        NumberBFramesBetweenReferenceFrames: [, __expectInt32, `numberBFramesBetweenReferenceFrames`],
        ParControl: [, __expectString, `parControl`],
        ParDenominator: [, __expectInt32, `parDenominator`],
        ParNumerator: [, __expectInt32, `parNumerator`],
        PerFrameMetrics: [, _json, `perFrameMetrics`],
        QualityTuningLevel: [, __expectString, `qualityTuningLevel`],
        RateControlMode: [, __expectString, `rateControlMode`],
        ScanTypeConversionMode: [, __expectString, `scanTypeConversionMode`],
        SceneChangeDetect: [, __expectString, `sceneChangeDetect`],
        SlowPal: [, __expectString, `slowPal`],
        Softness: [, __expectInt32, `softness`],
        SpatialAdaptiveQuantization: [, __expectString, `spatialAdaptiveQuantization`],
        Syntax: [, __expectString, `syntax`],
        Telecine: [, __expectString, `telecine`],
        TemporalAdaptiveQuantization: [, __expectString, `temporalAdaptiveQuantization`],
    });
};
const de_MsSmoothAdditionalManifest = (output, context) => {
    return take(output, {
        ManifestNameModifier: [, __expectString, `manifestNameModifier`],
        SelectedOutputs: [, _json, `selectedOutputs`],
    });
};
const de_MsSmoothEncryptionSettings = (output, context) => {
    return take(output, {
        SpekeKeyProvider: [, (_) => de_SpekeKeyProvider(_, context), `spekeKeyProvider`],
    });
};
const de_MsSmoothGroupSettings = (output, context) => {
    return take(output, {
        AdditionalManifests: [, (_) => de___listOfMsSmoothAdditionalManifest(_, context), `additionalManifests`],
        AudioDeduplication: [, __expectString, `audioDeduplication`],
        Destination: [, __expectString, `destination`],
        DestinationSettings: [, (_) => de_DestinationSettings(_, context), `destinationSettings`],
        Encryption: [, (_) => de_MsSmoothEncryptionSettings(_, context), `encryption`],
        FragmentLength: [, __expectInt32, `fragmentLength`],
        FragmentLengthControl: [, __expectString, `fragmentLengthControl`],
        ManifestEncoding: [, __expectString, `manifestEncoding`],
    });
};
const de_MxfSettings = (output, context) => {
    return take(output, {
        AfdSignaling: [, __expectString, `afdSignaling`],
        Profile: [, __expectString, `profile`],
        XavcProfileSettings: [, (_) => de_MxfXavcProfileSettings(_, context), `xavcProfileSettings`],
    });
};
const de_MxfXavcProfileSettings = (output, context) => {
    return take(output, {
        DurationMode: [, __expectString, `durationMode`],
        MaxAncDataSize: [, __expectInt32, `maxAncDataSize`],
    });
};
const de_NexGuardFileMarkerSettings = (output, context) => {
    return take(output, {
        License: [, __expectString, `license`],
        Payload: [, __expectInt32, `payload`],
        Preset: [, __expectString, `preset`],
        Strength: [, __expectString, `strength`],
    });
};
const de_NielsenConfiguration = (output, context) => {
    return take(output, {
        BreakoutCode: [, __expectInt32, `breakoutCode`],
        DistributorId: [, __expectString, `distributorId`],
    });
};
const de_NielsenNonLinearWatermarkSettings = (output, context) => {
    return take(output, {
        ActiveWatermarkProcess: [, __expectString, `activeWatermarkProcess`],
        AdiFilename: [, __expectString, `adiFilename`],
        AssetId: [, __expectString, `assetId`],
        AssetName: [, __expectString, `assetName`],
        CbetSourceId: [, __expectString, `cbetSourceId`],
        EpisodeId: [, __expectString, `episodeId`],
        MetadataDestination: [, __expectString, `metadataDestination`],
        SourceId: [, __expectInt32, `sourceId`],
        SourceWatermarkStatus: [, __expectString, `sourceWatermarkStatus`],
        TicServerUrl: [, __expectString, `ticServerUrl`],
        UniqueTicPerAudioTrack: [, __expectString, `uniqueTicPerAudioTrack`],
    });
};
const de_NoiseReducer = (output, context) => {
    return take(output, {
        Filter: [, __expectString, `filter`],
        FilterSettings: [, (_) => de_NoiseReducerFilterSettings(_, context), `filterSettings`],
        SpatialFilterSettings: [, (_) => de_NoiseReducerSpatialFilterSettings(_, context), `spatialFilterSettings`],
        TemporalFilterSettings: [, (_) => de_NoiseReducerTemporalFilterSettings(_, context), `temporalFilterSettings`],
    });
};
const de_NoiseReducerFilterSettings = (output, context) => {
    return take(output, {
        Strength: [, __expectInt32, `strength`],
    });
};
const de_NoiseReducerSpatialFilterSettings = (output, context) => {
    return take(output, {
        PostFilterSharpenStrength: [, __expectInt32, `postFilterSharpenStrength`],
        Speed: [, __expectInt32, `speed`],
        Strength: [, __expectInt32, `strength`],
    });
};
const de_NoiseReducerTemporalFilterSettings = (output, context) => {
    return take(output, {
        AggressiveMode: [, __expectInt32, `aggressiveMode`],
        PostTemporalSharpening: [, __expectString, `postTemporalSharpening`],
        PostTemporalSharpeningStrength: [, __expectString, `postTemporalSharpeningStrength`],
        Speed: [, __expectInt32, `speed`],
        Strength: [, __expectInt32, `strength`],
    });
};
const de_OpusSettings = (output, context) => {
    return take(output, {
        Bitrate: [, __expectInt32, `bitrate`],
        Channels: [, __expectInt32, `channels`],
        SampleRate: [, __expectInt32, `sampleRate`],
    });
};
const de_Output = (output, context) => {
    return take(output, {
        AudioDescriptions: [, (_) => de___listOfAudioDescription(_, context), `audioDescriptions`],
        CaptionDescriptions: [, (_) => de___listOfCaptionDescription(_, context), `captionDescriptions`],
        ContainerSettings: [, (_) => de_ContainerSettings(_, context), `containerSettings`],
        Extension: [, __expectString, `extension`],
        NameModifier: [, __expectString, `nameModifier`],
        OutputSettings: [, (_) => de_OutputSettings(_, context), `outputSettings`],
        Preset: [, __expectString, `preset`],
        VideoDescription: [, (_) => de_VideoDescription(_, context), `videoDescription`],
    });
};
const de_OutputChannelMapping = (output, context) => {
    return take(output, {
        InputChannels: [, _json, `inputChannels`],
        InputChannelsFineTune: [, (_) => de___listOf__doubleMinNegative60Max6(_, context), `inputChannelsFineTune`],
    });
};
const de_OutputDetail = (output, context) => {
    return take(output, {
        DurationInMs: [, __expectInt32, `durationInMs`],
        VideoDetails: [, (_) => de_VideoDetail(_, context), `videoDetails`],
    });
};
const de_OutputGroup = (output, context) => {
    return take(output, {
        AutomatedEncodingSettings: [, (_) => de_AutomatedEncodingSettings(_, context), `automatedEncodingSettings`],
        CustomName: [, __expectString, `customName`],
        Name: [, __expectString, `name`],
        OutputGroupSettings: [, (_) => de_OutputGroupSettings(_, context), `outputGroupSettings`],
        Outputs: [, (_) => de___listOfOutput(_, context), `outputs`],
    });
};
const de_OutputGroupDetail = (output, context) => {
    return take(output, {
        OutputDetails: [, (_) => de___listOfOutputDetail(_, context), `outputDetails`],
    });
};
const de_OutputGroupSettings = (output, context) => {
    return take(output, {
        CmafGroupSettings: [, (_) => de_CmafGroupSettings(_, context), `cmafGroupSettings`],
        DashIsoGroupSettings: [, (_) => de_DashIsoGroupSettings(_, context), `dashIsoGroupSettings`],
        FileGroupSettings: [, (_) => de_FileGroupSettings(_, context), `fileGroupSettings`],
        HlsGroupSettings: [, (_) => de_HlsGroupSettings(_, context), `hlsGroupSettings`],
        MsSmoothGroupSettings: [, (_) => de_MsSmoothGroupSettings(_, context), `msSmoothGroupSettings`],
        PerFrameMetrics: [, _json, `perFrameMetrics`],
        Type: [, __expectString, `type`],
    });
};
const de_OutputSettings = (output, context) => {
    return take(output, {
        HlsSettings: [, (_) => de_HlsSettings(_, context), `hlsSettings`],
    });
};
const de_PartnerWatermarking = (output, context) => {
    return take(output, {
        NexguardFileMarkerSettings: [, (_) => de_NexGuardFileMarkerSettings(_, context), `nexguardFileMarkerSettings`],
    });
};
const de_Policy = (output, context) => {
    return take(output, {
        HttpInputs: [, __expectString, `httpInputs`],
        HttpsInputs: [, __expectString, `httpsInputs`],
        S3Inputs: [, __expectString, `s3Inputs`],
    });
};
const de_Preset = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        Category: [, __expectString, `category`],
        CreatedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `createdAt`],
        Description: [, __expectString, `description`],
        LastUpdated: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `lastUpdated`],
        Name: [, __expectString, `name`],
        Settings: [, (_) => de_PresetSettings(_, context), `settings`],
        Type: [, __expectString, `type`],
    });
};
const de_PresetSettings = (output, context) => {
    return take(output, {
        AudioDescriptions: [, (_) => de___listOfAudioDescription(_, context), `audioDescriptions`],
        CaptionDescriptions: [, (_) => de___listOfCaptionDescriptionPreset(_, context), `captionDescriptions`],
        ContainerSettings: [, (_) => de_ContainerSettings(_, context), `containerSettings`],
        VideoDescription: [, (_) => de_VideoDescription(_, context), `videoDescription`],
    });
};
const de_ProbeResult = (output, context) => {
    return take(output, {
        Container: [, (_) => de_Container(_, context), `container`],
        Metadata: [, (_) => de_Metadata(_, context), `metadata`],
        TrackMappings: [, (_) => de___listOfTrackMapping(_, context), `trackMappings`],
    });
};
const de_ProresSettings = (output, context) => {
    return take(output, {
        ChromaSampling: [, __expectString, `chromaSampling`],
        CodecProfile: [, __expectString, `codecProfile`],
        FramerateControl: [, __expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, __expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        InterlaceMode: [, __expectString, `interlaceMode`],
        ParControl: [, __expectString, `parControl`],
        ParDenominator: [, __expectInt32, `parDenominator`],
        ParNumerator: [, __expectInt32, `parNumerator`],
        PerFrameMetrics: [, _json, `perFrameMetrics`],
        ScanTypeConversionMode: [, __expectString, `scanTypeConversionMode`],
        SlowPal: [, __expectString, `slowPal`],
        Telecine: [, __expectString, `telecine`],
    });
};
const de_Queue = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        ConcurrentJobs: [, __expectInt32, `concurrentJobs`],
        CreatedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `createdAt`],
        Description: [, __expectString, `description`],
        LastUpdated: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `lastUpdated`],
        Name: [, __expectString, `name`],
        PricingPlan: [, __expectString, `pricingPlan`],
        ProgressingJobsCount: [, __expectInt32, `progressingJobsCount`],
        ReservationPlan: [, (_) => de_ReservationPlan(_, context), `reservationPlan`],
        ServiceOverrides: [, (_) => de___listOfServiceOverride(_, context), `serviceOverrides`],
        Status: [, __expectString, `status`],
        SubmittedJobsCount: [, __expectInt32, `submittedJobsCount`],
        Type: [, __expectString, `type`],
    });
};
const de_QueueTransition = (output, context) => {
    return take(output, {
        DestinationQueue: [, __expectString, `destinationQueue`],
        SourceQueue: [, __expectString, `sourceQueue`],
        Timestamp: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `timestamp`],
    });
};
const de_Rectangle = (output, context) => {
    return take(output, {
        Height: [, __expectInt32, `height`],
        Width: [, __expectInt32, `width`],
        X: [, __expectInt32, `x`],
        Y: [, __expectInt32, `y`],
    });
};
const de_RemixSettings = (output, context) => {
    return take(output, {
        AudioDescriptionAudioChannel: [, __expectInt32, `audioDescriptionAudioChannel`],
        AudioDescriptionDataChannel: [, __expectInt32, `audioDescriptionDataChannel`],
        ChannelMapping: [, (_) => de_ChannelMapping(_, context), `channelMapping`],
        ChannelsIn: [, __expectInt32, `channelsIn`],
        ChannelsOut: [, __expectInt32, `channelsOut`],
    });
};
const de_ReservationPlan = (output, context) => {
    return take(output, {
        Commitment: [, __expectString, `commitment`],
        ExpiresAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `expiresAt`],
        PurchasedAt: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `purchasedAt`],
        RenewalType: [, __expectString, `renewalType`],
        ReservedSlots: [, __expectInt32, `reservedSlots`],
        Status: [, __expectString, `status`],
    });
};
const de_ResourceTags = (output, context) => {
    return take(output, {
        Arn: [, __expectString, `arn`],
        Tags: [, _json, `tags`],
    });
};
const de_S3DestinationAccessControl = (output, context) => {
    return take(output, {
        CannedAcl: [, __expectString, `cannedAcl`],
    });
};
const de_S3DestinationSettings = (output, context) => {
    return take(output, {
        AccessControl: [, (_) => de_S3DestinationAccessControl(_, context), `accessControl`],
        Encryption: [, (_) => de_S3EncryptionSettings(_, context), `encryption`],
        StorageClass: [, __expectString, `storageClass`],
    });
};
const de_S3EncryptionSettings = (output, context) => {
    return take(output, {
        EncryptionType: [, __expectString, `encryptionType`],
        KmsEncryptionContext: [, __expectString, `kmsEncryptionContext`],
        KmsKeyArn: [, __expectString, `kmsKeyArn`],
    });
};
const de_SccDestinationSettings = (output, context) => {
    return take(output, {
        Framerate: [, __expectString, `framerate`],
    });
};
const de_ServiceOverride = (output, context) => {
    return take(output, {
        Message: [, __expectString, `message`],
        Name: [, __expectString, `name`],
        OverrideValue: [, __expectString, `overrideValue`],
        Value: [, __expectString, `value`],
    });
};
const de_SpekeKeyProvider = (output, context) => {
    return take(output, {
        CertificateArn: [, __expectString, `certificateArn`],
        EncryptionContractConfiguration: [
            ,
            (_) => de_EncryptionContractConfiguration(_, context),
            `encryptionContractConfiguration`,
        ],
        ResourceId: [, __expectString, `resourceId`],
        SystemIds: [, _json, `systemIds`],
        Url: [, __expectString, `url`],
    });
};
const de_SpekeKeyProviderCmaf = (output, context) => {
    return take(output, {
        CertificateArn: [, __expectString, `certificateArn`],
        DashSignaledSystemIds: [, _json, `dashSignaledSystemIds`],
        EncryptionContractConfiguration: [
            ,
            (_) => de_EncryptionContractConfiguration(_, context),
            `encryptionContractConfiguration`,
        ],
        HlsSignaledSystemIds: [, _json, `hlsSignaledSystemIds`],
        ResourceId: [, __expectString, `resourceId`],
        Url: [, __expectString, `url`],
    });
};
const de_SrtDestinationSettings = (output, context) => {
    return take(output, {
        StylePassthrough: [, __expectString, `stylePassthrough`],
    });
};
const de_StaticKeyProvider = (output, context) => {
    return take(output, {
        KeyFormat: [, __expectString, `keyFormat`],
        KeyFormatVersions: [, __expectString, `keyFormatVersions`],
        StaticKeyValue: [, __expectString, `staticKeyValue`],
        Url: [, __expectString, `url`],
    });
};
const de_TeletextDestinationSettings = (output, context) => {
    return take(output, {
        PageNumber: [, __expectString, `pageNumber`],
        PageTypes: [, _json, `pageTypes`],
    });
};
const de_TeletextSourceSettings = (output, context) => {
    return take(output, {
        PageNumber: [, __expectString, `pageNumber`],
    });
};
const de_TimecodeBurnin = (output, context) => {
    return take(output, {
        FontSize: [, __expectInt32, `fontSize`],
        Position: [, __expectString, `position`],
        Prefix: [, __expectString, `prefix`],
    });
};
const de_TimecodeConfig = (output, context) => {
    return take(output, {
        Anchor: [, __expectString, `anchor`],
        Source: [, __expectString, `source`],
        Start: [, __expectString, `start`],
        TimestampOffset: [, __expectString, `timestampOffset`],
    });
};
const de_TimedMetadataInsertion = (output, context) => {
    return take(output, {
        Id3Insertions: [, (_) => de___listOfId3Insertion(_, context), `id3Insertions`],
    });
};
const de_Timing = (output, context) => {
    return take(output, {
        FinishTime: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `finishTime`],
        StartTime: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `startTime`],
        SubmitTime: [, (_) => __expectNonNull(__parseEpochTimestamp(__expectNumber(_))), `submitTime`],
    });
};
const de_Track = (output, context) => {
    return take(output, {
        AudioProperties: [, (_) => de_AudioProperties(_, context), `audioProperties`],
        Codec: [, __expectString, `codec`],
        DataProperties: [, (_) => de_DataProperties(_, context), `dataProperties`],
        Duration: [, __limitedParseDouble, `duration`],
        Index: [, __expectInt32, `index`],
        TrackType: [, __expectString, `trackType`],
        VideoProperties: [, (_) => de_VideoProperties(_, context), `videoProperties`],
    });
};
const de_TrackMapping = (output, context) => {
    return take(output, {
        AudioTrackIndexes: [, _json, `audioTrackIndexes`],
        DataTrackIndexes: [, _json, `dataTrackIndexes`],
        VideoTrackIndexes: [, _json, `videoTrackIndexes`],
    });
};
const de_TrackSourceSettings = (output, context) => {
    return take(output, {
        TrackNumber: [, __expectInt32, `trackNumber`],
    });
};
const de_TtmlDestinationSettings = (output, context) => {
    return take(output, {
        StylePassthrough: [, __expectString, `stylePassthrough`],
    });
};
const de_UncompressedSettings = (output, context) => {
    return take(output, {
        Fourcc: [, __expectString, `fourcc`],
        FramerateControl: [, __expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, __expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        InterlaceMode: [, __expectString, `interlaceMode`],
        ScanTypeConversionMode: [, __expectString, `scanTypeConversionMode`],
        SlowPal: [, __expectString, `slowPal`],
        Telecine: [, __expectString, `telecine`],
    });
};
const de_Vc3Settings = (output, context) => {
    return take(output, {
        FramerateControl: [, __expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, __expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        InterlaceMode: [, __expectString, `interlaceMode`],
        ScanTypeConversionMode: [, __expectString, `scanTypeConversionMode`],
        SlowPal: [, __expectString, `slowPal`],
        Telecine: [, __expectString, `telecine`],
        Vc3Class: [, __expectString, `vc3Class`],
    });
};
const de_VideoCodecSettings = (output, context) => {
    return take(output, {
        Av1Settings: [, (_) => de_Av1Settings(_, context), `av1Settings`],
        AvcIntraSettings: [, (_) => de_AvcIntraSettings(_, context), `avcIntraSettings`],
        Codec: [, __expectString, `codec`],
        FrameCaptureSettings: [, (_) => de_FrameCaptureSettings(_, context), `frameCaptureSettings`],
        GifSettings: [, (_) => de_GifSettings(_, context), `gifSettings`],
        H264Settings: [, (_) => de_H264Settings(_, context), `h264Settings`],
        H265Settings: [, (_) => de_H265Settings(_, context), `h265Settings`],
        Mpeg2Settings: [, (_) => de_Mpeg2Settings(_, context), `mpeg2Settings`],
        ProresSettings: [, (_) => de_ProresSettings(_, context), `proresSettings`],
        UncompressedSettings: [, (_) => de_UncompressedSettings(_, context), `uncompressedSettings`],
        Vc3Settings: [, (_) => de_Vc3Settings(_, context), `vc3Settings`],
        Vp8Settings: [, (_) => de_Vp8Settings(_, context), `vp8Settings`],
        Vp9Settings: [, (_) => de_Vp9Settings(_, context), `vp9Settings`],
        XavcSettings: [, (_) => de_XavcSettings(_, context), `xavcSettings`],
    });
};
const de_VideoDescription = (output, context) => {
    return take(output, {
        AfdSignaling: [, __expectString, `afdSignaling`],
        AntiAlias: [, __expectString, `antiAlias`],
        ChromaPositionMode: [, __expectString, `chromaPositionMode`],
        CodecSettings: [, (_) => de_VideoCodecSettings(_, context), `codecSettings`],
        ColorMetadata: [, __expectString, `colorMetadata`],
        Crop: [, (_) => de_Rectangle(_, context), `crop`],
        DropFrameTimecode: [, __expectString, `dropFrameTimecode`],
        FixedAfd: [, __expectInt32, `fixedAfd`],
        Height: [, __expectInt32, `height`],
        Position: [, (_) => de_Rectangle(_, context), `position`],
        RespondToAfd: [, __expectString, `respondToAfd`],
        ScalingBehavior: [, __expectString, `scalingBehavior`],
        Sharpness: [, __expectInt32, `sharpness`],
        TimecodeInsertion: [, __expectString, `timecodeInsertion`],
        TimecodeTrack: [, __expectString, `timecodeTrack`],
        VideoPreprocessors: [, (_) => de_VideoPreprocessor(_, context), `videoPreprocessors`],
        Width: [, __expectInt32, `width`],
    });
};
const de_VideoDetail = (output, context) => {
    return take(output, {
        HeightInPx: [, __expectInt32, `heightInPx`],
        WidthInPx: [, __expectInt32, `widthInPx`],
    });
};
const de_VideoOverlay = (output, context) => {
    return take(output, {
        Crop: [, (_) => de_VideoOverlayCrop(_, context), `crop`],
        EndTimecode: [, __expectString, `endTimecode`],
        InitialPosition: [, (_) => de_VideoOverlayPosition(_, context), `initialPosition`],
        Input: [, (_) => de_VideoOverlayInput(_, context), `input`],
        Playback: [, __expectString, `playback`],
        StartTimecode: [, __expectString, `startTimecode`],
        Transitions: [, (_) => de___listOfVideoOverlayTransition(_, context), `transitions`],
    });
};
const de_VideoOverlayCrop = (output, context) => {
    return take(output, {
        Height: [, __expectInt32, `height`],
        Unit: [, __expectString, `unit`],
        Width: [, __expectInt32, `width`],
        X: [, __expectInt32, `x`],
        Y: [, __expectInt32, `y`],
    });
};
const de_VideoOverlayInput = (output, context) => {
    return take(output, {
        FileInput: [, __expectString, `fileInput`],
        InputClippings: [, (_) => de___listOfVideoOverlayInputClipping(_, context), `inputClippings`],
        TimecodeSource: [, __expectString, `timecodeSource`],
        TimecodeStart: [, __expectString, `timecodeStart`],
    });
};
const de_VideoOverlayInputClipping = (output, context) => {
    return take(output, {
        EndTimecode: [, __expectString, `endTimecode`],
        StartTimecode: [, __expectString, `startTimecode`],
    });
};
const de_VideoOverlayPosition = (output, context) => {
    return take(output, {
        Height: [, __expectInt32, `height`],
        Unit: [, __expectString, `unit`],
        Width: [, __expectInt32, `width`],
        XPosition: [, __expectInt32, `xPosition`],
        YPosition: [, __expectInt32, `yPosition`],
    });
};
const de_VideoOverlayTransition = (output, context) => {
    return take(output, {
        EndPosition: [, (_) => de_VideoOverlayPosition(_, context), `endPosition`],
        EndTimecode: [, __expectString, `endTimecode`],
        StartTimecode: [, __expectString, `startTimecode`],
    });
};
const de_VideoPreprocessor = (output, context) => {
    return take(output, {
        ColorCorrector: [, (_) => de_ColorCorrector(_, context), `colorCorrector`],
        Deinterlacer: [, (_) => de_Deinterlacer(_, context), `deinterlacer`],
        DolbyVision: [, (_) => de_DolbyVision(_, context), `dolbyVision`],
        Hdr10Plus: [, (_) => de_Hdr10Plus(_, context), `hdr10Plus`],
        ImageInserter: [, (_) => de_ImageInserter(_, context), `imageInserter`],
        NoiseReducer: [, (_) => de_NoiseReducer(_, context), `noiseReducer`],
        PartnerWatermarking: [, (_) => de_PartnerWatermarking(_, context), `partnerWatermarking`],
        TimecodeBurnin: [, (_) => de_TimecodeBurnin(_, context), `timecodeBurnin`],
    });
};
const de_VideoProperties = (output, context) => {
    return take(output, {
        BitDepth: [, __expectInt32, `bitDepth`],
        BitRate: [, __expectLong, `bitRate`],
        ColorPrimaries: [, __expectString, `colorPrimaries`],
        FrameRate: [, (_) => de_FrameRate(_, context), `frameRate`],
        Height: [, __expectInt32, `height`],
        MatrixCoefficients: [, __expectString, `matrixCoefficients`],
        TransferCharacteristics: [, __expectString, `transferCharacteristics`],
        Width: [, __expectInt32, `width`],
    });
};
const de_VideoSelector = (output, context) => {
    return take(output, {
        AlphaBehavior: [, __expectString, `alphaBehavior`],
        ColorSpace: [, __expectString, `colorSpace`],
        ColorSpaceUsage: [, __expectString, `colorSpaceUsage`],
        EmbeddedTimecodeOverride: [, __expectString, `embeddedTimecodeOverride`],
        Hdr10Metadata: [, (_) => de_Hdr10Metadata(_, context), `hdr10Metadata`],
        MaxLuminance: [, __expectInt32, `maxLuminance`],
        PadVideo: [, __expectString, `padVideo`],
        Pid: [, __expectInt32, `pid`],
        ProgramNumber: [, __expectInt32, `programNumber`],
        Rotate: [, __expectString, `rotate`],
        SampleRange: [, __expectString, `sampleRange`],
    });
};
const de_VorbisSettings = (output, context) => {
    return take(output, {
        Channels: [, __expectInt32, `channels`],
        SampleRate: [, __expectInt32, `sampleRate`],
        VbrQuality: [, __expectInt32, `vbrQuality`],
    });
};
const de_Vp8Settings = (output, context) => {
    return take(output, {
        Bitrate: [, __expectInt32, `bitrate`],
        FramerateControl: [, __expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, __expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        GopSize: [, __limitedParseDouble, `gopSize`],
        HrdBufferSize: [, __expectInt32, `hrdBufferSize`],
        MaxBitrate: [, __expectInt32, `maxBitrate`],
        ParControl: [, __expectString, `parControl`],
        ParDenominator: [, __expectInt32, `parDenominator`],
        ParNumerator: [, __expectInt32, `parNumerator`],
        QualityTuningLevel: [, __expectString, `qualityTuningLevel`],
        RateControlMode: [, __expectString, `rateControlMode`],
    });
};
const de_Vp9Settings = (output, context) => {
    return take(output, {
        Bitrate: [, __expectInt32, `bitrate`],
        FramerateControl: [, __expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, __expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        GopSize: [, __limitedParseDouble, `gopSize`],
        HrdBufferSize: [, __expectInt32, `hrdBufferSize`],
        MaxBitrate: [, __expectInt32, `maxBitrate`],
        ParControl: [, __expectString, `parControl`],
        ParDenominator: [, __expectInt32, `parDenominator`],
        ParNumerator: [, __expectInt32, `parNumerator`],
        QualityTuningLevel: [, __expectString, `qualityTuningLevel`],
        RateControlMode: [, __expectString, `rateControlMode`],
    });
};
const de_WarningGroup = (output, context) => {
    return take(output, {
        Code: [, __expectInt32, `code`],
        Count: [, __expectInt32, `count`],
    });
};
const de_WavSettings = (output, context) => {
    return take(output, {
        BitDepth: [, __expectInt32, `bitDepth`],
        Channels: [, __expectInt32, `channels`],
        Format: [, __expectString, `format`],
        SampleRate: [, __expectInt32, `sampleRate`],
    });
};
const de_WebvttDestinationSettings = (output, context) => {
    return take(output, {
        Accessibility: [, __expectString, `accessibility`],
        StylePassthrough: [, __expectString, `stylePassthrough`],
    });
};
const de_WebvttHlsSourceSettings = (output, context) => {
    return take(output, {
        RenditionGroupId: [, __expectString, `renditionGroupId`],
        RenditionLanguageCode: [, __expectString, `renditionLanguageCode`],
        RenditionName: [, __expectString, `renditionName`],
    });
};
const de_Xavc4kIntraCbgProfileSettings = (output, context) => {
    return take(output, {
        XavcClass: [, __expectString, `xavcClass`],
    });
};
const de_Xavc4kIntraVbrProfileSettings = (output, context) => {
    return take(output, {
        XavcClass: [, __expectString, `xavcClass`],
    });
};
const de_Xavc4kProfileSettings = (output, context) => {
    return take(output, {
        BitrateClass: [, __expectString, `bitrateClass`],
        CodecProfile: [, __expectString, `codecProfile`],
        FlickerAdaptiveQuantization: [, __expectString, `flickerAdaptiveQuantization`],
        GopBReference: [, __expectString, `gopBReference`],
        GopClosedCadence: [, __expectInt32, `gopClosedCadence`],
        HrdBufferSize: [, __expectInt32, `hrdBufferSize`],
        QualityTuningLevel: [, __expectString, `qualityTuningLevel`],
        Slices: [, __expectInt32, `slices`],
    });
};
const de_XavcHdIntraCbgProfileSettings = (output, context) => {
    return take(output, {
        XavcClass: [, __expectString, `xavcClass`],
    });
};
const de_XavcHdProfileSettings = (output, context) => {
    return take(output, {
        BitrateClass: [, __expectString, `bitrateClass`],
        FlickerAdaptiveQuantization: [, __expectString, `flickerAdaptiveQuantization`],
        GopBReference: [, __expectString, `gopBReference`],
        GopClosedCadence: [, __expectInt32, `gopClosedCadence`],
        HrdBufferSize: [, __expectInt32, `hrdBufferSize`],
        InterlaceMode: [, __expectString, `interlaceMode`],
        QualityTuningLevel: [, __expectString, `qualityTuningLevel`],
        Slices: [, __expectInt32, `slices`],
        Telecine: [, __expectString, `telecine`],
    });
};
const de_XavcSettings = (output, context) => {
    return take(output, {
        AdaptiveQuantization: [, __expectString, `adaptiveQuantization`],
        EntropyEncoding: [, __expectString, `entropyEncoding`],
        FramerateControl: [, __expectString, `framerateControl`],
        FramerateConversionAlgorithm: [, __expectString, `framerateConversionAlgorithm`],
        FramerateDenominator: [, __expectInt32, `framerateDenominator`],
        FramerateNumerator: [, __expectInt32, `framerateNumerator`],
        PerFrameMetrics: [, _json, `perFrameMetrics`],
        Profile: [, __expectString, `profile`],
        SlowPal: [, __expectString, `slowPal`],
        Softness: [, __expectInt32, `softness`],
        SpatialAdaptiveQuantization: [, __expectString, `spatialAdaptiveQuantization`],
        TemporalAdaptiveQuantization: [, __expectString, `temporalAdaptiveQuantization`],
        Xavc4kIntraCbgProfileSettings: [
            ,
            (_) => de_Xavc4kIntraCbgProfileSettings(_, context),
            `xavc4kIntraCbgProfileSettings`,
        ],
        Xavc4kIntraVbrProfileSettings: [
            ,
            (_) => de_Xavc4kIntraVbrProfileSettings(_, context),
            `xavc4kIntraVbrProfileSettings`,
        ],
        Xavc4kProfileSettings: [, (_) => de_Xavc4kProfileSettings(_, context), `xavc4kProfileSettings`],
        XavcHdIntraCbgProfileSettings: [
            ,
            (_) => de_XavcHdIntraCbgProfileSettings(_, context),
            `xavcHdIntraCbgProfileSettings`,
        ],
        XavcHdProfileSettings: [, (_) => de_XavcHdProfileSettings(_, context), `xavcHdProfileSettings`],
    });
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
const _C = "Category";
const _IF = "InputFile";
const _LB = "ListBy";
const _MR = "MaxResults";
const _NT = "NextToken";
const _O = "Order";
const _Q = "Queue";
const _S = "Status";
const _c = "category";
const _iF = "inputFile";
const _lB = "listBy";
const _mR = "maxResults";
const _nT = "nextToken";
const _o = "order";
const _q = "queue";
const _s = "status";
