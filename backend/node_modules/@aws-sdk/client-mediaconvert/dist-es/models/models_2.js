import { MediaConvertServiceException as __BaseException } from "./MediaConvertServiceException";
export const Type = {
    CUSTOM: "CUSTOM",
    SYSTEM: "SYSTEM",
};
export const Format = {
    matroska: "matroska",
    mp4: "mp4",
    quicktime: "quicktime",
    webm: "webm",
};
export const Codec = {
    AAC: "AAC",
    AC3: "AC3",
    AV1: "AV1",
    AVC: "AVC",
    C608: "C608",
    C708: "C708",
    EAC3: "EAC3",
    FLAC: "FLAC",
    HEVC: "HEVC",
    MJPEG: "MJPEG",
    MP3: "MP3",
    MP4V: "MP4V",
    MPEG2: "MPEG2",
    OPUS: "OPUS",
    PCM: "PCM",
    PRORES: "PRORES",
    THEORA: "THEORA",
    UNKNOWN: "UNKNOWN",
    VORBIS: "VORBIS",
    VP8: "VP8",
    VP9: "VP9",
    WEBVTT: "WEBVTT",
};
export const TrackType = {
    audio: "audio",
    data: "data",
    video: "video",
};
export const ColorPrimaries = {
    EBU_3213_E: "EBU_3213_E",
    GENERIC_FILM: "GENERIC_FILM",
    IPT: "IPT",
    ITU_2020: "ITU_2020",
    ITU_470BG: "ITU_470BG",
    ITU_470M: "ITU_470M",
    ITU_709: "ITU_709",
    LAST: "LAST",
    RESERVED: "RESERVED",
    SMPTE_170M: "SMPTE_170M",
    SMPTE_2067XYZ: "SMPTE_2067XYZ",
    SMPTE_240M: "SMPTE_240M",
    SMPTE_428_1: "SMPTE_428_1",
    SMPTE_431_2: "SMPTE_431_2",
    SMPTE_EG_432_1: "SMPTE_EG_432_1",
    UNSPECIFIED: "UNSPECIFIED",
};
export const MatrixCoefficients = {
    CD_CL: "CD_CL",
    CD_NCL: "CD_NCL",
    EBU3213: "EBU3213",
    FCC: "FCC",
    IPT: "IPT",
    ITU_2020_CL: "ITU_2020_CL",
    ITU_2020_NCL: "ITU_2020_NCL",
    ITU_2100ICtCp: "ITU_2100ICtCp",
    ITU_470BG: "ITU_470BG",
    ITU_709: "ITU_709",
    LAST: "LAST",
    RESERVED: "RESERVED",
    RGB: "RGB",
    SMPTE_170M: "SMPTE_170M",
    SMPTE_2085: "SMPTE_2085",
    SMPTE_240M: "SMPTE_240M",
    UNSPECIFIED: "UNSPECIFIED",
    YCgCo: "YCgCo",
};
export const TransferCharacteristics = {
    ARIB_B67: "ARIB_B67",
    IEC_61966_2_1: "IEC_61966_2_1",
    IEC_61966_2_4: "IEC_61966_2_4",
    ITU_1361: "ITU_1361",
    ITU_2020_10bit: "ITU_2020_10bit",
    ITU_2020_12bit: "ITU_2020_12bit",
    ITU_470BG: "ITU_470BG",
    ITU_470M: "ITU_470M",
    ITU_709: "ITU_709",
    LAST: "LAST",
    LINEAR: "LINEAR",
    LOC10_2_5: "LOC10_2_5",
    LOG10_2: "LOG10_2",
    RESERVED: "RESERVED",
    SMPTE_170M: "SMPTE_170M",
    SMPTE_2084: "SMPTE_2084",
    SMPTE_240M: "SMPTE_240M",
    SMPTE_428_1: "SMPTE_428_1",
    UNSPECIFIED: "UNSPECIFIED",
};
export const PricingPlan = {
    ON_DEMAND: "ON_DEMAND",
    RESERVED: "RESERVED",
};
export const Commitment = {
    ONE_YEAR: "ONE_YEAR",
};
export const RenewalType = {
    AUTO_RENEW: "AUTO_RENEW",
    EXPIRE: "EXPIRE",
};
export const ReservationPlanStatus = {
    ACTIVE: "ACTIVE",
    EXPIRED: "EXPIRED",
};
export const QueueStatus = {
    ACTIVE: "ACTIVE",
    PAUSED: "PAUSED",
};
export class BadRequestException extends __BaseException {
    name = "BadRequestException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "BadRequestException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, BadRequestException.prototype);
        this.Message = opts.Message;
    }
}
export class ConflictException extends __BaseException {
    name = "ConflictException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class ForbiddenException extends __BaseException {
    name = "ForbiddenException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ForbiddenException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ForbiddenException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerErrorException extends __BaseException {
    name = "InternalServerErrorException";
    $fault = "server";
    Message;
    constructor(opts) {
        super({
            name: "InternalServerErrorException",
            $fault: "server",
            ...opts,
        });
        Object.setPrototypeOf(this, InternalServerErrorException.prototype);
        this.Message = opts.Message;
    }
}
export class NotFoundException extends __BaseException {
    name = "NotFoundException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "NotFoundException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, NotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class TooManyRequestsException extends __BaseException {
    name = "TooManyRequestsException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
        this.Message = opts.Message;
    }
}
export const DescribeEndpointsMode = {
    DEFAULT: "DEFAULT",
    GET_ONLY: "GET_ONLY",
};
export const InputPolicy = {
    ALLOWED: "ALLOWED",
    DISALLOWED: "DISALLOWED",
};
export const JobTemplateListBy = {
    CREATION_DATE: "CREATION_DATE",
    NAME: "NAME",
    SYSTEM: "SYSTEM",
};
export const Order = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
export const PresetListBy = {
    CREATION_DATE: "CREATION_DATE",
    NAME: "NAME",
    SYSTEM: "SYSTEM",
};
export const QueueListBy = {
    CREATION_DATE: "CREATION_DATE",
    NAME: "NAME",
};
